<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>
        Jared|Forsyth feed    </title>
        <link href="/blog/atom.xml" rel="self" />
    
        <link href="/"/>
    
        
    <updated>2013-05-04T03:25:19Z</updated>

    <id>/blog/atom.xml/</id>

                        <entry>
                <title type="html">ProtoClipper - clip web pages for rapid prototyping</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2013-apr-25-protoclipper-clip-web-pages-rapid-prototyping.html"/>
                <updated>2013-04-25T20:00:38Z</updated>
                <published>2013-04-25T20:00:38Z</published>
                <id>/blog/2013-apr-25-protoclipper-clip-web-pages-rapid-prototyping.html</id>
                                <category   scheme="/blog/tags"
                            term="rapid prototyping"
                            label="Rapid Prototyping" />
                                <category   scheme="/blog/tags"
                            term="javascript"
                            label="Javascript" />
                                <category   scheme="/blog/tags"
                            term="project"
                            label="Project" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;I&#39;m doing some prototyping of UX changed for a website, and created a tool to
help you create sandboxed, interactive prototypes. Essentially it lets you take
a snapshot of a single section of a page and save it as a static HTML file -
including everything that may have been dynamically loaded or changed. Then the
in-body javascript is removed, and you&#39;re free to edit the resulting file and
produce your interactive mockup.&lt;/p&gt;
&lt;p&gt;To use, bookmark the following link. Then when you click the bookmark, the page
will get grayer out a bit, and you can click+drag to select the region you
want. If you want to quit, click ESC. Once you&#39;ve selected the region you want,
press &amp;lt;Enter&amp;gt; or click inside of the box to finalize -- then the page will be
clipped appropriately. Then you can &amp;quot;Ctrl-S&amp;quot; to save the clipped web page, and
you can then edit all you want.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;javascript:(function(){document.body.appendChild(document.createElement(&#39;script&#39;)).src=&#39;http://jaredforsyth.com/media/protoclipper.js&#39;;})();&#34;&gt;ProtoClipper Bookmarklet&lt;/a&gt;&lt;/p&gt;
&lt;img alt=&#34;/media/uploads/jared_protoclipper.png&#34; src=&#34;/media/uploads/jared_protoclipper.png&#34; style=&#34;width: 470px;&#34; /&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">The Internet of Things</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2013-apr-11-internet-things.html"/>
                <updated>2013-04-11T11:00:00Z</updated>
                <published>2013-04-11T11:00:00Z</published>
                <id>/blog/2013-apr-11-internet-things.html</id>
                                <category   scheme="/blog/tags"
                            term="society"
                            label="Society" />
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;The &amp;quot;simplify&amp;quot; trend among productivity specialists calls for a rejection of
much of the complexities of modern lifestyle, opting instead for simplicity
and minimalism. This is by no means a new concept; the ascetic monks from
various religions have embraced such practices for millenia.However, with the rise of the technological age and the birth of the
twenty-first century, such ideals have become increasingly popular. Why is it,
though, that the modern world with all its conveniences and time-savers would
drive so many to reject these very &amp;quot;advancements&amp;quot;? These amenities and
convenient technologies are developed around and often serve to support a
culture of consumerism, materialism, and individualism. While online shopping,
social networking, and email can be incredibly useful and assist in necessary
tasks, they can also be a significant detriment to our productivity and general
well-being. Add to that the many often disturbing negative uses of these new
technologies, and one can readily understand the urge to step back and focus on
the essential.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Social Conference</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2013-apr-09-social-conference.html"/>
                <updated>2013-04-09T21:18:00Z</updated>
                <published>2013-04-09T21:18:00Z</published>
                <id>/blog/2013-apr-09-social-conference.html</id>
                                <category   scheme="/blog/tags"
                            term="society"
                            label="Society" />
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;This past weekend I experimented with using twitter during one of the sessions
of &lt;a class=&#34;reference external&#34; href=&#34;http://conference.lds.org/&#34;&gt;General Conference&lt;/a&gt;. Frankly, it was
similar to watching conference with several dozen other people who were all
carrying on lively conversations, complete with peanut gallery.&lt;/p&gt;
&lt;p&gt;I found it detracted greatly from the experience, distracting my attention
while adding very little value. Leaving out all of the &amp;quot;watching #ldsconf in
my PJs&amp;quot;, it seemed that most of the activity was just people quoting something
a general authority had just said ... which I would have heard and noted on my
own, as long as I wasn&#39;t distracted. For the same reasons that we are asked to
be reverent in a meeting such as sacrament meeting or general conference,
twitter has no place in meetings where the Holy Spirit is the main teacher.&lt;/p&gt;
&lt;p&gt;Where twitter really shines is in the after-conference review and study of the
talks. When you are going over your notes, twitter provides the best quotes,
references, and related material for each talk, saving you a lot of time and
research.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">If I can&#39;t see you</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2013-apr-04-if-i-cant-see-you.html"/>
                <updated>2013-04-04T00:04:39Z</updated>
                <published>2013-04-04T00:04:39Z</published>
                <id>/blog/2013-apr-04-if-i-cant-see-you.html</id>
                                <category   scheme="/blog/tags"
                            term="gaming"
                            label="Gaming" />
                                <category   scheme="/blog/tags"
                            term="society"
                            label="Society" />
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;If you know indisputably that a behavior or product has destroyed lives and
families, would you dare touch it? In a number of cases, online gaming has
done just that. This is only a small percentage, of course, and we can&#39;t live
our lives in fear of everything that has associated risks. We all enjoy
electricity, for example, though it has tremendous power to kill.But this begs the question: what benefits are there from online gaming that
warrant even the slight risk of devastation? Call me an idealist, but I believe
in a world where truth is more exciting than fiction, where reality is &lt;em&gt;better&lt;/em&gt;
than virtual reality. Is it too much to hope that everyone could be exerting
their individual effort towards something constructive and inherently
meaningful for mankind, rather than commanding hoards of virtual orcs to blow
up someone else&#39;s hoards of virtual orcs? And it&#39;s not just the war games;
cultivating a virtual farm or flinging angry birds seems to accomplish equally
little. I don&#39;t mean to imply that online gaming is devoid of inherent value.
I&#39;m sure that players learn some amount of teamwork and problem solving over
the course of a quest. I propose, however, that spending time and effort in
actual reality results in stronger relationships and greater real value
overall. Escaping the problems we face in real life by immersing ourselves in a
virtual life does nothing to solve our problems, and often just intensifies
them.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Software Patents</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2013-apr-02-software-patents.html"/>
                <updated>2013-04-02T21:59:48Z</updated>
                <published>2013-04-02T21:59:48Z</published>
                <id>/blog/2013-apr-02-software-patents.html</id>
                                <category   scheme="/blog/tags"
                            term="video"
                            label="Video" />
                                <category   scheme="/blog/tags"
                            term="society"
                            label="Society" />
                                <category   scheme="/blog/tags"
                            term="patents"
                            label="Patents" />
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;object type=&#34;application/x-shockwave-flash&#34;
        width=&#34;425&#34;
        height=&#34;344&#34;
        class=&#34;youtube-embed&#34;
        data=&#34;http://www.youtube.com/v/Hk0E5a1nCjU&#34;&gt;
    &lt;param name=&#34;movie&#34; value=&#34;http://www.youtube.com/v/Hk0E5a1nCjU&#34;&gt;&lt;/param&gt;
    &lt;param name=&#34;wmode&#34; value=&#34;transparent&#34;&gt;&lt;/param&gt;
&lt;/object&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Creative Education</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2013-mar-28-creative-education.html"/>
                <updated>2013-03-28T11:43:01Z</updated>
                <published>2013-03-28T11:43:01Z</published>
                <id>/blog/2013-mar-28-creative-education.html</id>
                                <category   scheme="/blog/tags"
                            term="education"
                            label="Education" />
                                <category   scheme="/blog/tags"
                            term="reform"
                            label="Reform" />
                                <category   scheme="/blog/tags"
                            term="society"
                            label="Society" />
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;It&#39;s time to  stop ignoring the need for general education reform. It&#39;s true,
there are some of us who happen to be good at the kinds of things that
standardized tests are looking for, and who learn to love to learn &lt;em&gt;despite&lt;/em&gt; their
public education. But for every one who survives public schooling with creativity in tact, there
are a dozen others who buy in to the game, who either spend their time trying
to be good at the things that are tested, or sacrifice their creativity and
lose all desire to learn because the school system so often incentivises
conformity and punishes their creativity.&lt;/p&gt;
&lt;p&gt;The tragedy here is that these people spend the first few decades of their
lives &amp;quot;preparing for the workforce&amp;quot;, hoping to gain an education so they will
be successful in providing for themselves, only to find that the attributes
that are critical for occupational success are the very characteristics that
public school had beaten out of them.&lt;/p&gt;
&lt;p&gt;Assuming that the goal is to educate everyone as much as possible, to increase
their intelligence and help them have more opportunities throughout their
lives, the current system of &amp;quot;education&amp;quot; has more than a few curiosities. Why,
for example, do high schools around the country spend a large amount of time
&amp;quot;teaching to&amp;quot; the SAT, the ACT, and various other standardized tests? Closer
inspection reveals that much of &amp;quot;education&amp;quot; is geared toward &lt;em&gt;ranking&lt;/em&gt;
children in addition to--and sometimes in the place of--teaching them.&lt;/p&gt;
&lt;p&gt;The need for ranking America&#39;s youth follows naturally from the notion that
there are a limited number of jobs and a large number of potential employees.
Employers naturally would want to select the best and &amp;quot;most intelligent&amp;quot; for
the best jobs. This idea was born of the industrial revolution, where there was
indeed a tremendous glut of labor as people migrated to urban centers &lt;em&gt;en
masse&lt;/em&gt;. In such a world of job scarcity, students would in fact &lt;em&gt;want&lt;/em&gt; to be
ranked so that they can have the best job possible. This scenario, however, is
a delusion.&lt;/p&gt;
&lt;!-- This makes sense if you adhere to the early twentieth century view
that intelligence is static, IQ is a perfect representation of that
intelligence, and that we should have involuntary sterilization of
people who are &#34;just too stupid&#34;. I hope I&#39;m not being too generous
when I claim that nobody thinks that way anymore. --&gt;
&lt;p&gt;I hope none of us believe in a world where, regardless of how educated we all
are, the lowest ranked will just &lt;em&gt;have to work at McDonalds&lt;/em&gt;, because there
&lt;em&gt;just won&#39;t be enough&lt;/em&gt; good, fulfilling jobs for everyone. It&#39;s buy-in to
this fallacy of scarcity that leads to the type of ranking--not
schooling--which we see happening to our children. With school reform that
encourages creativity and innovation, we will see many more entrepreneurs
pushing the limits of human ability which will &lt;em&gt;create&lt;/em&gt; more jobs and lead to a more
flourishing economy overall.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">You know, we all want to change the world</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2013-mar-26-you-know-we-all-want-change-world.html"/>
                <updated>2013-03-26T11:31:25Z</updated>
                <published>2013-03-26T11:31:25Z</published>
                <id>/blog/2013-mar-26-you-know-we-all-want-change-world.html</id>
                                <category   scheme="/blog/tags"
                            term="ict4d"
                            label="Ict4D" />
                                <category   scheme="/blog/tags"
                            term="society"
                            label="Society" />
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;If you want to change the world, chances are you major in business, law,
political science, or economics. If you don&#39;t really care about making tons of
money, then sociology, anthropology, and nonprofit management are
possibilities. In general, though, computer science isn&#39;t on the
top of the &amp;quot;change-maker&amp;quot; list, and yet computer technology is changing the
world faster than anything else.  In many developing nations, the urban and
rural poor have cell phones and satellite dishes before they have shoes and
running water. In the information age, technology has the potential to connect
societies and cultures, and to empower the poor in less-developed nations to
speak up and be heard on a global scale. But who will build the software and
design the hardware that will enable this change? Computer scientists and
engineers are changing the world already.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Communist Software</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2013-mar-19-communist-software.html"/>
                <updated>2013-03-19T11:30:52Z</updated>
                <published>2013-03-19T11:30:52Z</published>
                <id>/blog/2013-mar-19-communist-software.html</id>
                                <category   scheme="/blog/tags"
                            term="communism"
                            label="Communism" />
                                <category   scheme="/blog/tags"
                            term="society"
                            label="Society" />
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;The world has seen several attempts to implement communism in the political
sphere, which invariably end in corrupt leaders and oppression of the masses.
So what makes open source and free software different? The core open
source values look a lot like communism on the face of it; people contribute
without monetary compensation, and receive without having to pay.Everyone gives what they can and receives what they need. The key difference
here, though, is that the open source phenomenon has been entirely voluntary,
in no way enforced by a government or entity.  For some reason, intelligent,
hard-working people from around the world have gravitated to this standard of
openness, resulting in an incredible number of free software projects, many of
which are very professional and have been able to help millions of people. The
ease of contributing afforded by the internet and the inherent low resource
cost make software development a domain where the ideal of community
contribution and benefit can actually be realized.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Grandpa&#39;s got an iPad</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2013-mar-14-grandpas-got-ipad.html"/>
                <updated>2013-03-14T11:49:36Z</updated>
                <published>2013-03-14T11:49:36Z</published>
                <id>/blog/2013-mar-14-grandpas-got-ipad.html</id>
                                <category   scheme="/blog/tags"
                            term="genealogy"
                            label="Genealogy" />
                                <category   scheme="/blog/tags"
                            term="society"
                            label="Society" />
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;In general, age and technological aptitude seem to be negatively correlated.
Toddlers raised on an iPad have no difficulty navigating the various menus and
interfaces now ubiquitous in the digital age, while their grandparents and
great-grandparents are left in the dust. In fact, &amp;quot;my grandmother&amp;quot;
has become the archetypal &amp;quot;most inept computer user I know&amp;quot;, resulting in
claims such as &amp;quot;this is so easy even my grandmother could use it&amp;quot;. Imagine the
clash, then, when a domain dominated by the elderly -- genealogy -- experiences
a technological revolution, as has occurred over the past few decades. The
search for progenitors lends itself naturally to digitization, but it also
requires the main demographic involved to rely heavily on the younger
generation.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Software Wars</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2013-mar-07-software-wars.html"/>
                <updated>2013-03-07T11:19:16Z</updated>
                <published>2013-03-07T11:19:16Z</published>
                <id>/blog/2013-mar-07-software-wars.html</id>
                                <category   scheme="/blog/tags"
                            term="society"
                            label="Society" />
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;The current software patent environment is enough to make me want to hide
under a rock somewhere, alone with my code and safe from predatory companies
and their packs of lawyers. If you&#39;ve missed it, the news is rife with
examples of companies armed with rediculously broad patents--covering things
like &amp;quot;downloading a file&amp;quot; or &amp;quot;a webpage with a popup&amp;quot;--who pray on small
startups without the funds to cover the court costs.  The internet
is littered with examples of bright minds speaking out against the current
software patent situation, and I haven&#39;t found one yet touting its benefits, or
claiming that it does in fact encourage innovation or accomplish &lt;em&gt;any&lt;/em&gt; of the
goals for which it was originally created.  But it&#39;s important to remember that
we haven&#39;t yet had two decades of the &lt;em&gt;internet&lt;/em&gt;, and the software industry
isn&#39;t even half a century old.  It&#39;s more than likely that the situation will
become a lot more sane after another half-century or so; I have faith in
humanity that judges around the country will eventually understand the nature
of software, and this familiarity will remove the opportunity for predatory
&amp;quot;patent trolling&amp;quot; and the like.&lt;/p&gt;
&lt;p&gt;More information:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://www.ornery.org/essays/warwatch/2003-09-07-1.html&#34;&gt;MP3s are not the devil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://www.prospect.org/cs/articles?article=the_control_of_ideas&#34;&gt;The Control of Ideas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://www.thisamericanlife.org/radio-archives/episode/441/when-patents-attack&#34;&gt;When patents attack!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">The Sleeping Giant</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2013-feb-22-sleeping-giant.html"/>
                <updated>2013-02-22T00:54:13Z</updated>
                <published>2013-02-22T00:54:13Z</published>
                <id>/blog/2013-feb-22-sleeping-giant.html</id>
                                <category   scheme="/blog/tags"
                            term="microsoft"
                            label="Microsoft" />
                                <category   scheme="/blog/tags"
                            term="society"
                            label="Society" />
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;There was a time when Microsoft was the hottest, fastest kid on the block,
dominating every market it entered. Bill Gates, the magnetic visionary, lead
the company with a philosophy that rejected complacency, always striving for
progress and innovation. That was the Microsoft of the 90s. The
most recent decade saw the software giant become complacent, somehow failing to
retain the air of innovation, drive, and novelty. In mobile devices, the Zune
and the Windows phone were relegated to the back seat while Apple and Google
drove the market. Yet, somehow, Microsoft seems to have accomplished the
improbable in the world of technology: a public image reboot. Young people of
today see Microsoft as cooler than it was two years ago, thanks to a strong
emphasis on design and human connectedness in advertising and marketing.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://www.reuters.com/article/2013/02/21/us-microsoft-poll-idUSBRE91K05P20130221&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Security is for the paranoid</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2013-feb-14-security-paranoid.html"/>
                <updated>2013-02-14T11:33:58Z</updated>
                <published>2013-02-14T11:33:58Z</published>
                <id>/blog/2013-feb-14-security-paranoid.html</id>
                                <category   scheme="/blog/tags"
                            term="society"
                            label="Society" />
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;Through modern media, we are well aware of the prevalence of hackers and
compromised accounts, both on a personal and corporate level. Yet somehow
it&#39;s still easy to be lulled into security by SSL, secure routers, and
passwords that Google told me were &amp;quot;very strong&amp;quot;.&lt;/p&gt;
&lt;p&gt;The thing about hacking is it&#39;s not a science; it&#39;s an exploration. Security
is not like a ball of string to untangle, where there&#39;s a sure way to solve it
waiting to be found. Security is a suit of armor which can protect you, but
only if coverage is complete. One chink, however, and there&#39;s the possibility
that some creative hacker will find your weakness and breach your defenses.
Once the initial barrier is down, it depends on your security practices how
easily the intruder can hop from account to account, wreaking havoc with your
private data.&lt;/p&gt;
&lt;p&gt;Two days ago I got hacked. Walking home from classes, I found that my gmail
account had send emails with a suspicious-looking link to around 50 people
from my contacts list. I looked around for other damages, but found none; and
it looked like the account had only been compromised an hour or so earlier. I
quickly changed my account&#39;s password, thanking my lucky stars that the hacker
hadn&#39;t locked me out, and sent apology emails to everyone involved.&lt;/p&gt;
&lt;p&gt;How did this happen? It turns out, the biggest liability in computer security
is summed up by the error code PEBKAC: Problem Exists Between Keyboard And
Chair. Yes, though computers have vulnerabilities, and exploits are constantly
being found for various operating systems and browsers, You are probably the
source of your data&#39;s vulnerability. In the early days of computing and the
internet, having a password such as &amp;quot;password&amp;quot;, &amp;quot;123456&amp;quot;, or one&#39;s own name
was embarrassingly common. Nowadays most serious websites require some amount
of password length and strength, making accounts far less vulnerable to a
brute force attack. But a major issue that persists is password reuse; it
doesn&#39;t matter how secure your bank&#39;s servers are if you use the same password
on a website that has much lower security.&lt;/p&gt;
&lt;p&gt;If you&#39;re like me, it may take a break-in to startle you into beefing up your
security. My advice: don&#39;t wait, because your hacker might not be as
benign as mine was.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">What if Computer Science had been invented by Women?</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2013-feb-07-what-if-computer-science-had-been-invented-women.html"/>
                <updated>2013-02-07T11:36:49Z</updated>
                <published>2013-02-07T11:36:49Z</published>
                <id>/blog/2013-feb-07-what-if-computer-science-had-been-invented-women.html</id>
                                <category   scheme="/blog/tags"
                            term="society"
                            label="Society" />
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;If we want to know why women aren&#39;t drawn to CS like they are to other
scientific departments, we have no further to look than the &amp;quot;typical computer
nerd&amp;quot;. Since it&#39;s inception, computer programming has been dominated by
young men whose fascination with computers borders on obsession; early
startups in the now silicon valley were manned by college kids who ran on
pizza and slept in their cubicles. Why would women want to be a part of that?
If the culture of computing had &lt;em&gt;begun&lt;/em&gt; with women, it would likely
be much better structured, cleaner, and less dominated by trial-and-error.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Facebook knows where you live</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2013-feb-05-facebook-knows-where-you-live.html"/>
                <updated>2013-02-05T11:36:57Z</updated>
                <published>2013-02-05T11:36:57Z</published>
                <id>/blog/2013-feb-05-facebook-knows-where-you-live.html</id>
                                <category   scheme="/blog/tags"
                            term="facebook"
                            label="Facebook" />
                                <category   scheme="/blog/tags"
                            term="society"
                            label="Society" />
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;Get ready for Big Brother: Facebook&#39;s new app &amp;quot;innovation&amp;quot; will track your
movements even when you aren&#39;t using it. Though this might have a few perks
for users, the real winners are in advertising -- marketers would leap at the
chance to take advantage of that kind of information, to make
ultra-personalized ads based on where you go and what you do. But
for the average user, this could usher in the era forecasted by minority report
and 1984, where big brother knows where you are at all times, billboards
address you by name, and abuse of privacy is just too easy to pass up. This
begs the question: is such a future inevitable? Can we imagine technological
advance without such deterioration of privacy? Because if we don&#39;t come up with
something soon, it will no longer be an option.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://www.bloomberg.com/news/2013-02-04/facebook-is-said-to-create-mobile-location-tracking-app.html&#34;&gt;Original Article (bloomberg.com)&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">North Korea Penetrated by Crowd Sourcing</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2013-jan-29-north-korea-penetrated-crowd-sourcing.html"/>
                <updated>2013-01-29T21:29:12Z</updated>
                <published>2013-01-29T21:29:12Z</published>
                <id>/blog/2013-jan-29-north-korea-penetrated-crowd-sourcing.html</id>
                                <category   scheme="/blog/tags"
                            term="society"
                            label="Society" />
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;North Korea, which since the end of the Korean war has been shut off from the
world and especially technology, is finally being opened up, at least
cartographically; google maps will soon be updated with detail about the
streets and cities of the hermit nation, thanks entirely to user contributions.This instance joins many others in the recent past showing the sometimes
disruptive power of internet collaboration. Even in a country where internet
access is highly restricted, truth and information eventually find their way
out onto the larger scene.&lt;/p&gt;
&lt;p&gt;Story on &lt;a class=&#34;reference external&#34; href=&#34;http://www.nytimes.com/2013/01/30/world/asia/google-maps-new-target-secretive-north-korea.html?_r=0&#34;&gt;NYTimes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">The Information Age is Killing Original Thought</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2013-jan-17-information-age-killing-original-thought.html"/>
                <updated>2013-01-17T23:36:08Z</updated>
                <published>2013-01-17T23:36:08Z</published>
                <id>/blog/2013-jan-17-information-age-killing-original-thought.html</id>
                                <category   scheme="/blog/tags"
                            term="creativity"
                            label="Creativity" />
                                <category   scheme="/blog/tags"
                            term="big data"
                            label="Big Data" />
                                <category   scheme="/blog/tags"
                            term="information age"
                            label="Information Age" />
                                <category   scheme="/blog/tags"
                            term="thought"
                            label="Thought" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;div class=&#34;align-right figure&#34;&gt;
&lt;img alt=&#34;http://farm4.staticflickr.com/3123/2553692300_acd80eff45_m.jpg&#34; src=&#34;http://farm4.staticflickr.com/3123/2553692300_acd80eff45_m.jpg&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;When my father was growing up, he didn&#39;t have wikipedia or google to answer
every question. Why is the sky blue? Today you would just look it up on
wikipedia. He actually had to &lt;em&gt;think&lt;/em&gt; if he wanted a reasonable answer. And
it&#39;s the act and effort of reasoning about the small things as a child that
lead to skills in critical thinking as an adult.  The children of
today have instantaneous access to such a glut of information that it provides
the illusion that &amp;quot;someone else has thought about it so I don&#39;t have to&amp;quot;; we
have become consumers, not producers, of information. As a result we are losing
the ability to think critically and to turn that information into knowledge and
wisdom.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Data &lt; Information &lt; Knowledge &lt; Wisdom</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2013-jan-17-data-information-knowledge-wisdom.html"/>
                <updated>2013-01-17T02:13:30Z</updated>
                <published>2013-01-17T02:13:30Z</published>
                <id>/blog/2013-jan-17-data-information-knowledge-wisdom.html</id>
                                <category   scheme="/blog/tags"
                            term="knowledge"
                            label="Knowledge" />
                                <category   scheme="/blog/tags"
                            term="learning"
                            label="Learning" />
                                <category   scheme="/blog/tags"
                            term="philosophy"
                            label="Philosophy" />
                                <category   scheme="/blog/tags"
                            term="enlightenment"
                            label="Enlightenment" />
                                <category   scheme="/blog/tags"
                            term="society"
                            label="Society" />
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;div class=&#34;align-right med-img figure&#34;&gt;
&lt;img alt=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Jean-Jacques_Rousseau_%28painted_portrait%29.jpg/220px-Jean-Jacques_Rousseau_%28painted_portrait%29.jpg&#34; src=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Jean-Jacques_Rousseau_%28painted_portrait%29.jpg/220px-Jean-Jacques_Rousseau_%28painted_portrait%29.jpg&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;In pondering the issues raised by the advent of big data and public access to
vast stores of information, I am reminded of Rousseau&#39;s book &lt;em&gt;Emilie&lt;/em&gt; in which
he describes how best to raise a hypothetical child of the same name. Speaking
of the acquisition of knowledge, he writes:&lt;/p&gt;
&lt;blockquote&gt;
When I see a man in love with knowledge, ... he seems to me like a child
gathering shells on the sea-shore, now picking them up, then throwing them
aside for others which he sees beyond them, then taking them again, till
overwhelmed by their number and unable to choose between them, he flings
them all away and returns empty handed.&lt;/blockquote&gt;
&lt;p&gt;It seems all too easy to jet-ski along the surface of the great ocean of
knowledge available to us -- flitting through wikipedia articles, browsing blog
posts and twitter feeds -- and in the process fail to ever descend below the
superficial to where knowledge, understanding, and wisdom are to be found.
Speeding through topics and picking up bits of trivia might be enjoyable and
give us the illusion of being well-informed, but it short-changes us of the
abiding satisfaction and joy that come from comprehension and critical
analysis.&lt;/p&gt;
&lt;p&gt;The age of consumerism has made us not only consumers of physical products but
also of ideas, opinions, and information. Due to the glut of information, we
have largely forgotten how to procure our own through independent critical
thought.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Vanilla Android Music Player</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2012-aug-11-vanilla-android-music-player.html"/>
                <updated>2012-08-11T14:49:10Z</updated>
                <published>2012-08-11T14:49:10Z</published>
                <id>/blog/2012-aug-11-vanilla-android-music-player.html</id>
                                <category   scheme="/blog/tags"
                            term="android"
                            label="Android" />
                                <category   scheme="/blog/tags"
                            term="vanilla"
                            label="Vanilla" />
                                <category   scheme="/blog/tags"
                            term="app"
                            label="App" />
                                <category   scheme="/blog/tags"
                            term="open-source"
                            label="Open-Source" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/nowplaying_h.png&#34; src=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/nowplaying_h.png&#34; style=&#34;width: 40%;&#34; /&gt;
&lt;p&gt;So I just got myself an LG-G2x android smartphone [running eaglesblood ICS :)] and I&#39;ve been trying a lot of things out. One thing that I really wanted to get right was a music player app. I looked around at the many reviews of the (mostly adware or freemium) popular music apps, thinking to myself &amp;quot;there&#39;s gotta be a really good, free, even open-source music player. somewhere&amp;quot;. well, I stumbled across &amp;quot;vanilla&amp;quot; early on, but was scared away by the somewhat primitive and downright clucky looking graphics [see the screenshots on &lt;a class=&#34;reference external&#34; href=&#34;https://play.google.com/store/apps/details?id=org.kreed.vanilla&#34;&gt;google play&lt;/a&gt; or &lt;a class=&#34;reference external&#34; href=&#34;http://www.androidopensourceapplications.com/content/vanilla-music-player&#34;&gt;AndroidOpenSourceApplications&lt;/a&gt; ]. But, after more searching and finding nothing promising, I decided to give it a spin.&lt;/p&gt;
&lt;p&gt;So I grabbed &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/kreed/vanilla/&#34;&gt;the source&lt;/a&gt; from github, compiled it and gave it a ride on my g2x, and...it&#39;s beautiful! At least, much more than the aformentioned screenshots would attest. It looks really sharp, actually blending in perfectly with the UI, and packing some surprise goodies like an &lt;em&gt;integrated file-browser&lt;/em&gt; and &lt;em&gt;lock screen support&lt;/em&gt;. Granted, the lock screen could use some tweaking, but that&#39;s what &lt;tt class=&#34;docutils literal&#34;&gt;fork&lt;/tt&gt; and &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;pull-request&lt;/span&gt;&lt;/tt&gt; are for!&lt;/p&gt;
&lt;p&gt;Anyway, to save the next guy some trouble, I&#39;ve taken some screenshots of this app in action. (running at commit &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/kreed/vanilla/commit/496d28411acc82c032e20bbf402dee1a901cbe01&#34;&gt;496d28411a&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[update]:&lt;/strong&gt; looks like the apk on google play &lt;em&gt;really is&lt;/em&gt; as old as Jan 2011...so for anyonw that wants it, here&#39;s the build I made -- for Ice Cream Sandwich [warning: I have very little knowledge of these things. so it might be buggy on GB, etc... I&#39;m still learning]&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/media/downloads/VanillaMusic.apk&#34;&gt;Download apk&lt;/a&gt;&lt;/p&gt;
&lt;img alt=&#34;http://qr.kaywa.com/img.php?s=4&amp;amp;d=http%3A%2F%2Fjaredforsyth.com%2Fmedia%2Fdownloads%2FVanillaMusic.apk&#34; src=&#34;http://qr.kaywa.com/img.php?s=4&amp;amp;d=http%3A%2F%2Fjaredforsyth.com%2Fmedia%2Fdownloads%2FVanillaMusic.apk&#34; /&gt;
&lt;p&gt;ALSO: I made no changes to the source code so far, this is all kreed&#39;s work.&lt;/p&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/nowplaying.png&#34; src=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/nowplaying.png&#34; style=&#34;width: 40%;&#34; /&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/nowplaying_h.png&#34; src=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/nowplaying_h.png&#34; style=&#34;width: 40%;&#34; /&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/list_albums.png&#34; src=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/list_albums.png&#34; style=&#34;width: 40%;&#34; /&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/list_artists.png&#34; src=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/list_artists.png&#34; style=&#34;width: 40%;&#34; /&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/list_songs.png&#34; src=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/list_songs.png&#34; style=&#34;width: 40%;&#34; /&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/list_files.png&#34; src=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/list_files.png&#34; style=&#34;width: 40%;&#34; /&gt;
&lt;p&gt;Lock screens (grid and slide)&lt;/p&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/lock_grid.png&#34; src=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/lock_grid.png&#34; style=&#34;width: 40%;&#34; /&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/lock_slide.png&#34; src=&#34;http://jaredforsyth.com/media/uploads/screenshots/vanilla/lock_slide.png&#34; style=&#34;width: 40%;&#34; /&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">CodeTalker by example: test!</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-29-codetalker-example-test.html"/>
                <updated>2010-07-29T14:08:10Z</updated>
                <published>2010-07-29T14:08:10Z</published>
                <id>/blog/2010-jul-29-codetalker-example-test.html</id>
                                <category   scheme="/blog/tags"
                            term="codetalker"
                            label="Codetalker" />
                                <category   scheme="/blog/tags"
                            term="tutorial"
                            label="Tutorial" />
                                <category   scheme="/blog/tags"
                            term="testing"
                            label="Testing" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/projects/navajo.gif&#34; src=&#34;http://jaredforsyth.com/media/projects/navajo.gif&#34; /&gt;
&lt;p&gt;This is the last in a four-part series, in which I demonstrate how to build a
CSS parser using &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/codetalker/&#34;&gt;CodeTalker&lt;/a&gt;:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/27/codetalker-example-tokenize/&#34;&gt;tokenize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/28/codetalker-example-parse/&#34;&gt;parse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/29/codetalker-example-translate/&#34;&gt;translate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;test!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To get the code for this:&lt;/p&gt;
&lt;p&gt;&lt;tt class=&#34;docutils literal&#34;&gt;git clone&lt;/tt&gt; &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/css/&#34;&gt;git://github.com/jabapyth/css.git&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;test&#34;&gt;
&lt;h1&gt;Test!&lt;/h1&gt;
&lt;p&gt;No code is complete (and some would say it&#39;s broken) without a good amount of
testing, and CodeTalker provides a simple way to test your rules individually,
to ensure the best coverage.&lt;/p&gt;
&lt;p&gt;the tests for our CSS grammar are contained in &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/css/blob/master/tests/grammar.py&#34;&gt;tests/grammar.py&lt;/a&gt;. To run them
(ensure you have py.test installed, then) &lt;tt class=&#34;docutils literal&#34;&gt;py.test tests/grammar.py&lt;/tt&gt;. Or
just &lt;tt class=&#34;docutils literal&#34;&gt;./setup.py test&lt;/tt&gt; to run all of them.&lt;/p&gt;
&lt;p&gt;The &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/codetalker/blob/master/codetalker/testing.py#L1&#34;&gt;codetalker/testing.py&lt;/a&gt;
currently only has one function, but it will setup valitation tests for rule
parsing.&lt;/p&gt;
&lt;p&gt;Here it is in action:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword namespace&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;name namespace&#34;&gt;css.grammar&lt;/span&gt; &lt;span class=&#34;keyword namespace&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;name namespace&#34;&gt;grammar&lt;/span&gt;
&lt;span class=&#34;keyword namespace&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;name namespace&#34;&gt;codetalker&lt;/span&gt; &lt;span class=&#34;keyword namespace&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;testing&lt;/span&gt;

&lt;span class=&#34;name&#34;&gt;parse_rule&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;parse_rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;grammar&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;grammar&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;name&#34;&gt;parse_rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;grammar&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;class_&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;literal string&#34;&gt;&#39;.one&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;literal string&#34;&gt;&#39;.green&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;literal string&#34;&gt;&#39;.GReEn&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;literal string&#34;&gt;&#39;.div&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;literal string&#34;&gt;&#39;one&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;punctuation&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;name&#34;&gt;parse_rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;grammar&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;simple_selector&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# should pass&lt;/span&gt;
    &lt;span class=&#34;literal string&#34;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;literal string&#34;&gt;&#39;div#some&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;literal string&#34;&gt;&#39;div#one.green&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;literal string&#34;&gt;&#39;div.frown&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;literal string&#34;&gt;&#39;ul.cheese:first-child&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;literal string&#34;&gt;&#39;li.one.two.three&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;literal string&#34;&gt;&#39;a#b.c.d:last-child&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;                              &lt;span class=&#34;comment&#34;&gt;# should fail&lt;/span&gt;
    &lt;span class=&#34;literal string&#34;&gt;&#39;one&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;literal string&#34;&gt;&#39;div# and&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;literal string&#34;&gt;&#39;div. one&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;punctuation&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;When you do that, &lt;tt class=&#34;docutils literal&#34;&gt;parse_rule&lt;/tt&gt; sets up a verification test for each string.&lt;/p&gt;
&lt;p&gt;To get your very own factory function, call &lt;tt class=&#34;docutils literal&#34;&gt;parse_rule = testing.parse_rule(__name__,
the_grammar)&lt;/tt&gt; (it needs your module&#39;s &lt;tt class=&#34;docutils literal&#34;&gt;__name__&lt;/tt&gt; in order to setup the
functions in your &lt;tt class=&#34;docutils literal&#34;&gt;global&lt;/tt&gt; namespace, where py.test can recognize and run
them.&lt;/p&gt;
&lt;p&gt;Then for each rule you want to test, call &lt;tt class=&#34;docutils literal&#34;&gt;parse_rule(the_rule,
passing_strings, failing_strings&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This method of incremental testing is really a boon while you are initially
creating your grammar — this way, you don&#39;t have to complete the grammar
before you test parts of it out.&lt;/p&gt;
&lt;p&gt;Now, in addition to just grammar testing, you should have some testing of your
translation as well, but the nature of those tests depends completely on your
specific project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">CodeTalker by example: translate</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-29-codetalker-example-translate.html"/>
                <updated>2010-07-29T11:54:10Z</updated>
                <published>2010-07-29T11:54:10Z</published>
                <id>/blog/2010-jul-29-codetalker-example-translate.html</id>
                                <category   scheme="/blog/tags"
                            term="codetalker"
                            label="Codetalker" />
                                <category   scheme="/blog/tags"
                            term="tutorial"
                            label="Tutorial" />
                                <category   scheme="/blog/tags"
                            term="translation"
                            label="Translation" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/projects/navajo.gif&#34; src=&#34;http://jaredforsyth.com/media/projects/navajo.gif&#34; /&gt;
&lt;p&gt;This is the third in a four-part series, in which I demonstrate how to build a
CSS parser using &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/codetalker/&#34;&gt;CodeTalker&lt;/a&gt;:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/27/codetalker-example-tokenize/&#34;&gt;tokenize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/28/codetalker-example-parse/&#34;&gt;parse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;translate&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/29/codetalker-example-test/&#34;&gt;test!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To get the code for this:&lt;/p&gt;
&lt;p&gt;&lt;tt class=&#34;docutils literal&#34;&gt;git clone&lt;/tt&gt; &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/css/&#34;&gt;git://github.com/jabapyth/css.git&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;translation&#34;&gt;
&lt;h1&gt;Translation&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;[for the impatient, here&#39;s the&lt;/em&gt; &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/css/blob/master/css/translator.py#L1&#34;&gt;final code&lt;/a&gt; &lt;em&gt;].&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like everything else in CodeTalker, translation is mean to be straightforward;
you have an abstract syntax tree, which is cool, but what you really want
is...in this case, an object which represents a stylesheet. So you have a
&lt;tt class=&#34;docutils literal&#34;&gt;StyleSheet&lt;/tt&gt; class and a &lt;tt class=&#34;docutils literal&#34;&gt;RuleSet&lt;/tt&gt; class, but how do you go from AST
to that?&lt;/p&gt;
&lt;p&gt;In general, you&#39;ll create one translation rule for each grammar rule.  Here&#39;s
the code for our &lt;tt class=&#34;docutils literal&#34;&gt;stylesheet&lt;/tt&gt; rule to refresh your memory.&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;style_sheet&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;star&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;import_&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;star&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;astAttrs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;literal string&#34;&gt;&#39;charset&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;literal string&#34;&gt;&#39;imports&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;import_&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt;
            &lt;span class=&#34;literal string&#34;&gt;&#39;sections&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And here&#39;s what it takes to translate it:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;name decorator&#34;&gt;&amp;#64;t.translates&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;ast&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;StyleSheet&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;stylesheet&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;ss&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;StyleSheet&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;charset&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;name&#34;&gt;ss&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;charset&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;ss&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;imports&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;imp&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;imp&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;media&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;imp&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;imports&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;ss&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;rules&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;sections&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;ast&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Ruleset&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# right now I&#39;m not dealing&lt;/span&gt;
                                             &lt;span class=&#34;comment&#34;&gt;# with other kinds of sections (media, page, font_face)&lt;/span&gt;
            &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;name&#34;&gt;ss&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;ss&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Create the object, populate it with the AST node, and then return it. And
register the function w/ the translator object.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">CodeTalker by example: parse</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-28-codetalker-example-parse.html"/>
                <updated>2010-07-28T09:41:59Z</updated>
                <published>2010-07-28T09:41:59Z</published>
                <id>/blog/2010-jul-28-codetalker-example-parse.html</id>
                                <category   scheme="/blog/tags"
                            term="codetalker"
                            label="Codetalker" />
                                <category   scheme="/blog/tags"
                            term="tutorial"
                            label="Tutorial" />
                                <category   scheme="/blog/tags"
                            term="parser"
                            label="Parser" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/projects/navajo.gif&#34; src=&#34;http://jaredforsyth.com/media/projects/navajo.gif&#34; /&gt;
&lt;p&gt;This is the second in a four-part series, in which I demonstrate how to build a
CSS parser using &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/codetalker/&#34;&gt;CodeTalker&lt;/a&gt;:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/27/codetalker-example-tokenize/&#34;&gt;tokenize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;parse&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/29/codetalker-example-translate/&#34;&gt;translate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/29/codetalker-example-test/&#34;&gt;test!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To get the code for this:&lt;/p&gt;
&lt;p&gt;&lt;tt class=&#34;docutils literal&#34;&gt;git clone&lt;/tt&gt; &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/css/&#34;&gt;git://github.com/jabapyth/css.git&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;parsing&#34;&gt;
&lt;h1&gt;Parsing&lt;/h1&gt;
&lt;p&gt;In this section we actually define the grammar and the AST attributes.
Fortunately for someone has already gone to the trouble of specifying CSS2 as
a CFG, and the process of transforming their EBNF to CodeTalker is relatively
straight-forward.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[for the impatient, you can just look at the&lt;/em&gt; &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/css/blob/master/css/grammar.py&#34;&gt;final code&lt;/a&gt; &lt;em&gt;].&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I should mention that &lt;strong&gt;CSS is an interesting case, as far as grammars go&lt;/strong&gt;.
With its case-insensitivity, ambiguous tokens (&lt;tt class=&#34;docutils literal&#34;&gt;#FFF&lt;/tt&gt; could either be a
color or a node id depending on the placement), and permissive error handling
(you&#39;re supposed to &amp;quot;just ignore anything you don&#39;t understand&amp;quot;), it proves
an interesting challange for a world which usually avoids ambiguity and spits
out a &amp;quot;Syntax Error&amp;quot; at the first sign of trouble.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;confession&#34;&gt;
&lt;h2&gt;Confession&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;But&lt;/em&gt; before we begin the main grammar, I have to address an aspect of CSS that I
conveniently failed to mention during the tokenization stage; CSS identifiers
&lt;strong&gt;can contain a hyphen&lt;/strong&gt;, and therefore aren&#39;t fully covered by the baked-in
ID token.&lt;/p&gt;
&lt;p&gt;It can&#39;t even be fixed by using the &lt;tt class=&#34;docutils literal&#34;&gt;idchars&lt;/tt&gt; option, because then a single
hyphen could be considered an ID, which wouldn&#39;t work out.&lt;/p&gt;
&lt;p&gt;Now, in my first version of this code, I just used a regexp&lt;/p&gt;
&lt;blockquote&gt;
&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;(-\w+)+|\w+(-\w+)*&lt;/span&gt;&lt;/tt&gt;&lt;/blockquote&gt;
&lt;p&gt;but for performance reasons, I chose to handle this
special aspect of IDs in a grammar rule. So here it is:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;cssid&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;ids&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;COLOR&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;NODE_NAME&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;UNIT&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;plus&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;_or&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;ids&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;_or&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;ids&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;star&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;_or&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;ids&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;dont_ignore&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;True&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;astAttrs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;parts&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;SYMBOL&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;ids&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;!-- yeah* --&gt;
&lt;p&gt;The &lt;tt class=&#34;docutils literal&#34;&gt;ids&lt;/tt&gt; variable is a list of all tokens that could concievably match
&lt;em&gt;part&lt;/em&gt; of a token; e.g. &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;green-div-baz&lt;/span&gt;&lt;/tt&gt; would be tokenized &lt;tt class=&#34;docutils literal&#34;&gt;[COLOR, SYMBOL,
NODE_NAME, SYMBOL, ID]&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Also of note is the &lt;tt class=&#34;docutils literal&#34;&gt;dont_ignore&lt;/tt&gt; flag; normally, whitespace, newlines, and
comments are ignored while parsing grammar rules (for this grammar, anyway),
which is the behavior you&#39;d expect. For this one rule, however, we don&#39;t want
to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;grammar-rules&#34;&gt;
&lt;h2&gt;Grammar Rules&lt;/h2&gt;
&lt;p&gt;Aaaand on to the normal stuff. Here&#39;s the &lt;tt class=&#34;docutils literal&#34;&gt;stylesheet&lt;/tt&gt; rule (which will be
our starting rule):&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;style_sheet&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;star&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;import_&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;star&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;astAttrs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;literal string&#34;&gt;&#39;charset&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;literal string&#34;&gt;&#39;imports&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;import_&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt;
            &lt;span class=&#34;literal string&#34;&gt;&#39;sections&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Pretty normal. (if this looks confusing to you, take a look at the &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/26/only-codetalker-introduction-youll-ever-need/&#34;&gt;CodeTalker
reference&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;But I won&#39;t bore you with the details — you could just look at &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/css/blob/master/css/grammar.py&#34;&gt;the code&lt;/a&gt; for
that.&lt;/p&gt;
&lt;p&gt;Here are some highlights:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;no_ignore&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;&amp;#64;&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;charset&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;_or&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;STRING&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;SSTRING&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;;&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;astAttrs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;literal string&#34;&gt;&#39;charset&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:{&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;type&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;STRING&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;SSTRING&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;single&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class=&#34;docutils literal&#34;&gt;no_ignore&lt;/tt&gt; function indicates that, during the parsing of this
sequence no tokens should be ignored. It&#39;s like the &lt;tt class=&#34;docutils literal&#34;&gt;dont_ignore&lt;/tt&gt; rule flag,
but for a sequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;permissive-syntax&#34;&gt;
&lt;h2&gt;Permissive Syntax&lt;/h2&gt;
&lt;p&gt;In order to address the &lt;strong&gt;just ignore any syntax errors, and do your best&lt;/strong&gt;
&lt;a class=&#34;reference external&#34; href=&#34;http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#parsing-errors&#34;&gt;rule of CSS parsing&lt;/a&gt;, I
made an addition to the &lt;tt class=&#34;docutils literal&#34;&gt;declaration&lt;/tt&gt; rule.&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;declaration&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;cssid&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;:&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;plus&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;important&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;;&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;plus&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;_not&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;_or&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;;&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;}&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;))),&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;;&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;astAttrs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;literal string&#34;&gt;&#39;property&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;cssid&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;literal string&#34;&gt;&#39;values&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;literal string&#34;&gt;&#39;important&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;important&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Essentially, &amp;quot;first try to make some sense of it, and if that fails, consume
tokens up to the next &#39;;&#39; or &#39;}&#39;&amp;quot;. In the second case, the AST attributes will
be None/empty.&lt;/p&gt;
&lt;p&gt;Anyway, I think that pretty much sums up what I wanted to focus on. Any
questions? comments? Shakespeare quotations?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">CodeTalker by example: tokenize</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-27-codetalker-example-tokenize.html"/>
                <updated>2010-07-27T16:33:48Z</updated>
                <published>2010-07-27T16:33:48Z</published>
                <id>/blog/2010-jul-27-codetalker-example-tokenize.html</id>
                                <category   scheme="/blog/tags"
                            term="codetalker"
                            label="Codetalker" />
                                <category   scheme="/blog/tags"
                            term="tutorial"
                            label="Tutorial" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="tokenization"
                            label="Tokenization" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;This is the first in a four-part series, in which I demonstrate how to build a
CSS parser using &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/codetalker/&#34;&gt;CodeTalker&lt;/a&gt;:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;strong&gt;tokenize&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/28/codetalker-example-parse/&#34;&gt;parse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/29/codetalker-example-translate/&#34;&gt;translate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/29/codetalker-example-test/&#34;&gt;test!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To get the code for this:&lt;/p&gt;
&lt;p&gt;&lt;tt class=&#34;docutils literal&#34;&gt;git clone&lt;/tt&gt; &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/css/&#34;&gt;git://github.com/jabapyth/css.git&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;background-what-is-codetalker&#34;&gt;
&lt;h1&gt;(background) What is CodeTalker?&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/codetalker/&#34;&gt;CodeTalker&lt;/a&gt; might be described as a &lt;a class=&#34;reference external&#34; href=&#34;http://en.wikipedia.org/wiki/Compiler-compiler&#34;&gt;compiler-compiler&lt;/a&gt; although that doesn&#39;t
quite fit. I would probably call it a &amp;quot;compiler creation library&amp;quot;, written in
python (with a healthy dose of C for performance). With CodeTalker, I have
&lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/json.py&#34;&gt;written a JSON parser&lt;/a&gt;
in &lt;strong&gt;66 lines of code&lt;/strong&gt; that &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/media/uploads/new_json.html&#34;&gt;beats most of the other python-based JSON
parsers around&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;tokenizing&#34;&gt;
&lt;h1&gt;Tokenizing&lt;/h1&gt;
&lt;p&gt;For reference I will be using the CSS specification at w3.org, although I will
be deviating somewhat from their suggested &lt;a class=&#34;reference external&#34; href=&#34;http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#tokenization&#34;&gt;tokenization&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Tokenization in CodeTalker is for the most part taken care of for you — as
tokens don&#39;t differ too much between languages — but there are some things
that it is useful to customize.&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword namespace&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;name namespace&#34;&gt;codetalker.pgm.tokens&lt;/span&gt; &lt;span class=&#34;keyword namespace&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;
&lt;span class=&#34;keyword namespace&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;name namespace&#34;&gt;constants&lt;/span&gt;
&lt;span class=&#34;keyword namespace&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;name namespace&#34;&gt;re&lt;/span&gt;

&lt;span class=&#34;comment&#34;&gt;## specified http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#tokenization&lt;/span&gt;

&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;name class&#34;&gt;SYMBOL&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;CharToken&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;chars&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;&amp;#64;#-%();{}[].:&amp;gt;+,&#39;&lt;/span&gt;

&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;name class&#34;&gt;HTMLCOMMENT&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;StringToken&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;strings&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;&amp;lt;!--&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;--&amp;gt;&#39;&lt;/span&gt;

&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;name class&#34;&gt;UNIT&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;IIdToken&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;strings&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;em&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;px&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;pt&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;mm&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;cm&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;rad&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;deg&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;grad&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;in&#39;&lt;/span&gt;

&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;name class&#34;&gt;COLOR&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;IIdToken&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;strings&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;constants&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;colors&lt;/span&gt;

&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;name class&#34;&gt;NODE_NAME&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;IIdToken&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;strings&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;constants&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;tags&lt;/span&gt;

&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;name class&#34;&gt;HEXCOLOR&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;ReToken&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rx&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;re&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;compile&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;r&#39;#([\da-fA-F]{6}|[\da-fA-F]{3})&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;name&#34;&gt;the_tokens&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;NUMBER&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;HEXCOLOR&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;CMCOMMENT&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;HTMLCOMMENT&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;name&#34;&gt;SYMBOL&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;UNIT&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;COLOR&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;NODE_NAME&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;STRING&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;name&#34;&gt;SSTRING&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;WHITE&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;NEWLINE&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;ANY&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In this case, I put the tokens in a saparate file from the main grammar, so
I&#39;ve made a &lt;tt class=&#34;docutils literal&#34;&gt;list&lt;/tt&gt; of the tokens, &lt;em&gt;in the order I want them&lt;/em&gt;, which can
simply be imported.&lt;/p&gt;
&lt;p&gt;Note that the order of tokens is very important — tokens are matched and
consumed strictly on a first-match basis. Therefore, if you put the &amp;quot;ANY&amp;quot;
token first (which matches any character), none of the other tokens would be
used.&lt;/p&gt;
&lt;p&gt;A quick refresher on the Base token types:&lt;/p&gt;
&lt;table class=&#34;docutils field-list&#34; frame=&#34;void&#34; rules=&#34;none&#34;&gt;
&lt;col class=&#34;field-name&#34; /&gt;
&lt;col class=&#34;field-body&#34; /&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;CharToken:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;Match a single char, restricted to those in its &lt;tt class=&#34;docutils literal&#34;&gt;chars&lt;/tt&gt; attribute.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;StringToken:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;Match one of the specified strings.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;IIdToken:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;Match one of the specified strings, case-insensitively, but &lt;em&gt;only&lt;/em&gt; when
that string is followed by a non-id character.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;ReToken:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;Use RegEx to match tokens.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Like I said; not too much going on here.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Orphan Alert</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-27-orphan-alert.html"/>
                <updated>2010-07-27T15:36:59Z</updated>
                <published>2010-07-27T15:36:59Z</published>
                <id>/blog/2010-jul-27-orphan-alert.html</id>
                                <category   scheme="/blog/tags"
                            term="announcement"
                            label="Announcement" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;In last couple of weeks a few of my projects (most notably &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/vim-debug/&#34;&gt;vim-debug&lt;/a&gt; and
&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/CodeTalker/&#34;&gt;CodeTalker&lt;/a&gt;) have really begun to take off and generate some public interest.&lt;/p&gt;
&lt;p&gt;Unfortunately (for the projects), I will be &lt;strong&gt;leaving next week&lt;/strong&gt; to serve an
&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/mission/&#34;&gt;LDS Mission&lt;/a&gt; in Germany &lt;strong&gt;for the next two years&lt;/strong&gt;, during which time I will
have exactly &lt;em&gt;no time&lt;/em&gt; to pursue various hobbies, including any coding.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why should you care?&lt;/strong&gt; Well, if anyone has an interest in any of the projects I&#39;ve got &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/&#34;&gt;up on github&lt;/a&gt;, I would be happy to add them as a maintainer, allowing them to push updates to my repo.&lt;/p&gt;
&lt;p&gt;Of course, anyone can fork my repos and do whatever they want, but I thought it would be nice to keep things from getting too fractured.&lt;/p&gt;
&lt;p&gt;Feel free to contact me at &lt;a class=&#34;reference external&#34; href=&#34;mailto:jared&amp;#64;jaredforsyth.com&#34;&gt;jared&amp;#64;jaredforsyth.com&lt;/a&gt; if you&#39;re interested.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">The Only CodeTalker Introduction You&#39;ll Ever Need</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-26-only-codetalker-introduction-youll-ever-need.html"/>
                <updated>2010-07-26T17:35:38Z</updated>
                <published>2010-07-26T17:35:38Z</published>
                <id>/blog/2010-jul-26-only-codetalker-introduction-youll-ever-need.html</id>
                                <category   scheme="/blog/tags"
                            term="codetalker"
                            label="Codetalker" />
                                <category   scheme="/blog/tags"
                            term="tutorial"
                            label="Tutorial" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="parser"
                            label="Parser" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/projects/navajo.gif&#34; src=&#34;http://jaredforsyth.com/media/projects/navajo.gif&#34; /&gt;
&lt;p&gt;Or at least that&#39;s the idea. I tried to design CodeTalker such that you don&#39;t
need to pore over pages of API docs... This document + the example contrib parsers
provided should be enough (let me know if they aren&#39;t).&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;what-is-codetalker&#34;&gt;
&lt;h1&gt;What is CodeTalker?&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/codetalker/&#34;&gt;CodeTalker&lt;/a&gt; might be described as a &lt;a class=&#34;reference external&#34; href=&#34;http://en.wikipedia.org/wiki/Compiler-compiler&#34;&gt;compiler-compiler&lt;/a&gt; although that doesn&#39;t quite fit. I would probably call it a &amp;quot;compiler creation library&amp;quot;, written in python (with a healthy dose of C for performance). With CodeTalker, I have &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/json.py&#34;&gt;written a JSON parser&lt;/a&gt; in &lt;strong&gt;66 lines of code&lt;/strong&gt; that &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/media/uploads/new_json.html&#34;&gt;beats most of the other python-based JSON parsers around&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;and-why-would-i-use-it&#34;&gt;
&lt;h1&gt;...and why would I use it?&lt;/h1&gt;
&lt;p&gt;Currently, if you want to make a parser that recognizes a &lt;a class=&#34;reference external&#34; href=&#34;http://en.wikipedia.org/wiki/Context-free_grammar&#34;&gt;Context-Free Grammar&lt;/a&gt;, you can &lt;em&gt;hand code it yourself&lt;/em&gt; (which is rediculous for all but the simplest of grammars), or use some sort of assisted parsing library. ANTLR is one that has been around for a long time. Yacc is another well known solution.&lt;/p&gt;
&lt;p&gt;The cool thing about CodeTalker is that it doesn&#39;t rely on a specialized syntax for grammar definition -- it&#39;s all python -- so the grammar can take advantage of specialized &amp;quot;helper functions&amp;quot; which can make your grammar much cleaner and more readable.&lt;/p&gt;
&lt;p&gt;The really awesome thing about CodeTalker is that it&#39;s &lt;em&gt;fast&lt;/em&gt;. Fast to define, test and maintain your grammar (it is python, after all), but &lt;strong&gt;most importantly the parser it produces is fast.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Additionally, I know there&#39;s no accounting for taste, but I think the way that CodeTalker grammars + translators are laid out are more intuitive than other solutions...but of course I would; so take a look for yourself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;defining-a-grammar&#34;&gt;
&lt;h1&gt;Defining a Grammar&lt;/h1&gt;
&lt;div class=&#34;section&#34; id=&#34;specifying-tokens&#34;&gt;
&lt;h2&gt;Specifying Tokens&lt;/h2&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;CTokens (built-in, c optimized)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;STRING # normal &amp;quot; string&lt;/li&gt;
&lt;li&gt;SSTRING # single-quoted &#39; string&lt;/li&gt;
&lt;li&gt;TSTRING # triple-quoted &#39;&#39;&#39; or &amp;quot;&amp;quot;&amp;quot; pythonic string&lt;/li&gt;
&lt;li&gt;CCOMMENT # c-style comment //&lt;/li&gt;
&lt;li&gt;CMCOMMENT # c-style multiline comment /** **/&lt;/li&gt;
&lt;li&gt;PYCOMMENT # python-style comment&lt;/li&gt;
&lt;li&gt;NUMBER # an integer or float&lt;/li&gt;
&lt;li&gt;INT # an integer&lt;/li&gt;
&lt;li&gt;HEX # an 0xabc012 hex number.&lt;/li&gt;
&lt;li&gt;ID # usually [a-zA-Z_][a-zA-Z_0-9]*&lt;/li&gt;
&lt;li&gt;ANY # matches any single char&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;CharToken&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;also c-optimized; matches &#39;one of the specified characters&#39;.&lt;/li&gt;
&lt;li&gt;example: SYMBOLS&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;StringToken&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;matches &#39;one of the specified strings&#39;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;IdToken&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;matches &#39;one of the specified strings&#39; &lt;em&gt;followed by a non-id character&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;example: RESERVED_WORDS&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;IIdToken&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;same as IdToken, but caseInsensitive&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;ReToken&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;this is the most flexible, but also the slowest. Use only when needed
(uses the python &lt;tt class=&#34;docutils literal&#34;&gt;re&lt;/tt&gt; module to match tokens)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;defining-rules&#34;&gt;
&lt;h2&gt;Defining Rules&lt;/h2&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;rulename&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;option1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;option2&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;option3&lt;/span&gt;
&lt;/pre&gt;
&lt;table class=&#34;docutils field-list&#34; frame=&#34;void&#34; rules=&#34;none&#34;&gt;
&lt;col class=&#34;field-name&#34; /&gt;
&lt;col class=&#34;field-body&#34; /&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;option:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;&lt;p class=&#34;first&#34;&gt;&lt;tt class=&#34;docutils literal&#34;&gt;child&lt;/tt&gt; or &lt;tt class=&#34;docutils literal&#34;&gt;(child, child, &lt;span class=&#34;pre&#34;&gt;...)&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;child:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;&lt;ul class=&#34;first last simple&#34;&gt;
&lt;li&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&amp;quot;string literal&amp;quot;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class=&#34;docutils literal&#34;&gt;[optional, children, &lt;span class=&#34;pre&#34;&gt;...]&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class=&#34;docutils literal&#34;&gt;(nested, (tuples, are), collapsed)&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class=&#34;docutils literal&#34;&gt;star(zero, or_more)&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class=&#34;docutils literal&#34;&gt;plus(one, or_more)&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class=&#34;docutils literal&#34;&gt;_or(one, of, these)&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class=&#34;docutils literal&#34;&gt;_not(this, stuff)&lt;/tt&gt; # checks the content, and if it &lt;em&gt;does not&lt;/em&gt; match,
consumes &lt;strong&gt;a single&lt;/strong&gt; token.&lt;/li&gt;
&lt;li&gt;&lt;tt class=&#34;docutils literal&#34;&gt;TOKEN_NAME&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;abstract-syntax-tree-attributes&#34;&gt;
&lt;h2&gt;Abstract Syntax Tree Attributes&lt;/h2&gt;
&lt;p&gt;By default, none of the rules you create will become nodes in the AST - that&#39;s
because you haven&#39;t defined what attributes such a node would have. Adding to
our generic rule, you specify an &lt;tt class=&#34;docutils literal&#34;&gt;astAttrs&lt;/tt&gt; attribute.&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;rulename&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;option1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;option2&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;astAttrs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;literal string&#34;&gt;&amp;quot;attr1&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;literal string&#34;&gt;&amp;quot;attr2&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;spec&lt;/span&gt;
    &lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It&#39;s a dictionary where the &lt;em&gt;keys&lt;/em&gt; are the attribute names that you want, and
the values are a specification of the value to be populated. The &lt;tt class=&#34;docutils literal&#34;&gt;spec&lt;/tt&gt;
comes in two flavors -- simple or complex. As you&#39;ll see, the simple flavor is
just a shortcut, but makes the definition clearer &amp;amp; simpler in many cases. (in
the following examples, &lt;tt class=&#34;docutils literal&#34;&gt;atype&lt;/tt&gt; is the name of a rule or token).&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;simple&#34;&gt;
&lt;h3&gt;Simple&lt;/h3&gt;
&lt;table class=&#34;docutils field-list&#34; frame=&#34;void&#34; rules=&#34;none&#34;&gt;
&lt;col class=&#34;field-name&#34; /&gt;
&lt;col class=&#34;field-body&#34; /&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;atype:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;match the first element of atype — &lt;em&gt;AstNode/Token or None&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;[atype]:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;match all elements of atype — &lt;em&gt;list&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;[atype, btype]:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;match all elements of the contained types — &lt;em&gt;list&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;complex&#34;&gt;
&lt;h3&gt;Complex&lt;/h3&gt;
&lt;p&gt;The complex definition is a dictionary, where the &lt;tt class=&#34;docutils literal&#34;&gt;type&lt;/tt&gt; parameter follows
the &lt;em&gt;simple&lt;/em&gt; definition above.&lt;/p&gt;
&lt;table class=&#34;docutils field-list&#34; frame=&#34;void&#34; rules=&#34;none&#34;&gt;
&lt;col class=&#34;field-name&#34; /&gt;
&lt;col class=&#34;field-body&#34; /&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;type:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;atype | [atype] | [atype, anothertype]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;single:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;(bool) only use if you want to override the normal inference.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;start:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;(int) used for slicing (default: 0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;end:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;(int) also for slicing (default: 0 [means no limit])&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;step:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;(int) (default: 1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As you can see, if you don&#39;t need to slice or override the &amp;quot;single&amp;quot; aspect,
you can just use the simple spec.&lt;/p&gt;
&lt;p&gt;And here&#39;s an example from a calculator:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;addsub_expression&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;star&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;_or&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;+&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;astAttrs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;literal string&#34;&gt;&#39;left&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;      &lt;span class=&#34;comment&#34;&gt;# matches only the first &#39;value&#39; node&lt;/span&gt;
        &lt;span class=&#34;literal string&#34;&gt;&#39;ops&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt;        &lt;span class=&#34;comment&#34;&gt;# matches all the operator tokens (&#39;+&#39; or &#39;-&#39;)&lt;/span&gt;
        &lt;span class=&#34;literal string&#34;&gt;&#39;values&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;literal string&#34;&gt;&#39;type&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt;
            &lt;span class=&#34;literal string&#34;&gt;&#39;start&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;                   &lt;span class=&#34;comment&#34;&gt;# matches all but the first value.&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;ast-name&#34;&gt;
&lt;h2&gt;AST Name&lt;/h2&gt;
&lt;p&gt;The (class)name of the resulting AST node defaults to the function name,
converted to TitleCase (e.g. some_rule =&amp;gt; SomeRule). You can customize this
name by setting the &lt;tt class=&#34;docutils literal&#34;&gt;astName&lt;/tt&gt; attribute of the &lt;em&gt;function&lt;/em&gt;. example:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;comment&#34;&gt;# stuff&lt;/span&gt;
&lt;span class=&#34;name&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;astName&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;FooBar&#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;actually-making-the-grammar&#34;&gt;
&lt;h2&gt;Actually Making the Grammar&lt;/h2&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;name&#34;&gt;grammar&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;Grammar&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;tokens&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;idchars&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;indent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;ignore&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[],&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;ast_tokens&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[])&lt;/span&gt;
&lt;/pre&gt;
&lt;table class=&#34;docutils field-list&#34; frame=&#34;void&#34; rules=&#34;none&#34;&gt;
&lt;col class=&#34;field-name&#34; /&gt;
&lt;col class=&#34;field-body&#34; /&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;start:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;the start rule&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;tokens:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;a list of tokens to use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;idchars:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;extra characters you want to be considered ID-like (e.g. &#39;$&#39; for
javascript, PHP)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;indent:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;(bool) if true, insert INDENT and DEDENT tokens in the appropriate places
(necessary if you want to parse indentation-based languages like python)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;ignore:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;list of tokens to ignore while parsing (usually [WHITE], or [WHITE,
NEWLINE])&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;ast_tokens:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;list of tokens to &lt;em&gt;not&lt;/em&gt; ignore while constructing the AST (often [NUMBER,
ID])&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;translating&#34;&gt;
&lt;h1&gt;Translating&lt;/h1&gt;
&lt;p&gt;This is the final step - doing something with the AST you just made. The ast
classes are auto generated, and stored in grammar.ast_classes. I generally put
&lt;tt class=&#34;docutils literal&#34;&gt;ast = grammar.ast_classes&lt;/tt&gt; at the start of my translator.&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p class=&#34;first admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;AST Nodes have only the attributes you defined for them, populated with
the parse tree.&lt;/p&gt;
&lt;p&gt;Tokens have three attributes:&lt;/p&gt;
&lt;table class=&#34;last docutils field-list&#34; frame=&#34;void&#34; rules=&#34;none&#34;&gt;
&lt;col class=&#34;field-name&#34; /&gt;
&lt;col class=&#34;field-body&#34; /&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;value:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;(str)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;lineno:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;(int)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;charno:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;(int)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;A translator function can return anything you like...&lt;/p&gt;
&lt;p&gt;A Translator is really just a pretty transparent shortcut for taking an AST
and turning it into what you really wanted in the first place.&lt;/p&gt;
&lt;p&gt;Instead of writing:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;deal_with_ast&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;ast&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;deal_with_foo&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;ast&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Bar&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;deal_with_bar&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You get:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;name&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;Translator&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;grammar&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;name decorator&#34;&gt;&amp;#64;t.translates&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;ast&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;deal_with_foo&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;

&lt;span class=&#34;name decorator&#34;&gt;&amp;#64;t.translates&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;ast&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Bar&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;deal_with_bar&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;scope&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Within a &lt;tt class=&#34;docutils literal&#34;&gt;deal_with_baz&lt;/tt&gt; function, if you want to translate a child node,
call &lt;tt class=&#34;docutils literal&#34;&gt;t.translate(node.somechild, scope)&lt;/tt&gt; -- it will deal with that node in
the way you&#39;d expect.&lt;/p&gt;
&lt;p&gt;The &lt;tt class=&#34;docutils literal&#34;&gt;scope&lt;/tt&gt; variable that you saw me passing around is an object
that is really useful if you need to maintain any kind of state while
translating (local variables, etc.). To &amp;quot;turn on&amp;quot; scope usage, pass some
keyword arguments to the translator, which will populate the default
attributes of the scope. example:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;name&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;Translator&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;grammar&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;variables&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;{},&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;call_stack&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class=&#34;docutils literal&#34;&gt;scope&lt;/tt&gt; object that gets passed around will then have the attributes
&amp;quot;variables&amp;quot; and &amp;quot;call_stack&amp;quot;. For a good example of using the translation
scope, look at &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/clevercss2/&#34;&gt;CleverCSS2&lt;/a&gt;.
&lt;em&gt;If you don&#39;t &amp;quot;turn on&amp;quot; the scope, it doesn&#39;t get passed around -- your
translating functions should only take one argument.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Once you&#39;ve populated your translator, you can call &lt;tt class=&#34;docutils literal&#34;&gt;t.from_string(text)&lt;/tt&gt; to
first turn the &lt;tt class=&#34;docutils literal&#34;&gt;text&lt;/tt&gt; into an AST, and then translate the AST.&lt;/p&gt;
&lt;p&gt;Here&#39;s a really simple example of a translator function (taken from the &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/json.py#L39&#34;&gt;json
grammar&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;name decorator&#34;&gt;&amp;#64;JSON.translates&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;ast&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;t_list&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now you&#39;re ready to look at the examples:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/json.py&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/math.py&#34;&gt;math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/clevercss2/&#34;&gt;CleverCSS2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/css/blob/master/css/grammar.py&#34;&gt;python-css&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Lessons learned; optimizing CodeTalker</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-26-lessons-learned-optimizing-codetalker.html"/>
                <updated>2010-07-26T12:00:00Z</updated>
                <published>2010-07-26T12:00:00Z</published>
                <id>/blog/2010-jul-26-lessons-learned-optimizing-codetalker.html</id>
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                                <category   scheme="/blog/tags"
                            term="codetalker"
                            label="Codetalker" />
                                <category   scheme="/blog/tags"
                            term="optimization"
                            label="Optimization" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="performance"
                            label="Performance" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;As &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/21/codetalker-doubles-in-speed/#comment-63681945&#34;&gt;per request&lt;/a&gt;,
I&#39;ve decided to write down what I&#39;ve learned from my &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/21/codetalker-doubles-in-speed/&#34;&gt;optimization adventures&lt;/a&gt;
with &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/codetalker/&#34;&gt;CodeTalker&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;intro&#34;&gt;
&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;To start out, I&#39;d like to lay a couple of baseline suggestions. &lt;strong&gt;(Unit)tests are
your very best friend&lt;/strong&gt;. Nothing is more satisfying than running your suite
after an optimization and knowing that you &lt;strong&gt;a)&lt;/strong&gt; didn&#39;t break anything and &lt;strong&gt;b)&lt;/strong&gt;
made it run faster. And nothing is more terrible than trying out some example
code (or worse, hearing from a user) and realizing that you &lt;em&gt;broke something&lt;/em&gt;,
but you don&#39;t remember when or where. So you break out the old &lt;tt class=&#34;docutils literal&#34;&gt;hg bisect&lt;/tt&gt;,
but still, it&#39;s a pain.&lt;/p&gt;
&lt;p&gt;Which reminds me — &lt;em&gt;you are using version control, right?&lt;/em&gt; Because if you
aren&#39;t, you really should &lt;strong&gt;get some&lt;/strong&gt;. Seriously. &lt;a class=&#34;reference external&#34; href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;,
&lt;a class=&#34;reference external&#34; href=&#34;http://mercurial.selenic.com/&#34;&gt;Mercurial&lt;/a&gt;, &lt;a class=&#34;reference external&#34; href=&#34;http://bazaar.canonical.com/en/&#34;&gt;Bazaar&lt;/a&gt;...all good stuff. And really don&#39;t try to
code without it. Especially when optimizing, when there&#39;s a better-than-average
chance that you&#39;ll totally break something :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;btw-why-should-i-profile&#34;&gt;
&lt;h1&gt;BTW (Why) Should I Profile?&lt;/h1&gt;
&lt;p&gt;I&#39;ve heard several people throw out numbers like &amp;quot;90% of your time is spent in
10% of your code — so to optimize, just find that 10%&amp;quot;. If that&#39;s the case
with you, this is probably &lt;em&gt;not the article you&#39;re looking for&lt;/em&gt;. You can jump
down to the &lt;a class=&#34;reference internal&#34; href=&#34;#initial-optimizations&#34;&gt;Initial Optimizations&lt;/a&gt; section if you want, but most of my time
I&#39;ll be talking about data processing optimization. Which brings me to my next
point:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Most programs don&#39;t need to be fast&lt;/strong&gt;. Sure, if your django app takes &lt;em&gt;15
seconds to render&lt;/em&gt; you should do some profiling, but in general speed is not
something you need to worry about. The specific section of computing that I&#39;ll
be addressing is &lt;strong&gt;data processing&lt;/strong&gt;, where it&#39;s pretty much &lt;em&gt;all hard work
all the time&lt;/em&gt;, and a 10x speedup from 100 minutes to 10 minutes is a big deal
(again, in your average normal program, that same speedup would be from 1sec
to .1sec, which doesn&#39;t make quite as much difference).&lt;/p&gt;
&lt;p&gt;Now, on to&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;the-actual-optimizing-stuff&#34;&gt;
&lt;h1&gt;The actual optimizing stuff&lt;/h1&gt;
&lt;div class=&#34;section&#34; id=&#34;make-sure-you-know-what-to-optimize&#34;&gt;
&lt;h2&gt;Make sure you know what to optimize&lt;/h2&gt;
&lt;p&gt;Say you&#39;ve got an example usage of your library/program that really puts it
through its paces; let&#39;s call it &lt;tt class=&#34;docutils literal&#34;&gt;examples/big.py&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Here&#39;s what I do:&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
python -mcProfile -o big.prof examples/big.py
runsnake big.prof
&lt;/pre&gt;
&lt;p&gt;The first command you get out of the box w/ CPython (with some other python,
try &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;-mProfile&lt;/span&gt;&lt;/tt&gt; instead of &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;-mcProfile&lt;/span&gt;&lt;/tt&gt;). It runs big.py, profiles the
methods run, and saves the profiling output to big.prof.&lt;/p&gt;
&lt;p&gt;Now in order to understand the profiling output, I like to use a program
called &lt;a class=&#34;reference external&#34; href=&#34;http://www.vrplumber.com/programming/runsnakerun/&#34;&gt;RunSnakeRun&lt;/a&gt;,
which you can get through easy_install; &lt;tt class=&#34;docutils literal&#34;&gt;easy_install RunSnakeRun&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Play around w/ the GUI a bit, and you should get an idea of what needs to be
profiled.&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p class=&#34;first admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p class=&#34;last&#34;&gt;Profiling works best when your code is well modularized - if you have all
the work in one function &lt;tt class=&#34;docutils literal&#34;&gt;do_heavy_stuff&lt;/tt&gt; you won&#39;t get as good a
picture of exactly what needs to be modified.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Methods of optimization:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;don&#39;t do stupid stuff&lt;/li&gt;
&lt;li&gt;use the right datatypes&lt;/li&gt;
&lt;li&gt;C &amp;gt; python&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;initial-optimizations&#34;&gt;
&lt;h2&gt;Initial Optimizations&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Dont do stupid stuff&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;... like concatenate a &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jun/26/string-concatenation-kills-babies/&#34;&gt;bunch of strings together&lt;/a&gt;
in cpython :). Or do things that aren&#39;t loop-dependent inside of a loop.
Sometimes it&#39;s small &lt;em&gt;doh!&lt;/em&gt; moments that give you some of your time back.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use the right datatypes + don&#39;t reinvent the wheel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is another section that a lot of people talk about, so I won&#39;t spend too
much time. There are a number of problems (like searching, sorting), that
people have spent a lot of time making fast, and there are some datatypes that
are much faster to work with than others.&lt;/p&gt;
&lt;p&gt;For example, in python, list lookup is faster than dictionary lookup (for
large datasets).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;the-real-stuff&#34;&gt;
&lt;h2&gt;The Real Stuff&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;C &amp;gt; Python&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sorry folks, but for straight data processing, C wins. But python is much
easier + more fun to write/read/deal with...&lt;/p&gt;
&lt;p&gt;One of the best things I did for CodeTalker was to dive into &lt;a class=&#34;reference external&#34; href=&#34;http://cython.org/&#34;&gt;Cython&lt;/a&gt;, which made the python+c integration a breeze.&lt;/p&gt;
&lt;p&gt;Parts of CodeTalker in C:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;tokenization (when no custom tokens are used)&lt;/li&gt;
&lt;li&gt;parsing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Parts of CodeTalker in Cython:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;AST conversion (back to python objects)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Parts of CodeTalker in Python:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;Final translation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the case of CodeTalker, tokenization was most expensive, followed by
parsing, and then AST conversion. The final translation is specified by
whoever is using CodeTalker, so it must be in python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caching is King&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was able to get several big speedups by just caching various objects (often
when converting between python and C). On modern systems, memory is prolific,
so feel free to use it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;some-specific-codetalker-notes&#34;&gt;
&lt;h1&gt;Some specific CodeTalker notes&lt;/h1&gt;
&lt;p&gt;Back when I had everything in python, I tried moving from a function-centric
organization to a more OO friendly structure, and I took a big performance
hit.&lt;/p&gt;
&lt;p&gt;moving from explicit Tokens to regex was &lt;em&gt;huge&lt;/em&gt;. Moving from regex to
hard-coded C was another huge.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;id1&#34;&gt;
&lt;h2&gt;Cython&lt;/h2&gt;
&lt;p&gt;For some reason, I trust myself more than I trust cython to write pure C.
Maybe I&#39;m unfounded in this, but I like to have control when I&#39;m only
working with C data types. When python exceptions/objects get involved, I
owe everything to Cython. [one weird thing — cython&#39;s &amp;quot;hello world&amp;quot; &lt;tt class=&#34;docutils literal&#34;&gt;print
&amp;quot;hello world&amp;quot;&lt;/tt&gt; is 1204 lines of C?? and the hello.so is 26k??]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">It&#39;s time for a better diff</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-22-its-time-better-diff.html"/>
                <updated>2010-07-22T10:23:24Z</updated>
                <published>2010-07-22T10:23:24Z</published>
                <id>/blog/2010-jul-22-its-time-better-diff.html</id>
                                <category   scheme="/blog/tags"
                            term="diff"
                            label="Diff" />
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                                <category   scheme="/blog/tags"
                            term="dvcs"
                            label="Dvcs" />
                                <category   scheme="/blog/tags"
                            term="git"
                            label="Git" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;&lt;tt class=&#34;docutils literal&#34;&gt;diff&lt;/tt&gt; is one of those programs that&#39;s just been around &lt;em&gt;forever&lt;/em&gt;, and that hasn&#39;t changed much b/c it&#39;s the best it can possibly be. ...right?&lt;/p&gt;
&lt;p&gt;Sort of. For finding out which lines have changed between two files, there&#39;s none better (maybe). 40 (!) years of use has shown us this. But for &lt;em&gt;finding the difference&lt;/em&gt; between two files? I argue that those two problems, which have been so long conflated, are actually not the same.&lt;/p&gt;
&lt;p&gt;Why do I care so much about this? Who uses diff, anyway? Well, &lt;em&gt;git&lt;/em&gt;. &lt;em&gt;mercurial&lt;/em&gt;. &lt;em&gt;svn&lt;/em&gt;. The places that &lt;tt class=&#34;docutils literal&#34;&gt;diff&lt;/tt&gt; falls short are in dealing with &lt;em&gt;multiple conflicting changes&lt;/em&gt; to a file. Oh, yeah; this post is about merge conflicts.&lt;/p&gt;
&lt;p&gt;If you will kindly consider the following diagram, I will present a case which &lt;em&gt;is covered&lt;/em&gt; by both git and mercurial:&lt;/p&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/images/diffmerge.png&#34; src=&#34;http://jaredforsyth.com/media/uploads/images/diffmerge.png&#34; /&gt;
&lt;p&gt;Here&#39;s an example of changes to an essay, made on two different clones (or branches, or forks -- w/e). The first decides the &amp;quot;Donec justo...&amp;quot; should be moved up, and the second realizes that &amp;quot;Maecenas&amp;quot; should really be &amp;quot;Spam&amp;quot;.&lt;/p&gt;
&lt;p&gt;Fortunately, automerge takes care of this instance, as it is fairly simple; there is only one commit on each side, and relatively little was done.&lt;/p&gt;
&lt;p&gt;For this next part, you&#39;ll be required to use your imagination (sorry, I didn&#39;t want to diagram it), or you can just hark back to the last time a merge failed on you.&lt;/p&gt;
&lt;p&gt;Say I&#39;ve got a javascript file, and I rearrange the functions to be in a more sensible arrangement (grouping like functions together spatially). And I commit. And then I fix some bugs, committing for each one.&lt;/p&gt;
&lt;p&gt;My friend Jason fixes some &lt;em&gt;completely different&lt;/em&gt; bugs, which wouldn&#39;t normally have interfered with my changes, had I only not moved the functions around.&lt;/p&gt;
&lt;p&gt;And the merge fails, which makes sense from the vcs&#39; point of view, but &lt;em&gt;I&lt;/em&gt; know that it really shouldn&#39;t have failed -- we didn&#39;t modify conflicting &lt;em&gt;logical lines of code&lt;/em&gt;, we just modified conflicting &lt;em&gt;physical lines of text&lt;/em&gt;. See the difference? Git doesn&#39;t. But it should.&lt;/p&gt;
&lt;p&gt;I know that there are times when merges should fail; when people modify the same thing, and a human has to step in and decide which modifications to give preference. But there are also several cases where merges &lt;em&gt;shouldn&#39;t&lt;/em&gt; fail, and yet they do.&lt;/p&gt;
&lt;p&gt;If you want to get really fancy, I can envision our vcs actually &lt;strong&gt;grokking syntax&lt;/strong&gt;, realizing that&lt;/p&gt;
&lt;pre class=&#34;code javascript literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;literal string double&#34;&gt;&amp;quot;Cain&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string double&#34;&gt;&amp;quot;Oh no!&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre class=&#34;code javascript literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;Cain&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;name other&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;Oh no!&amp;quot;&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;are syntactically equivalent, and conduct merges accordingly. (The opportunity for cases such for this is greatly increased with languages such as C, Java, and Javascript that don&#39;t pay attention to whitespace).&lt;/p&gt;
&lt;p&gt;Now, I realize that with greater merge power comes greater flexibility...I mean responsibility. Opportunity for things to get totally messed up. To fix that, you can specify that if a merge fails and &amp;quot;supermerge&amp;quot; thinks its found a solution, that solution pops up for you to vet (in mercurial, a merge never gets auto committed -- you have to do that yourself). In any event, you&#39;ve got a pre-commit test suite, right? =)&lt;/p&gt;
&lt;p&gt;I really love version control, and it makes all of our lives easier. This is just one area where I think there&#39;s some interesting room for improvement.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">setup.py test with distutils (+py.test)</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-21-setuppy-test-distutils-pytest.html"/>
                <updated>2010-07-21T12:14:34Z</updated>
                <published>2010-07-21T12:14:34Z</published>
                <id>/blog/2010-jul-21-setuppy-test-distutils-pytest.html</id>
                                <category   scheme="/blog/tags"
                            term="setuptools"
                            label="Setuptools" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="build"
                            label="Build" />
                                <category   scheme="/blog/tags"
                            term="tip"
                            label="Tip" />
                                <category   scheme="/blog/tags"
                            term="testing"
                            label="Testing" />
                                <category   scheme="/blog/tags"
                            term="unittesting"
                            label="Unittesting" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;One thing that has bothered me about distutils is its lack of a &amp;quot;test&amp;quot; command
-- it seems strange to me that setuptools has it but distutils does not...&lt;/p&gt;
&lt;p&gt;Anyway I &lt;a class=&#34;reference external&#34; href=&#34;http://www.eggheadcafe.com/software/aspnet/36151038/does-distutils-support-python-setuppy-test.aspx&#34;&gt;looked around&lt;/a&gt;
to &lt;a class=&#34;reference external&#34; href=&#34;http://da44en.wordpress.com/2002/11/22/using-distutils/&#34;&gt;make sure&lt;/a&gt; it
&lt;a class=&#34;reference external&#34; href=&#34;http://mail.python.org/pipermail/distutils-sig/2000-September/001528.html&#34;&gt;really wasn&#39;t there&lt;/a&gt;
(I couldn&#39;t believe it at first), but finally, convinced, &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/disttest&#34;&gt;I wrote my own&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What&#39;s cool about this:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;it&#39;s extensible -- designed from the start to allow for many different style tests (using different testing libraries)&lt;/li&gt;
&lt;li&gt;includes 2 test types:&lt;ul&gt;
&lt;li&gt;unittest&lt;/li&gt;
&lt;li&gt;py.test &lt;em&gt;(degrades gracefully to unittest if the py module is not present)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&#39;s the code used to add unittest support:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;validate_unittest&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;tester&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;tester&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;test_suite&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;tester&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;test_modules&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;keyword&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;DistutilsOptionError&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;
                &lt;span class=&#34;literal string&#34;&gt;&amp;quot;You must specify a module or a suite&amp;quot;&lt;/span&gt;
            &lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;name&#34;&gt;tester&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;test_suite&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;test_module&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;.test_suite&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;tester&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;test_module&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;DistutilsOptionError&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;literal string&#34;&gt;&amp;quot;You may specify a module or a suite, but not both&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;name decorator&#34;&gt;&amp;#64;test.add_type&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;unittest&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;test-module=&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;m&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;Run &#39;test_suite&#39; in specified module&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt;
        &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;test-suite=&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;s&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;literal string&#34;&gt;&amp;quot;Test suite to run (e.g. &#39;some_module.test_suite&#39;)&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;validate_unittest&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;run_unittest&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;tester&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;keyword namespace&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;name namespace&#34;&gt;unittest&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;unittest&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;name builtin pseudo&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;unittest&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;__file__&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;tester&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;test_suite&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;name&#34;&gt;testLoader&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;unittest&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;TestLoader&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Anyway, I&#39;m calling it &amp;quot;disttest&amp;quot;...&lt;/p&gt;
&lt;p&gt;I don&#39;t know whether to put it up on pypi or what...it would kindof be a drag to have to install another package in order to run tests...&lt;/p&gt;
&lt;p&gt;Then again, it is only one file, so it&#39;s feasible to just package it in w/ your other code (&lt;strong&gt;grab the file&lt;/strong&gt; &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/disttest/blob/master/disttest.py&#34;&gt;here&lt;/a&gt;). That&#39;s what I&#39;ve &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/codetalker/blob/master/test_cmd.py&#34;&gt;done with codetalker&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;Thoughts? Suggestions? Complaints?&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">CPython vs PyPy vs Cython </title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-21-cpython-vs-pypy-vs-cython.html"/>
                <updated>2010-07-21T10:23:29Z</updated>
                <published>2010-07-21T10:23:29Z</published>
                <id>/blog/2010-jul-21-cpython-vs-pypy-vs-cython.html</id>
                                <category   scheme="/blog/tags"
                            term="benchmark"
                            label="Benchmark" />
                                <category   scheme="/blog/tags"
                            term="cpython"
                            label="Cpython" />
                                <category   scheme="/blog/tags"
                            term="pypy"
                            label="Pypy" />
                                <category   scheme="/blog/tags"
                            term="cython"
                            label="Cython" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/images/cy_py_py.png&#34; src=&#34;http://jaredforsyth.com/media/uploads/images/cy_py_py.png&#34; /&gt;
&lt;p&gt;One problem that I needed to solve while making &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/codetalker/&#34;&gt;CodeTalker&lt;/a&gt; was fast tokenization -- so I
benchmarked several implementations of matching the WHITE and ID tokens.&lt;/p&gt;
&lt;p&gt;Here&#39;s the python implementation, so you understand what&#39;s going on:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;white&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;ln&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;ln&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;name&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt;

&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;ln&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;ln&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;a&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;z&#39;&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;A&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;Z&#39;&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;_&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;name&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;ln&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;and&lt;/span&gt;  &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;a&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;z&#39;&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;A&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;Z&#39;&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;_&#39;&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;0&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;9&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;name&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The pypy is of course no different, and for cython I only changed the first two lines of each. e.g.&lt;/p&gt;
&lt;pre class=&#34;code cython literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;cpdef&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;white&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;ln&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;cdef&lt;/span&gt; &lt;span class=&#34;keyword type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I also checked Regex to see if that would be any faster.&lt;/p&gt;
&lt;p&gt;Anyway, the raw results are below, but here&#39;s a summary:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cython wins&lt;/strong&gt; by about a factor of 10 each time. pypy is about par w/ regex, which is 10x faster than straight python.&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p class=&#34;first admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p class=&#34;last&#34;&gt;I&#39;m using most recent stable release of pypy: 1.3&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
pypy

2.82211303711e-05 at 0
4.7474861145e-05 at 2
3.19180488586e-05 at 500
5.06615638733e-06 at 1007
5.14602661133e-06 at 1014
for IDS
0.00018682718277 at 0
7.82380104065e-05 at 10
2.23803520203e-06 at 1025
2.27212905884e-06 at 1028

cpython

0.000272939920425 at 0
0.000285755872726 at 2
0.000156256914139 at 500
6.81185722351e-06 at 1007
2.60829925537e-07 at 1014
for IDS
0.00100137805939 at 0
0.000964962005615 at 10
8.36133956909e-07 at 1025
3.35931777954e-07 at 1028

cython

9.29117202759e-07 at 0
9.21964645386e-07 at 2
5.56945800781e-07 at 500
1.21116638184e-07 at 1007
1.23023986816e-07 at 1014
for IDS
1.86841487885e-05 at 0
8.15391540527e-06 at 10
1.25169754028e-07 at 1025
1.23023986816e-07 at 1028

cpython + regex

2.03487873077e-05 at 0
3.93490791321e-05 at 2
1.27689838409e-05 at 500
1.77097320557e-06 at 1007
1.10411643982e-06 at 1014
for IDS
1.30689144135e-05 at 0
1.26049518585e-05 at 10
1.98006629944e-06 at 1025
9.75847244263e-07 at 1028

pypy + regex

0.000184435129166 at 0
4.27179336548e-05 at 2
5.02660274506e-05 at 500
3.67810726166e-05 at 1007
1.60229206085e-05 at 1014
for IDS
5.36160469055e-05 at 0
7.2783946991e-05 at 10
1.04148387909e-05 at 1025
1.33678913116e-05 at 1028
&lt;/pre&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">CodeTalker doubles in speed</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-21-codetalker-doubles-in-speed.html"/>
                <updated>2010-07-21T07:33:30Z</updated>
                <published>2010-07-21T07:33:30Z</published>
                <id>/blog/2010-jul-21-codetalker-doubles-in-speed.html</id>
                                <category   scheme="/blog/tags"
                            term="codetalker"
                            label="Codetalker" />
                                <category   scheme="/blog/tags"
                            term="benchmark"
                            label="Benchmark" />
                                <category   scheme="/blog/tags"
                            term="profiling"
                            label="Profiling" />
                                <category   scheme="/blog/tags"
                            term="optimization"
                            label="Optimization" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/projects/logo_codetalker.png&#34; src=&#34;http://jaredforsyth.com/media/projects/logo_codetalker.png&#34; /&gt;
&lt;p&gt;Just when you though codetalker &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/17/python-css-parsing-benchmarks/&#34;&gt;couldn&#39;t get&lt;/a&gt;
&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/17/comparing-parser-generators-python/&#34;&gt;any faster&lt;/a&gt;,
I managed to &lt;em&gt;double its speed&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;in case anyone&#39;s wondering, the binary around the logo corresponds to the ascii string &amp;quot;codetalker&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&#39;ve put together some updated graphs, for JSON and CSS parsing...&lt;/p&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/images/new_json_bench.jpeg&#34; src=&#34;http://jaredforsyth.com/media/uploads/images/new_json_bench.jpeg&#34; /&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/media/uploads/new_json.html&#34;&gt;[live graph]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ad-hoc json parsing:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;stdlib.json&lt;/li&gt;
&lt;li&gt;python-json&lt;/li&gt;
&lt;li&gt;cjson&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Parser-generator parsing:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;codetalker&lt;/li&gt;
&lt;li&gt;ply&lt;/li&gt;
&lt;li&gt;pyparsing&lt;/li&gt;
&lt;li&gt;funcparserlib&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, codetalker is now &lt;strong&gt;beating python&#39;s stdlib.json&lt;/strong&gt;, and is way ahead of the other &#39;parser generator&#39; solutions. And for lines of code (and maintainability, and speed of coding, etc.) codetalker is really the way to go (especially when speed is thrown into the mix).&lt;/p&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/images/new_css_bench.jpeg&#34; src=&#34;http://jaredforsyth.com/media/uploads/images/new_css_bench.jpeg&#34; /&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/media/uploads/bench_css.html&#34;&gt;[live graph].&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not that there was much competition in the first place, but codetalker is now &lt;em&gt;10x faster&lt;/em&gt; than cssutils and &lt;em&gt;7x faster&lt;/em&gt; than css_py.&lt;/p&gt;
&lt;p&gt;I think I&#39;m done optimizing for now =)&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Python css parsing benchmarks</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-17-python-css-parsing-benchmarks.html"/>
                <updated>2010-07-17T20:24:54Z</updated>
                <published>2010-07-17T20:24:54Z</published>
                <id>/blog/2010-jul-17-python-css-parsing-benchmarks.html</id>
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="css"
                            label="Css" />
                                <category   scheme="/blog/tags"
                            term="parser"
                            label="Parser" />
                                <category   scheme="/blog/tags"
                            term="codetalker"
                            label="Codetalker" />
                                <category   scheme="/blog/tags"
                            term="cssutils"
                            label="Cssutils" />
                                <category   scheme="/blog/tags"
                            term="csspy"
                            label="Csspy" />
                                <category   scheme="/blog/tags"
                            term="benchmark"
                            label="Benchmark" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/battle.png&#34; src=&#34;http://jaredforsyth.com/media/uploads/battle.png&#34; /&gt;
&lt;p&gt;And I put together another graph, profiling the different libraries for parsing CSS with python.&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://cthedot.de/cssutils/&#34;&gt;cssutils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://code.google.com/p/css-py/&#34;&gt;css-py&lt;/a&gt; (&lt;a class=&#34;reference external&#34; href=&#34;http://www.dabeaz.com/ply/&#34;&gt;ply&lt;/a&gt; based)&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/python-css/&#34;&gt;python-css&lt;/a&gt; (&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/codetalker/&#34;&gt;codetalker&lt;/a&gt; based)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;aaand here are the results! (parsing a 22kb &lt;a class=&#34;reference external&#34; href=&#34;https://assets0.github.com/stylesheets/bundle_common.css?bae2af7c4660bfb79be0705bf41a23f647a7e6f0&#34;&gt;real-world css file&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/media/uploads/bench_css.html&#34;&gt;[live graph]&lt;/a&gt;&lt;/p&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/images/css_bench.jpeg&#34; src=&#34;http://jaredforsyth.com/media/uploads/images/css_bench.jpeg&#34; /&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Announcing: python-css</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-17-announcing-python-css.html"/>
                <updated>2010-07-17T18:37:15Z</updated>
                <published>2010-07-17T18:37:15Z</published>
                <id>/blog/2010-jul-17-announcing-python-css.html</id>
                                <category   scheme="/blog/tags"
                            term="announcement"
                            label="Announcement" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="css"
                            label="Css" />
                                <category   scheme="/blog/tags"
                            term="codetalker"
                            label="Codetalker" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/projects/logo___.png&#34; src=&#34;http://jaredforsyth.com/media/projects/logo___.png&#34; /&gt;
&lt;p&gt;In the course of &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/clevercss2&#34;&gt;rewriting CleverCSS&lt;/a&gt;, I wanted to write a &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/clevercss2/blob/master/clevercss/backwards.py&#34;&gt;backwards
converter&lt;/a&gt;
from css to ccss. I thought it would make the tool &lt;em&gt;much&lt;/em&gt; easier to adopt.&lt;/p&gt;
&lt;p&gt;You know, you&#39;ve got this big web project, and you realize that what you really
need is a little more power behind your stylesheets, and it would be &lt;em&gt;great&lt;/em&gt; to
have scoping, and variables... but you&#39;ve already got 2,000 lines of css that
you really don&#39;t want to port over... just throw it at css2ccss and you&#39;re
golden!&lt;/p&gt;
&lt;p&gt;Anyway, it currently uses &lt;a class=&#34;reference external&#34; href=&#34;http://cthedot.de/cssutils/&#34;&gt;cssutils&lt;/a&gt;, but I
thought that CSS would be another great grammar to try codetalker against. And
the result is &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/python-css/&#34;&gt;python-css&lt;/a&gt;.
&lt;strong&gt;108 lines, faster than cssutils...&lt;/strong&gt; I&#39;m doing some more detailed benchmarks
which I&#39;ll put up later.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;update:&lt;/strong&gt; here are the &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/17/python-css-parsing-benchmarks/&#34;&gt;benchmarks&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Comparing parser generators in Python</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-17-comparing-parser-generators-python.html"/>
                <updated>2010-07-17T08:42:45Z</updated>
                <published>2010-07-17T08:42:45Z</published>
                <id>/blog/2010-jul-17-comparing-parser-generators-python.html</id>
                                <category   scheme="/blog/tags"
                            term="benchmark"
                            label="Benchmark" />
                                <category   scheme="/blog/tags"
                            term="codetalker"
                            label="Codetalker" />
                                <category   scheme="/blog/tags"
                            term="pyparsing"
                            label="Pyparsing" />
                                <category   scheme="/blog/tags"
                            term="ply"
                            label="Ply" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/battle.png&#34; src=&#34;http://jaredforsyth.com/media/uploads/battle.png&#34; /&gt;
&lt;p&gt;One of the &lt;a class=&#34;reference external&#34; href=&#34;http://www.reddit.com/r/Python/comments/cne57/announcing_codetalker/&#34;&gt;comments on reddit&lt;/a&gt; when I
&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/jul/8/announcing-codetalker/&#34;&gt;announced codetalker&lt;/a&gt; was &amp;quot;what&#39;s
wrong with pyparsing?&amp;quot;&lt;/p&gt;
&lt;p&gt;So I thought I&#39;d run some comparisons, detailing why I felt the need to
reinvent this particular wheel.&lt;/p&gt;
&lt;p&gt;My favorite entry-level parsing project is &lt;a class=&#34;reference external&#34; href=&#34;http://www.json.org/&#34;&gt;JSON&lt;/a&gt;; it&#39;s
about as simple as a grammar gets while still having a great deal of real world
value. So I looked around for some examples of parsing JSON with &lt;a class=&#34;reference external&#34; href=&#34;http://pyparsing.wikispaces.com/&#34;&gt;pyparsing&lt;/a&gt;, and thought I&#39;d throw in &lt;a class=&#34;reference external&#34; href=&#34;http://www.dabeaz.com/ply/&#34;&gt;PLY&lt;/a&gt; for good measure.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;implementations&#34;&gt;
&lt;h1&gt;Implementations&lt;/h1&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;strong&gt;PyParsing:&lt;/strong&gt; &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/media/uploads/ppjson.py&#34;&gt;source&lt;/a&gt;
(I had to modify the code from &lt;a class=&#34;reference external&#34; href=&#34;http://www.ptmcg.com/geo/python/confs/TxUnconf2008Pyparsing.html&#34;&gt;these slides&lt;/a&gt; slightly
to output the correct results)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CodeTalker:&lt;/strong&gt; &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/json.py&#34;&gt;codetalker.contrib.json&lt;/a&gt;
taken from the contrib section of my &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/codetalker/&#34;&gt;codetalker library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PLY:&lt;/strong&gt; &lt;a class=&#34;reference external&#34; href=&#34;http://code.google.com/p/json-ply/&#34;&gt;json-ply&lt;/a&gt; available on google code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[of course, these represent one person&#39;s usage and are not the only possible
implementations, but I think they are a good example of each library]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Anyway, here are the stats: &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/media/uploads/parsing_json.html&#34;&gt;[live online graph]&lt;/a&gt;&lt;/p&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/parsers_json_graph.jpeg&#34; src=&#34;http://jaredforsyth.com/media/uploads/parsers_json_graph.jpeg&#34; /&gt;
&lt;p&gt;If it&#39;s not clear, &lt;em&gt;lower is better&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And in addition to the raw stats, I think codetalker&#39;s way of defining
grammars if more intuitive &amp;amp; has a better correlation to the traditional BNF
style.&lt;/p&gt;
&lt;p&gt;Of course, to each their own -- just because codetalker is more intuitive to
me doesn&#39;t mean it will be for you -- take a look at the code, and take your
pick.&lt;/p&gt;
&lt;p&gt;What experience do you have with parser generators? Is there some killer
library I left out? Feel free to tell me in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Easy python dependency graphs</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-16-easy-python-dependency-graphs.html"/>
                <updated>2010-07-16T13:41:53Z</updated>
                <published>2010-07-16T13:41:53Z</published>
                <id>/blog/2010-jul-16-easy-python-dependency-graphs.html</id>
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="dependency graph"
                            label="Dependency Graph" />
                                <category   scheme="/blog/tags"
                            term="dot"
                            label="Dot" />
                                <category   scheme="/blog/tags"
                            term="tip"
                            label="Tip" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/a/a2/Directed.svg/200px-Directed.svg.png&#34; src=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/a/a2/Directed.svg/200px-Directed.svg.png&#34; /&gt;
&lt;p&gt;I was looking around for ways to get a look at a python dependency graph, and
found &lt;a class=&#34;reference external&#34; href=&#34;http://www.tarind.com/depgraph.html&#34;&gt;this site&lt;/a&gt; which actually does a
pretty good job. The only gripe I have regards the command you must use:&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
python py2depgraph.py path/to/my/script.py | python depgraph2dot.py | dot -T png -o depgraph.png
&lt;/pre&gt;
&lt;p&gt;Couldn&#39;t be easier, right? ...&lt;/p&gt;
&lt;p&gt;Anyway, I added a bit of sugar on top of it.&lt;/p&gt;
&lt;p&gt;First I put the two files they provided in ~/clone/modgraph&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
mkdir ~/clone/modgraph
&lt;span class=&#34;name builtin&#34;&gt;cd&lt;/span&gt; ~/clone/modgraph
wget http://www.tarind.com/py2depgraph.py
wget http://www.tarind.com/depgraph2dot.py
touch ~/bin/modgraph
chmod +x ~/bin/modgraph
&lt;/pre&gt;
&lt;p&gt;and then in ~/bin/modgraph&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;$2&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;keyword&#34;&gt;then
    &lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;usage: modgraph somepythonfile.py out.png&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;name builtin&#34;&gt;exit
&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;fi
&lt;/span&gt;python ~/clone/modgraph/py2depgraph.py &lt;span class=&#34;name variable&#34;&gt;$1&lt;/span&gt; | python ~/clone/modgraph/depgraph2dot.py | dot -T png -o &lt;span class=&#34;name variable&#34;&gt;$2&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And of course to use it:&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
modgraph myfile.py outfile.png
&lt;/pre&gt;
&lt;p&gt;Is there another module that does this better? Should I package this up and
throw it on pypi?&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Installing Vim Debug</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-16-installing-vim-debug.html"/>
                <updated>2010-07-16T13:13:07Z</updated>
                <published>2010-07-16T13:13:07Z</published>
                <id>/blog/2010-jul-16-installing-vim-debug.html</id>
                                <category   scheme="/blog/tags"
                            term="vim-debug"
                            label="Vim-Debug" />
                                <category   scheme="/blog/tags"
                            term="vim"
                            label="Vim" />
                                <category   scheme="/blog/tags"
                            term="debug"
                            label="Debug" />
                                <category   scheme="/blog/tags"
                            term="installation"
                            label="Installation" />
                                <category   scheme="/blog/tags"
                            term="how-to"
                            label="How-To" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;I&#39;ve had a few people ask me for installations for &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/vim-debug/&#34;&gt;vim-debug&lt;/a&gt;, which I guess is natural...I&#39;m
just not used to the whole &amp;quot;package maintainer&amp;quot; persona yet. Anyway, here it
is.&lt;/p&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/images/install.png&#34; src=&#34;http://jaredforsyth.com/media/uploads/images/install.png&#34; /&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
sudo pip install dbgp
sudo pip install vim-debug
install-vim-debug.py
&lt;/pre&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p class=&#34;first admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p class=&#34;last&#34;&gt;To start your debugging session, you need a &lt;em&gt;capital&lt;/em&gt; D. &lt;tt class=&#34;docutils literal&#34;&gt;:Dbg&lt;/tt&gt;. While
you are in the session, you can use a lowercase, ex: &lt;tt class=&#34;docutils literal&#34;&gt;:dbg break&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Those three commands should do it for you.&lt;/p&gt;
&lt;p&gt;I tested it on a completely fresh fedora 13 install, and devved on Ubuntu Karmic&lt;/p&gt;
&lt;p&gt;I have no idea whether this will work on windows -- if you try it, be sure to tell me!&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Vim Debug 1.5: Agyrtidae</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-14-vim-debug-15-agyrtidae.html"/>
                <updated>2010-07-14T08:59:12Z</updated>
                <published>2010-07-14T08:59:12Z</published>
                <id>/blog/2010-jul-14-vim-debug-15-agyrtidae.html</id>
                                <category   scheme="/blog/tags"
                            term="vim-debug"
                            label="Vim-Debug" />
                                <category   scheme="/blog/tags"
                            term="vim"
                            label="Vim" />
                                <category   scheme="/blog/tags"
                            term="debug"
                            label="Debug" />
                                <category   scheme="/blog/tags"
                            term="announcement"
                            label="Announcement" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/images/agyrtidae.png&#34; src=&#34;http://jaredforsyth.com/media/uploads/images/agyrtidae.png&#34; /&gt;
&lt;p&gt;&lt;tt class=&#34;docutils literal&#34;&gt;Agyrtidae&lt;/tt&gt; is the name of a &lt;a class=&#34;reference external&#34; href=&#34;http://www.zin.ru/animalia/Coleoptera/eng/agyrt_fm.htm&#34;&gt;family of Beetles&lt;/a&gt; (found in Russia),
and the codename for the &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/vim-debug/tree/1.5&#34;&gt;1.5 release&lt;/a&gt; of &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/vim-debug&#34;&gt;Vim Debug&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;features-of-this-release&#34;&gt;
&lt;h1&gt;Features of this release&lt;/h1&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;strong&gt;python support!!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;really simple startup&lt;ul&gt;
&lt;li&gt;no more &lt;em&gt;quickly switch over to start your debug server within the 5 seconds&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;auto-start current file&lt;/li&gt;
&lt;li&gt;auto-start a url (for PHP)&lt;/li&gt;
&lt;li&gt;remember the last 5 urls started&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;huge code redesign&lt;/li&gt;
&lt;li&gt;better help for commands&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;live stack view&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;watch expressions&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;screencast&#34;&gt;
&lt;h1&gt;Screencast!&lt;/h1&gt;
&lt;object type=&#34;application/x-shockwave-flash&#34;
        width=&#34;425&#34;
        height=&#34;344&#34;
        class=&#34;youtube-embed&#34;
        data=&#34;http://www.youtube.com/v/kairdgZCD1U&#34;&gt;
    &lt;param name=&#34;movie&#34; value=&#34;http://www.youtube.com/v/kairdgZCD1U&#34;&gt;&lt;/param&gt;
    &lt;param name=&#34;wmode&#34; value=&#34;transparent&#34;&gt;&lt;/param&gt;
&lt;/object&gt;
&lt;/div&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Why it would be hard for me to give up git for mercurial</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-13-why-it-would-be-hard-me-give-git-mercurial.html"/>
                <updated>2010-07-13T21:50:54Z</updated>
                <published>2010-07-13T21:50:54Z</published>
                <id>/blog/2010-jul-13-why-it-would-be-hard-me-give-git-mercurial.html</id>
                                <category   scheme="/blog/tags"
                            term="git"
                            label="Git" />
                                <category   scheme="/blog/tags"
                            term="mercurial"
                            label="Mercurial" />
                                <category   scheme="/blog/tags"
                            term="dvcs"
                            label="Dvcs" />
                                <category   scheme="/blog/tags"
                            term="comparison"
                            label="Comparison" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/images/git-hgm.png&#34; src=&#34;http://jaredforsyth.com/media/uploads/images/git-hgm.png&#34; /&gt;
&lt;p&gt;I discovered &lt;tt class=&#34;docutils literal&#34;&gt;git&lt;/tt&gt; fairly recently, actually (near the end of last year), but
already it has become an integral player in my arsenal of powertools. That
said, I have also become intrigued by &lt;tt class=&#34;docutils literal&#34;&gt;mercurial&lt;/tt&gt; over the past month or so,
but not quite enough to switch.&lt;/p&gt;
&lt;p&gt;I think I&#39;ve narrowed down the benefits I can see:&lt;/p&gt;
&lt;p&gt;Git:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;staging area (&lt;strong&gt;big one&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;greater merge flexibility&lt;/li&gt;
&lt;li&gt;great local branching&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mercurial:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;written in python&lt;/li&gt;
&lt;li&gt;good plugin system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mercurial things that I don&#39;t really care about but that others have said:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;nice Windows client&lt;/li&gt;
&lt;li&gt;eclipse integration&lt;/li&gt;
&lt;li&gt;&amp;quot;simpler&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From that list, it looks like Git&#39;s benefits are all infrastructure related,
where as Mercurial&#39;s advantages are derived from implementation specifics.&lt;/p&gt;
&lt;p&gt;Do you suppose we could have a port of Git to python, w/ a good plugin system?
That would seriously be my &amp;quot;best of both worlds&amp;quot;.&lt;/p&gt;
&lt;p&gt;Are there any killer arguments against a staging area? Or key structural
benefits of mercurial that I overlooked?&lt;/p&gt;
&lt;p&gt;Mercurial has a pretty sweet logo though...&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Integrated python debugging in VIM</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-12-integrated-python-debugging-vim.html"/>
                <updated>2010-07-12T17:19:19Z</updated>
                <published>2010-07-12T17:19:19Z</published>
                <id>/blog/2010-jul-12-integrated-python-debugging-vim.html</id>
                                <category   scheme="/blog/tags"
                            term="vim-debug"
                            label="Vim-Debug" />
                                <category   scheme="/blog/tags"
                            term="vim"
                            label="Vim" />
                                <category   scheme="/blog/tags"
                            term="debug"
                            label="Debug" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/projects/logo__.png&#34; src=&#34;http://jaredforsyth.com/media/projects/logo__.png&#34; /&gt;
&lt;p&gt;A few days ago, I posted that I was taking over &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/vim-debug/&#34;&gt;a project&lt;/a&gt; which provides a debugging
environment in VIM, specifically geared toward PHP. Soon after a guy w/ the
handle Epeli asked (perhaps not very grammatically), &amp;quot;I can we debug Python
like this with Vim?&amp;quot;&lt;/p&gt;
&lt;p&gt;but we&#39;ll forgive the grammar because he&#39;s from Finland, and I can&#39;t pronounce
&lt;a class=&#34;reference external&#34; href=&#34;http://esa-matti.suuronen.org/&#34;&gt;the name of his home town&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;But it was an awesome question! I thought, well why not? The debugger is really
just interfacing with a server which conforms to the &lt;a class=&#34;reference external&#34; href=&#34;http://www.xdebug.org/docs-dbgp.php&#34;&gt;DBGp specification&lt;/a&gt;, and after looking around I was happy
to find that &lt;a class=&#34;reference external&#34; href=&#34;http://downloads.activestate.com/Komodo/releases/6.0.0b1/remotedebugging/&#34;&gt;ActiveState had done most of the legwork for me&lt;/a&gt;.
Unfortunately, there were a few show-stopping bugs in their code, and I
couldn&#39;t find it anywhere on version control (though it is open source), so I
took the liberty of throwing it &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/pydbgp&#34;&gt;up on github&lt;/a&gt; and added my patches -- so now it&#39;s ready
to use!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[btw if it is on a VCS somewhere and I missed it, let me know so I can send my
fixes upstream]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;That&#39;s right; we now have integrated debugging in your favorite power tool
(well, mine anyway): VIM.&lt;/p&gt;
&lt;p&gt;Here&#39;s an &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/media/uploads/images/vim_debug.jpeg&#34;&gt;annotated screenshot&lt;/a&gt; of an active
session, showcasing:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;breakpoints&lt;/li&gt;
&lt;li&gt;watch expressions&lt;/li&gt;
&lt;li&gt;execution stack view&lt;/li&gt;
&lt;li&gt;current scope&lt;/li&gt;
&lt;li&gt;output stream copying&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the &lt;a class=&#34;reference external&#34; href=&#34;http://jabapyth.github.com/pydbgp/&#34;&gt;github project page&lt;/a&gt;, you can
find &lt;strong&gt;install instructions&lt;/strong&gt; for the python server. I&#39;ll soon put together
install instructions for vim-debug.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Python Registrar</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-10-python-registrar.html"/>
                <updated>2010-07-10T15:49:25Z</updated>
                <published>2010-07-10T15:49:25Z</published>
                <id>/blog/2010-jul-10-python-registrar.html</id>
                                <category   scheme="/blog/tags"
                            term="announcing"
                            label="Announcing" />
                                <category   scheme="/blog/tags"
                            term="project"
                            label="Project" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="decorators"
                            label="Decorators" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/projects/logo_.png&#34; src=&#34;http://jaredforsyth.com/media/projects/logo_.png&#34; /&gt;
&lt;p&gt;Here&#39;s a small library I&#39;ve been playing around with: registrar. I often find myself writing meta decorators:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;name&#34;&gt;_reg&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
     &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;meta&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
          &lt;span class=&#34;name&#34;&gt;_reg&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;func&lt;/span&gt;
          &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;func&lt;/span&gt;
     &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;meta&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Or some such thing. And that solution is very often enough. But,
for the times when you need a bit more control, I&#39;ve created &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/registrar/&#34;&gt;Registrar&lt;/a&gt;. The situation that prompted me
to write this was within the confines of a class -- and the functions were
being &amp;quot;registered&amp;quot; before they became bound...&lt;/p&gt;
&lt;p&gt;Here&#39;s the registrar:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword namespace&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;name namespace&#34;&gt;types&lt;/span&gt;
&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;name class&#34;&gt;Registrar&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;swallow&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{}&lt;/span&gt;
        &lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;swallow&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;swallow&lt;/span&gt;

    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;kwds&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;meta&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;kwds&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;swallow&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;func&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;meta&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;__call__&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;register&lt;/span&gt;

    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;kwds&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;reg&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;kwds&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;name&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{}&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;reg&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;iteritems&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;():&lt;/span&gt;
            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;callable&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;name&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;MethodType&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;__class__&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;name&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;res&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And a subclass, if you want a name (or other id) associated w/ your function&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;name class&#34;&gt;NamedRegistrar&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Registrar&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;kwds&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;keyword&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;name exception&#34;&gt;TypeError&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;at least one positional argument required (0 given)&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;reg&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:],&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;kwds&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;func&lt;/span&gt;

    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;name&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{}&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;reg&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;iteritems&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;():&lt;/span&gt;
            &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;callable&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]):&lt;/span&gt;
                &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;MethodType&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;__class__&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;name&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;res&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;But of course all you want is an honest application. So here&#39;s an example using event handling:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;name class&#34;&gt;Spam&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;events&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;_events&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;comment&#34;&gt;# or&lt;/span&gt;
        &lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;shop&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;Shoppe&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;_events&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;addEventHandler&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;])&lt;/span&gt;

    &lt;span class=&#34;comment&#34;&gt;## setup events&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;_events&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;NamedRegistrar&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;name decorator&#34;&gt;&amp;#64;_events&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;cheese&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;bubble&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;onCheese&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;

    &lt;span class=&#34;name decorator&#34;&gt;&amp;#64;_events&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;eggs&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;onEggs&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;no eggs. cheese.&#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Has anyone done this before? Am a solving a problem that doesn&#39;t exist? Tell me
in the comments.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Tabbify your vim</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-09-tabbify-your-vim.html"/>
                <updated>2010-07-09T20:00:00Z</updated>
                <published>2010-07-09T20:00:00Z</published>
                <id>/blog/2010-jul-09-tabbify-your-vim.html</id>
                                <category   scheme="/blog/tags"
                            term="tip"
                            label="Tip" />
                                <category   scheme="/blog/tags"
                            term="vim"
                            label="Vim" />
                                <category   scheme="/blog/tags"
                            term="tabs"
                            label="Tabs" />
                                <category   scheme="/blog/tags"
                            term="editor"
                            label="Editor" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;I&#39;ve just [re]discovered Vim&#39;s tabs. Which are awesome. What isn&#39;t so awesome
is the movement between tabs... &lt;tt class=&#34;docutils literal&#34;&gt;:tabnew&lt;/tt&gt; &lt;tt class=&#34;docutils literal&#34;&gt;:tabn&lt;/tt&gt; &lt;tt class=&#34;docutils literal&#34;&gt;:tabp&lt;/tt&gt;. Of course, the
beauty of vim is customization -- it&#39;s trivial to make your own keybindings.&lt;/p&gt;
&lt;p&gt;I chose:&lt;/p&gt;
&lt;blockquote&gt;
&lt;table class=&#34;docutils field-list&#34; frame=&#34;void&#34; rules=&#34;none&#34;&gt;
&lt;col class=&#34;field-name&#34; /&gt;
&lt;col class=&#34;field-body&#34; /&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;new:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;tn&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;prev:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;&amp;lt;Control&amp;gt; Left&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;next:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;&amp;lt;Control&amp;gt; Right&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unfortunately, the normal &amp;lt;C-%&amp;gt; notation doesn&#39;t work for &amp;quot;left&amp;quot; and &amp;quot;right&amp;quot; (maybe it&#39;s just my keyboard; idk) Anyway, here&#39;s what I had to enter (in my .vimrc):&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
map ^[[1;5D :tabp&amp;lt;cr&amp;gt;
map ^[[1;5C :tabn&amp;lt;cr&amp;gt;
map &amp;lt;Leader&amp;gt;tn :tabnew&amp;lt;cr&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Yeah; &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;^[[1;5D&lt;/span&gt;&lt;/tt&gt; = &amp;lt;C-Left&amp;gt;. Don&#39;t ask me why.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Announcing: vim-phpdebug</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-09-announcing-vim-phpdebug.html"/>
                <updated>2010-07-09T09:49:05Z</updated>
                <published>2010-07-09T09:49:05Z</published>
                <id>/blog/2010-jul-09-announcing-vim-phpdebug.html</id>
                                <category   scheme="/blog/tags"
                            term="announcement"
                            label="Announcement" />
                                <category   scheme="/blog/tags"
                            term="vim"
                            label="Vim" />
                                <category   scheme="/blog/tags"
                            term="php"
                            label="Php" />
                                <category   scheme="/blog/tags"
                            term="debug"
                            label="Debug" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="pdb"
                            label="Pdb" />
                                <category   scheme="/blog/tags"
                            term="project"
                            label="Project" />
                                <category   scheme="/blog/tags"
                            term="vim-debug"
                            label="Vim-Debug" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/projects/logo.png&#34; src=&#34;http://jaredforsyth.com/media/projects/logo.png&#34; /&gt;
&lt;p&gt;I&#39;ve just taken over maintenance of a &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/vim-phpdebug/&#34;&gt;really sweet plugin&lt;/a&gt; for integrated PHP debugging
in VIM (written in python!). It&#39;s &lt;a class=&#34;reference external&#34; href=&#34;http://www.vim.org/scripts/script.php?script_id=1929&#34;&gt;been dead for 3 years&lt;/a&gt;, so I figure the air
is clear...&lt;/p&gt;
&lt;p&gt;anyway, the code is &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/vim-phpdebug&#34;&gt;up on github&lt;/a&gt;,
and I&#39;ve got some features I know I want to add, but even more I&#39;d like to hear
what the community wants. [the plugin is really an interface with &lt;a class=&#34;reference external&#34; href=&#34;http://www.xdebug.org/&#34;&gt;xdebug&lt;/a&gt;, but the most common usage of this that I&#39;ve seen is
PHP.]&lt;/p&gt;
&lt;p&gt;Features:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;integration with xdebug&lt;/li&gt;
&lt;li&gt;step (into/over/out)&lt;/li&gt;
&lt;li&gt;live stack view&lt;/li&gt;
&lt;li&gt;breakpoint set/remove&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Planned:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;live interaction console&lt;/li&gt;
&lt;li&gt;conditional breakpoints&lt;/li&gt;
&lt;li&gt;watch expressions&lt;/li&gt;
&lt;li&gt;live scope view&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here&#39;s a screenshot: &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/media/uploads/Terminal_019.jpeg&#34;&gt;[full size]&lt;/a&gt;&lt;/p&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/Terminal_019.jpeg&#34; src=&#34;http://jaredforsyth.com/media/uploads/Terminal_019.jpeg&#34; style=&#34;width: 450px;&#34; /&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">JSON parsing in python</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-08-json-parsing-python.html"/>
                <updated>2010-07-08T12:00:00Z</updated>
                <published>2010-07-08T12:00:00Z</published>
                <id>/blog/2010-jul-08-json-parsing-python.html</id>
                                <category   scheme="/blog/tags"
                            term="codetalker"
                            label="Codetalker" />
                                <category   scheme="/blog/tags"
                            term="parser"
                            label="Parser" />
                                <category   scheme="/blog/tags"
                            term="json"
                            label="Json" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="benchmark"
                            label="Benchmark" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;I&#39;ve done some benchmarks on JSON parsing, and I thought I&#39;d share the results.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/media/uploads/json_display/view.html&#34;&gt;[click here for a live graph]&lt;/a&gt;&lt;/p&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/Selection_018.jpeg&#34; class=&#34;align-left&#34; src=&#34;http://jaredforsyth.com/media/uploads/Selection_018.jpeg&#34; /&gt;
&lt;p&gt;(note: simplejson, jsonlib and cjson all finished ~.02 seconds, so you can&#39;t really see the bars)&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/media/uploads/json_tests.tgz&#34;&gt;[here&#39;s the code I used, if you want it -- run &amp;quot;runner.py&amp;quot;]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The main reason for testing several different parsing solutions was to compare
them to my own json library, which is &lt;strong&gt;only 66 lines long&lt;/strong&gt;. And it has
comparable performance to other pure-python json libraries. How is this done?
&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/codetalker/&#34;&gt;Codetalker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Codetalker&lt;/strong&gt; is a parsing library that I&#39;ve been developing on and off for
the past few months, which aims to facilitate easy and intuitive declaration of
grammars, in a pythonic fashion that is influenced by the tradition of BNF,
without compromising speed or flexibility.&lt;/p&gt;
&lt;p&gt;I&#39;ll be writing much more about Codetalker in the near future (if I can find
the time), but for now feel free to see for yourself just how easy using
codetalker is, with my 66 line &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/json.py&#34;&gt;example json parser&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Announcing: Codetalker</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jul-08-announcing-codetalker.html"/>
                <updated>2010-07-08T01:38:08Z</updated>
                <published>2010-07-08T01:38:08Z</published>
                <id>/blog/2010-jul-08-announcing-codetalker.html</id>
                                <category   scheme="/blog/tags"
                            term="codetalker"
                            label="Codetalker" />
                                <category   scheme="/blog/tags"
                            term="project"
                            label="Project" />
                                <category   scheme="/blog/tags"
                            term="announcement"
                            label="Announcement" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="parser"
                            label="Parser" />
                                <category   scheme="/blog/tags"
                            term="lexer"
                            label="Lexer" />
                                <category   scheme="/blog/tags"
                            term="compiler"
                            label="Compiler" />
                                <category   scheme="/blog/tags"
                            term="translation"
                            label="Translation" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/projects/navajo.gif&#34; src=&#34;http://jaredforsyth.com/media/projects/navajo.gif&#34; /&gt;
&lt;div class=&#34;section&#34; id=&#34;introduction&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Well, I&#39;ve done it again. I&#39;ve put off blogging about a project for so long
that it is impossible for me to do justice to all the cool things that have
been going on; so I&#39;ll skip most of it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Codetalker&lt;/strong&gt; is a project that has actually been bubbling away on my back
burner for probably over a year now, and which has seen its share of complete
overhauls, but which I think is now ready to come into the light.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/codetalker/&#34;&gt;Codetalker&lt;/a&gt; takes much of its
design inspiration from the excellent documentation python has of its &lt;a class=&#34;reference external&#34; href=&#34;http://docs.python.org/reference/grammar.html&#34;&gt;Official
Grammar&lt;/a&gt; and the &lt;a class=&#34;reference external&#34; href=&#34;http://docs.python.org/library/ast.html#abstract-grammar&#34;&gt;&amp;quot;Abstract
Grammar&amp;quot;&lt;/a&gt; defined
in the AST module. While creating Codetalker, I looked at those two documents
and thought &amp;quot;there&#39;s no reason why defining a parser should be any harder than
this.&amp;quot;&lt;/p&gt;
&lt;p&gt;Of course, I am well aware that This Has Been Done Before. I&#39;ve looked at many
solutions, and been unsatisfied with all (obviously, as I&#39;ve decided to make my
own).&lt;/p&gt;
&lt;p&gt;One problem with many existing solutions is that they are limited in power and
flexibility by a reliance on a &lt;a class=&#34;reference external&#34; href=&#34;http://en.wikipedia.org/wiki/Domain-specific_language&#34;&gt;DSL&lt;/a&gt; (often &lt;a class=&#34;reference external&#34; href=&#34;http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form&#34;&gt;BNF-like&lt;/a&gt;) for grammar
definition. This is where codetalker started as well, but one of the chief
things that bugged me was the fact that whichever system I used, it was both
rigid and arbitrary. I wrote grammar-parsers for several different forms before
deciding that &lt;em&gt;there had to be a better way&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And there was. &amp;quot;Who am I to reinvent the wheel?&amp;quot; I asked (conveniently
forgetting that I have, on many occasions, done just that). So I went back to
python. Flexible? Totally. Powerful? Definitely. Capable? Of course. And doing
everything in python allowed me to avoid the kind of frankinsteined mashups
that are ANTLR grammar definitions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;parsing&#34;&gt;
&lt;h1&gt;Parsing&lt;/h1&gt;
&lt;p&gt;To whet your palate, here&#39;s what a JSON parser looks like:&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;example&#34;&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;comment&#34;&gt;# rules (value is the start rule)&lt;/span&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;dict_&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;list_&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;STRING&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;TFN&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;NUMBER&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;pass_single&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;True&lt;/span&gt;

&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;dict_&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;{&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;commas&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;STRING&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;:&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;))],&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;}&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;astAttrs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;keys&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;STRING&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;values&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;name&#34;&gt;dict_&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;astName&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;Dict&#39;&lt;/span&gt;

&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;list_&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;[&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;commas&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)],&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;astAttrs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;values&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;name&#34;&gt;list_&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;astName&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;List&#39;&lt;/span&gt;

&lt;span class=&#34;name&#34;&gt;grammar&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;Grammar&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
         &lt;span class=&#34;name&#34;&gt;tokens&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;STRING&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;NUMBER&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;NEWLINE&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;WHITE&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;SYMBOL&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;TFN&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt;
         &lt;span class=&#34;name&#34;&gt;ignore&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;WHITE&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;NEWLINE&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt;
         &lt;span class=&#34;name&#34;&gt;ast_tokens&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;STRING&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;TFN&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;NUMBER&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And yes, that is a complete parser in 12 lines of code. [for the full json
parser + translator, &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/json.py&#34;&gt;check this out&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;First off, the one possibly evil thing that codetalker does is modification
through the bitwise OR operator... Yes, traditionally one should not modify an
object using infix operators, but I considered many other options and this
seemed the most intuitive while mainatining brevity. [You can still do
rule.add_option(...) if you like].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;grammar-sugar&#34;&gt;
&lt;h2&gt;Grammar sugar&lt;/h2&gt;
&lt;p&gt;Some of the sugar in there is the fact that a list &lt;tt class=&#34;docutils literal&#34;&gt;[stuff]&lt;/tt&gt; denotes
&lt;em&gt;optional&lt;/em&gt; (for similarity with some BNF styles). For other fancy regular
expression sugar, you have the special functions &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;_or(...)&lt;/span&gt;&lt;/tt&gt;, &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;star(...)&lt;/span&gt;&lt;/tt&gt;,
and &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;plus(...)&lt;/span&gt;&lt;/tt&gt; which apply to &lt;tt class=&#34;docutils literal&#34;&gt;foo | baz&lt;/tt&gt;, &lt;tt class=&#34;docutils literal&#34;&gt;foo*&lt;/tt&gt; and &lt;tt class=&#34;docutils literal&#34;&gt;foo+&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The final piece of the definition that might look a bit strange is the
&lt;tt class=&#34;docutils literal&#34;&gt;commas&lt;/tt&gt; function calls. Is this special? Not really. It&#39;s actually just a
factory function -- very straightforward:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;commas&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;star&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here&#39;s where you can see the real power of skipping the BNF and defining the
grammar straight in python. Another, more complex factory function is
&lt;tt class=&#34;docutils literal&#34;&gt;binop&lt;/tt&gt;, used in the &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/math.py&#34;&gt;math.py example grammar&lt;/a&gt;.
(both &lt;tt class=&#34;docutils literal&#34;&gt;binop&lt;/tt&gt; and &lt;tt class=&#34;docutils literal&#34;&gt;commas&lt;/tt&gt; are defined in &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/codetalker/blob/master/codetalker/pgm/special.py&#34;&gt;codetalker/pgm/special.py&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;entire parser&lt;/strong&gt; for mathematical expressions is 2 lines long, thanks to &lt;tt class=&#34;docutils literal&#34;&gt;binop&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;name&#34;&gt;expression&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;binop&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;-+&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;*/%&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt;
          &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;**&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;NUMBER&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;ops_token&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;BinOp&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;paren&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;name&#34;&gt;grammar&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;pgm&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Grammar&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;expression&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;name&#34;&gt;tokens&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;NUMBER&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;SYMBOL&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;WHITE&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;NEWLINE&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt;
          &lt;span class=&#34;name&#34;&gt;ignore&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;WHITE&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;NEWLINE&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;ast_tokens&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;NUMBER&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class=&#34;docutils literal&#34;&gt;binop&lt;/tt&gt; function actually generates a grammar function as opposed to just
a grammar tuple, which function is essentially:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;meta&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;star&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;_or&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;ops&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Where &lt;tt class=&#34;docutils literal&#34;&gt;value&lt;/tt&gt; is the next rule down the precedence line, and &lt;tt class=&#34;docutils literal&#34;&gt;ops&lt;/tt&gt; is the
list of operators at that precedence level (&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;[&#39;+&#39;,&#39;-&#39;]&lt;/span&gt;&lt;/tt&gt; for the topmost
rule).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;abstract-syntax-tree&#34;&gt;
&lt;h1&gt;Abstract Syntax Tree&lt;/h1&gt;
&lt;p&gt;As any good compiler knows, parsing is nice, but not nice enough -- one must
take the raw parse tree (which retains all the non-essential things like spaces
and comments) and generate an &lt;a class=&#34;reference external&#34; href=&#34;http://en.wikipedia.org/wiki/Abstract_syntax_tree&#34;&gt;Abstract Syntax Tree&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With Codetalker, you get this almost for free (along with...most everything
else). For an example, let&#39;s take the &lt;tt class=&#34;docutils literal&#34;&gt;Dict&lt;/tt&gt; ast node from the above json
parser.&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;dict_&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;{&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;commas&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;STRING&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;:&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;))],&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;}&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;astAttrs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;keys&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;STRING&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;values&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;name&#34;&gt;dict_&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;astName&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;Dict&#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class=&#34;docutils literal&#34;&gt;astAttrs&lt;/tt&gt; attribute defines...the attributes you want collected in the
AST. &lt;tt class=&#34;docutils literal&#34;&gt;func.astName&lt;/tt&gt; defaults to the function name, and is used as the name
for the resulting AST Class name.&lt;/p&gt;
&lt;p&gt;As far as AST attributes go, this is about as simple as it gets: if you put a
function or token as the value, it automatically collects all children matching
that type for you. Otherwise, it looks for a dictionary on the other side, with
the following keys:&lt;/p&gt;
&lt;blockquote&gt;
&lt;table class=&#34;docutils field-list&#34; frame=&#34;void&#34; rules=&#34;none&#34;&gt;
&lt;col class=&#34;field-name&#34; /&gt;
&lt;col class=&#34;field-body&#34; /&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;type:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;rule or token &lt;em&gt;this is the only required parameter&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;single:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;bool; &lt;em&gt;grab only the first child of that type (default:&lt;/em&gt; &lt;tt class=&#34;docutils literal&#34;&gt;False&lt;/tt&gt; &lt;em&gt;)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;start:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;int&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;field&#34;&gt;&lt;th class=&#34;field-name&#34;&gt;end:&lt;/th&gt;&lt;td class=&#34;field-body&#34;&gt;int; &lt;em&gt;start and end are for slicing -- e.g. only grab the first three IDs. start can also be used in conjunction with&lt;/em&gt; &lt;tt class=&#34;docutils literal&#34;&gt;single:True&lt;/tt&gt; &lt;em&gt;to get a child other than the first.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;p&gt;And... that&#39;s all I&#39;ll put down. Be back soon to preview the actual translation
process.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">String concatenation kills babies</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jun-26-string-concatenation-kills-babies.html"/>
                <updated>2010-06-26T18:16:03Z</updated>
                <published>2010-06-26T18:16:03Z</published>
                <id>/blog/2010-jun-26-string-concatenation-kills-babies.html</id>
                                <category   scheme="/blog/tags"
                            term="performance"
                            label="Performance" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;Or at least your performance. I know I&#39;ve heard a couple of times about the
inefficiencies of CPython&#39;s string concatenation, but now I have real-world
experience...&lt;/p&gt;
&lt;p&gt;I just boosted my performance 20x, just by switching to a join() in &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/codetalker&#34;&gt;a project
I&#39;m developing&lt;/a&gt;...&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Exceptions for failure reporting [performance]</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jun-22-exceptions-for-failure-reporting.html"/>
                <updated>2010-06-22T11:13:57Z</updated>
                <published>2010-06-22T11:13:57Z</published>
                <id>/blog/2010-jun-22-exceptions-for-failure-reporting.html</id>
                                <category   scheme="/blog/tags"
                            term="benchmark"
                            label="Benchmark" />
                                <category   scheme="/blog/tags"
                            term="exceptions"
                            label="Exceptions" />
                                <category   scheme="/blog/tags"
                            term="error handling"
                            label="Error Handling" />
                                <category   scheme="/blog/tags"
                            term="performance"
                            label="Performance" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;I was wondering how much (if any) of a hit performance would take were I to
make excessive use of exceptions, not merely for error reporting, but also for
reporting failure (in place of, say, returning None to indicate failure).&lt;/p&gt;
&lt;p&gt;The results were pretty conclusive.&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
excepting x 1000        0.0023729801178
returning x 1000         0.000326871871948
returning is 7.259664x faster

excepting x 10000       0.0235891342163
returning x 10000        0.00333189964294
returning is 7.079785x faster

excepting x 100000      0.232646942139
returning x 100000      0.0326859951019
returning is 7.117634x faster

excepting x 1000000     2.29647302628
returning x 1000000     0.318130016327
returning is 7.218662x faster
&lt;/pre&gt;
&lt;p&gt;And here&#39;s the code:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword namespace&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;name namespace&#34;&gt;time&lt;/span&gt;

&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;timeit&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;xrange&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;t&lt;/span&gt;

&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;showtime&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;xs&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;timeit&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;xs&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;one&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;&lt;/span&gt;&lt;span class=&#34;literal string interpol&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt; x &lt;/span&gt;&lt;span class=&#34;literal string interpol&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;literal string escape&#34;&gt;\t&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;one&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;one&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:]:&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;&lt;/span&gt;&lt;span class=&#34;literal string interpol&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt; is &lt;/span&gt;&lt;span class=&#34;literal string interpol&#34;&gt;%03f&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;x faster&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;one&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;print&lt;/span&gt;

&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;excepting&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;name&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;e2&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;None&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;e2&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;name exception&#34;&gt;Exception&lt;/span&gt;

&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;returning&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;None&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;None&lt;/span&gt;

&lt;span class=&#34;name&#34;&gt;showtime&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;excepting&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;returning&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;name&#34;&gt;showtime&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;excepting&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;returning&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;name&#34;&gt;showtime&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;excepting&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;returning&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;100000&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;name&#34;&gt;showtime&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;excepting&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;returning&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;1000000&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">CleverCSS reloaded</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jun-17-clevercss-reloaded.html"/>
                <updated>2010-06-17T07:32:47Z</updated>
                <published>2010-06-17T07:32:47Z</published>
                <id>/blog/2010-jun-17-clevercss-reloaded.html</id>
                                <category   scheme="/blog/tags"
                            term="announcement"
                            label="Announcement" />
                                <category   scheme="/blog/tags"
                            term="clevercss"
                            label="Clevercss" />
                                <category   scheme="/blog/tags"
                            term="project"
                            label="Project" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="codetalker"
                            label="Codetalker" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;/media/uploads/ccss.png&#34; src=&#34;/media/uploads/ccss.png&#34; /&gt;
&lt;p&gt;I&#39;ve been meaning to jump into the wonderful world of CSS meta-languages, but
I was turned off by their propensity to be &lt;a class=&#34;reference external&#34; href=&#34;http://sass-lang.com/&#34;&gt;in&lt;/a&gt; &lt;a class=&#34;reference external&#34; href=&#34;http://lesscss.org/&#34;&gt;ruby&lt;/a&gt; (into which I don&#39;t particularly want to jump); then I
found &lt;a class=&#34;reference external&#34; href=&#34;http://sandbox.pocoo.org/clevercss/&#34;&gt;CleverCSS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Diving into the code I was a little put off by the &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/dziegler/clevercss/blob/master/clevercss.py&#34;&gt;1600+ line(!) monolithic
approach&lt;/a&gt; —
fortunately, it&#39;s hosted on github and open source :) so I &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/clevercss&#34;&gt;forked it&lt;/a&gt;, split it into (primarily) seven
different files, and generally reorganized it.&lt;/p&gt;
&lt;p&gt;Other than that, I didn&#39;t really do much, but now that it&#39;s in a more
digestible format, I expect to do some more hacking away in the future.&lt;/p&gt;
&lt;p&gt;here&#39;s &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/clevercss&#34;&gt;my fork&lt;/a&gt; of the repo.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">What does setuptools &#34;test&#34; do?</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jun-16-what-does-setuptools-test-do.html"/>
                <updated>2010-06-16T18:28:44Z</updated>
                <published>2010-06-16T18:28:44Z</published>
                <id>/blog/2010-jun-16-what-does-setuptools-test-do.html</id>
                                <category   scheme="/blog/tags"
                            term="setuptools"
                            label="Setuptools" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="question"
                            label="Question" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;I remember reading a post on planet python about package testing, and that
many people use &amp;quot;setup.py test&amp;quot;. The thing is, I can&#39;t seem to find anywhere
that documents just what &amp;quot;setup.py test&amp;quot; does -- it&#39;s some setuptools magic.&lt;/p&gt;
&lt;p&gt;Can anyone point me in the right direction?&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Announcing: Django-RESTive</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-jun-02-announcing-django-restive.html"/>
                <updated>2010-06-02T09:29:59Z</updated>
                <published>2010-06-02T09:29:59Z</published>
                <id>/blog/2010-jun-02-announcing-django-restive.html</id>
                                <category   scheme="/blog/tags"
                            term="announcement"
                            label="Announcement" />
                                <category   scheme="/blog/tags"
                            term="django"
                            label="Django" />
                                <category   scheme="/blog/tags"
                            term="rest"
                            label="Rest" />
                                <category   scheme="/blog/tags"
                            term="django-restive"
                            label="Django-Restive" />
                                <category   scheme="/blog/tags"
                            term="project"
                            label="Project" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/projects/djanfo-restive.png&#34; src=&#34;http://jaredforsyth.com/media/projects/djanfo-restive.png&#34; /&gt;
&lt;p&gt;&lt;strong&gt;res·tive&lt;/strong&gt;: &lt;em&gt;marked by impatience or uneasiness&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/django-restive/&#34;&gt;django-restive&lt;/a&gt; is a
short and sweet library for setting up RESTful services in django - both the
django backend and, if you want the javascript frontend.&lt;/p&gt;
&lt;p&gt;It was created for the AJAX webapp I&#39;m currently devving -- or rather, spun
off of it. As with many apps, restive was originally built into another
project (&lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/GameCC&#34;&gt;GameCC&lt;/a&gt;) until I realized it
deserved an app of its own.&lt;/p&gt;
&lt;p&gt;A few items of interest:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;all communication is in JSON&lt;ul&gt;
&lt;li&gt;on the client side, POST to the url with the &lt;tt class=&#34;docutils literal&#34;&gt;data&lt;/tt&gt; keyword holding a JSON
serialized dictionary of &lt;tt class=&#34;docutils literal&#34;&gt;key, value&lt;/tt&gt; pairs which will be passed to the
function as keyword arguments.&lt;/li&gt;
&lt;li&gt;on the server side, return a dictionary which will be JSON serialized and
output as text.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;passing Django models is also supported. From the server side, if the
returned dictionary has_key &lt;tt class=&#34;docutils literal&#34;&gt;_models&lt;/tt&gt;, they will be serialized using
Django&#39;s built-in JSON serializer.&lt;/li&gt;
&lt;li&gt;I plan to support CSRF token checking.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The aim of &lt;em&gt;restive&lt;/em&gt; is to get in the way as little as possible =).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here&#39;s a short sample:&lt;/strong&gt; &lt;tt class=&#34;docutils literal&#34;&gt;my_app/rest.py&lt;/tt&gt;&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword namespace&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;name namespace&#34;&gt;restive&lt;/span&gt; &lt;span class=&#34;keyword namespace&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;Service&lt;/span&gt;

&lt;span class=&#34;name&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;name decorator&#34;&gt;&amp;#64;service.add&lt;/span&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;Jimmy&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;Hello &lt;/span&gt;&lt;span class=&#34;literal string interpol&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;!&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;name&#34;&gt;urlpatterns&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;urls&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;and in &lt;tt class=&#34;docutils literal&#34;&gt;my_project/urls.py&lt;/tt&gt; just do&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;name&#34;&gt;urlpatterns&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;patterns&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;^myapp/&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;my_app.rest&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It&#39;s as simple as that! Now &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;http://example.com/myapp/hello/&lt;/span&gt;&lt;/tt&gt; is live and
kicking.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;django-restive II: return of the client-side&lt;/em&gt; coming soon.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                            <entry>
                <title type="html">Easy zsh auto completion</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-may-30-easy-zsh-auto-completion.html"/>
                <updated>2010-05-30T00:39:05Z</updated>
                <published>2010-05-30T00:39:05Z</published>
                <id>/blog/2010-may-30-easy-zsh-auto-completion.html</id>
                                <category   scheme="/blog/tags"
                            term="zsh"
                            label="Zsh" />
                                <category   scheme="/blog/tags"
                            term="terminal"
                            label="Terminal" />
                                <category   scheme="/blog/tags"
                            term="tip"
                            label="Tip" />
                                <category   scheme="/blog/tags"
                            term="completion"
                            label="Completion" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/uploads/zsh-completion.png&#34; src=&#34;http://jaredforsyth.com/media/uploads/zsh-completion.png&#34; /&gt;
&lt;p&gt;It took a surprising amount of looking to figure out how to create a custom zsh completion rule...so I&#39;ll share my findings.&lt;/p&gt;
&lt;p&gt;For a static list:&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
compctl -k &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;(one two other possibility)&amp;quot;&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;command&lt;/span&gt;-name
&lt;/pre&gt;
&lt;p&gt;those are space separated, surrounded first by parenthesis and then by quotes.&lt;/p&gt;
&lt;p&gt;For some dynamic completion, you specify a function:&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
_my_cpl&lt;span class=&#34;operator&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;name variable&#34;&gt;reply&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=(&lt;/span&gt;one two other possibility&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;operator&#34;&gt;}&lt;/span&gt;
compctl -K _my_cpl &lt;span class=&#34;name builtin&#34;&gt;command&lt;/span&gt;-name
&lt;/pre&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p class=&#34;first admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p class=&#34;last&#34;&gt;the option is &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;-K&lt;/span&gt;&lt;/tt&gt; (capital)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Ok, so my example doesn&#39;t do anything cool and dynamic =) but that was bare-bones.&lt;/p&gt;
&lt;p&gt;Here&#39;s an example of what I&#39;m doing for my &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/pbj/&#34;&gt;PBJ&lt;/a&gt; completion:&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
_make_pbj&lt;span class=&#34;operator&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;name builtin&#34;&gt;local &lt;/span&gt;a
    &lt;span class=&#34;name builtin&#34;&gt;read&lt;/span&gt; -l a
    &lt;span class=&#34;name variable&#34;&gt;reply&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=(&lt;/span&gt;&lt;span class=&#34;literal string backtick&#34;&gt;`&lt;/span&gt;./make.pbj --list &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;$a&amp;quot;&lt;/span&gt;&lt;span class=&#34;literal string backtick&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;operator&#34;&gt;}&lt;/span&gt;
compctl -K _make_pbj ./make.pbj
&lt;/pre&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p class=&#34;first admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;The command name this time is &lt;tt class=&#34;docutils literal&#34;&gt;./make.pbj&lt;/tt&gt; -- that&#39;s totally legal.&lt;/p&gt;
&lt;p class=&#34;last&#34;&gt;&lt;tt class=&#34;docutils literal&#34;&gt;read &lt;span class=&#34;pre&#34;&gt;-l&lt;/span&gt;&lt;/tt&gt; returns the text currently being typed in (e.g. &lt;tt class=&#34;docutils literal&#34;&gt;./make.pbj some_arg&lt;/tt&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Anyway, the zshell function is pretty simple here, too, but it runs a command to get completion options. The &amp;quot;./make.pbj&amp;quot; file outputs a space-separated list of build targets (&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/pbj/&#34;&gt;PBJ is a build framework&lt;/a&gt;) which are then interpreted by zsh for you!&lt;/p&gt;
&lt;p&gt;Some helpful references:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://zshwiki.org/home/examples/compctl&#34;&gt;http://zshwiki.org/home/examples/compctl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://linux.die.net/man/1/zshcompctl&#34;&gt;http://linux.die.net/man/1/zshcompctl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://www.ibm.com/developerworks/aix/library/au-satzsh.html#N102BD&#34;&gt;http://www.ibm.com/developerworks/aix/library/au-satzsh.html#N102BD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
                </content>
            </entry>
                                            <entry>
                <title type="html">Just wasted an hour; thanks, Rhino</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-may-26-just-wasted-hour-thanks-rhino.html"/>
                <updated>2010-05-26T10:19:35Z</updated>
                <published>2010-05-26T10:19:35Z</published>
                <id>/blog/2010-may-26-just-wasted-hour-thanks-rhino.html</id>
                                <category   scheme="/blog/tags"
                            term="rhino"
                            label="Rhino" />
                                <category   scheme="/blog/tags"
                            term="javascript"
                            label="Javascript" />
                                <category   scheme="/blog/tags"
                            term="troubleshooting"
                            label="Troubleshooting" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;Was running the tests for PJs, when I suddenly got hit w/ a total meltdown on
the Rhino end -- Java exceptions and all.&lt;/p&gt;
&lt;pre class=&#34;code java literal-block&#34;&gt;
&lt;span class=&#34;name&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;thread&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;main&amp;quot;&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;RuntimeException&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;name label&#34;&gt;Token:&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;159&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;Decompiler&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;decompile&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Decompiler&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;821&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;NativeFunction&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;decompile&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;NativeFunction&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;74&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;BaseFunction&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;execIdCall&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;BaseFunction&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;262&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;IdFunctionObject&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;IdFunctionObject&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;129&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;Interpreter&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;interpretLoop&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Interpreter&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;3330&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;Interpreter&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;interpret&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Interpreter&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;2487&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;InterpretedFunction&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;InterpretedFunction&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;164&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;ContextFactory&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;doTopCall&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;ContextFactory&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;398&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;ScriptRuntime&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;doTopCall&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;ScriptRuntime&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;3065&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;InterpretedFunction&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;InterpretedFunction&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;175&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;tools&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;evaluateScript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;564&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;tools&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;processSource&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;424&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;tools&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;processFiles&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;196&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;tools&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;$IProxy&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;117&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;515&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;ContextFactory&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;ContextFactory&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;507&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;tools&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;179&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;mozilla&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;tools&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name attribute&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;157&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;When I finally discovered the problem, it was a &amp;quot;debugger&amp;quot; statement in one of the functions. Here&#39;s a trivial example that also kills rhino:&lt;/p&gt;
&lt;pre class=&#34;code javascript literal-block&#34;&gt;
&lt;span class=&#34;keyword declaration&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;keyword reserved&#34;&gt;debugger&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;keyword declaration&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;What?? That crashes rhino? Gosh, I kinda hoped it would be a bit more robust...&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Python Deepsort</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-may-25-python-deepsort.html"/>
                <updated>2010-05-25T07:38:08Z</updated>
                <published>2010-05-25T07:38:08Z</published>
                <id>/blog/2010-may-25-python-deepsort.html</id>
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="deepsort"
                            label="Deepsort" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;There are times when you want a sequence of items sorted, but regular
&lt;tt class=&#34;docutils literal&#34;&gt;sort()&lt;/tt&gt; doesn&#39;t cut it; in normal sorting algorithms, it is assumed that if
&lt;tt class=&#34;docutils literal&#34;&gt;cmp(a, b) == 0&lt;/tt&gt; and &lt;tt class=&#34;docutils literal&#34;&gt;cmp(b, c) == 0&lt;/tt&gt;, then &lt;tt class=&#34;docutils literal&#34;&gt;cmp(a, c) == 0&lt;/tt&gt;. I ran into
a problem here when trying to sort classes by inheritance; sort order is not
necessarily commutative.&lt;/p&gt;
&lt;p&gt;I needed to sort a list of classes (the Standard Exceptions) such that they
were declared in the right order; a class must be declared after all of its
base classes.&lt;/p&gt;
&lt;p&gt;Consider the following:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;name class&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;
&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;name class&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;
&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;name class&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;
&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;name class&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Clearly, A should come before B, but the relative orders of A, C, and D
doesn&#39;t really matter. The reason &lt;tt class=&#34;docutils literal&#34;&gt;sort()&lt;/tt&gt; won&#39;t work here is &lt;tt class=&#34;docutils literal&#34;&gt;cmp(A, C) ==
0&lt;/tt&gt; and &lt;tt class=&#34;docutils literal&#34;&gt;cmp(C, B) == 0&lt;/tt&gt; but &lt;tt class=&#34;docutils literal&#34;&gt;cmp(A, B) != 0&lt;/tt&gt;. (I tried doing a sort and
was at first confused by the apparently random results I was getting.)&lt;/p&gt;
&lt;p&gt;Here&#39;s the code I came up with:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;deepsort&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;xrange&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)):&lt;/span&gt;
            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)):&lt;/span&gt;
                &lt;span class=&#34;name&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;])&lt;/span&gt;
                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
                    &lt;span class=&#34;name&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;
                    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;
            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;
            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;name exception&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;couldn&lt;/span&gt;&lt;span class=&#34;literal string escape&#34;&gt;\&#39;&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;t resolve after &lt;/span&gt;&lt;span class=&#34;literal string interpol&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt; iterations. possible circular comparisons.&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now, I can&#39;t claim that it&#39;s all that fast or efficient, but as this was a
one-off operation, I didn&#39;t much care.&lt;/p&gt;
&lt;p&gt;Essentially, it&#39;s a least-fixed-point algorithm, going down the list,
comparing two items, and switching them if one should come before the other. I
put in a max iterations vbl because it&#39;s possible for such a sorting to be
cyclic, and therefor never resolvable (not with python classes+bases, but with
other &lt;tt class=&#34;docutils literal&#34;&gt;cmp&lt;/tt&gt; methods).&lt;/p&gt;
&lt;p&gt;For those who are interested, this is the &lt;tt class=&#34;docutils literal&#34;&gt;cmp&lt;/tt&gt; function I used.&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;classcmp&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;issubclass&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;issubclass&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;issubclass&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;issubclass&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;0&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Have you run into this before? Is there a std lib function I was stupidly
ignoring? &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/may/25/python-deepsort/#comments&#34;&gt;Tell me in the comments&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Python operator magic</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-may-21-python-operator-magic.html"/>
                <updated>2010-05-21T07:20:45Z</updated>
                <published>2010-05-21T07:20:45Z</published>
                <id>/blog/2010-may-21-python-operator-magic.html</id>
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="tip"
                            label="Tip" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;Take a look at the following boolean expression:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;literal number integer&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;0&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;never gonna happen, right? math is pretty unequivocal on these things.&lt;/p&gt;
&lt;p&gt;but you forget; with &lt;a class=&#34;reference external&#34; href=&#34;http://python.org&#34;&gt;python&lt;/a&gt;, anything is possible ;)&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;name class&#34;&gt;Faker&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;__lt__&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;True&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;__gt__&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;True&lt;/span&gt;

&lt;span class=&#34;name&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;Faker&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;Universal laws successfully violated!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Cheers.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Javascript type madness</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-may-20-javascript-type-maddness.html"/>
                <updated>2010-05-20T22:20:09Z</updated>
                <published>2010-05-20T22:20:09Z</published>
                <id>/blog/2010-may-20-javascript-type-maddness.html</id>
                                <category   scheme="/blog/tags"
                            term="javascript"
                            label="Javascript" />
                                <category   scheme="/blog/tags"
                            term="editorial"
                            label="Editorial" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;It truly amazes me the extent to which the javascript interpreter &lt;em&gt;inhibits&lt;/em&gt;
productivity. It seems extraordinary that the language could have gotten this
far while still &lt;em&gt;by design&lt;/em&gt; causing no end of headaches for developers.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;example-1&#34;&gt;
&lt;h1&gt;Example 1&lt;/h1&gt;
&lt;p&gt;When my code has a bug, &lt;em&gt;please&lt;/em&gt; tell me. Preferably with an error. Even
better, with an informative error and a full stack trace! (ok, maybe that&#39;s a
little greedy). But &lt;em&gt;anything&lt;/em&gt; would be better than passing around
for-goodness&#39;-sake &lt;strong&gt;undefined&lt;/strong&gt; variables. I mean seriously? So unhelpful.
Especially when variable types are just converted on the fly with abandon --
you might &lt;em&gt;not even notice&lt;/em&gt; that there are a number of undefined variables
flying around unless you specifically check for them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;example-2&#34;&gt;
&lt;h1&gt;Example 2&lt;/h1&gt;
&lt;p&gt;Here&#39;s some code copied right from the interpreter:&lt;/p&gt;
&lt;pre class=&#34;code js literal-block&#34;&gt;
&lt;span class=&#34;operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;keyword declaration&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;keyword declaration&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;keyword declaration&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;literal number integer&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;literal number integer&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;literal number integer&#34;&gt;5&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Woah.&lt;/strong&gt; Now maybe some of you look at that and think, &lt;em&gt;well, duh&lt;/em&gt;, but this
really threw me for a loop the first time I saw it. Coming from a largely
python background, I thought, hmm, objects seem pretty much like dictionaries
[hashtables]; I can deal with that. But the above code seems to contradict
that. &lt;em&gt;What is going on?&lt;/em&gt; Well, here&#39;s something to demonstrate:&lt;/p&gt;
&lt;pre class=&#34;code js literal-block&#34;&gt;
&lt;span class=&#34;operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;keyword declaration&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;keyword declaration&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal string single&#34;&gt;&#39;[object Object]&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;literal number integer&#34;&gt;12&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Javascript you sly dog! This is just one of uncountable occasions where
javascript pulls the rug from under you by silently coercing variables to
whatever it wants. Bah.&lt;/p&gt;
&lt;p&gt;The main reason I ran into this problem is my &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/pjs/&#34;&gt;PJs library/tool&lt;/a&gt;, which converts python code
into readable, maintainable, and best of all &lt;em&gt;sane&lt;/em&gt; javascript. This includes
but is not limited to:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[edit] thanks to Adriano for pointing this out. JS does have OO, but...class-based inheritance makes much more sense to me.&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;em&gt;class-based&lt;/em&gt; OO&lt;/li&gt;
&lt;li&gt;module goodness&lt;/li&gt;
&lt;li&gt;function magic *args, **kwargs, default values and more&lt;/li&gt;
&lt;li&gt;&lt;em&gt;strict function argument checking&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;python-style exceptions + &lt;strong&gt;stack traces&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;python basic types (list, tuple, str, dict)&lt;/li&gt;
&lt;li&gt;iterators&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;m still working on &#39;yield&#39; though. Generators are &lt;em&gt;hard&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Manually enable clean urls in drupal</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-may-14-manually-enable-clean-urls-drupal.html"/>
                <updated>2010-05-14T13:37:17Z</updated>
                <published>2010-05-14T13:37:17Z</published>
                <id>/blog/2010-may-14-manually-enable-clean-urls-drupal.html</id>
                                <category   scheme="/blog/tags"
                            term="drupan"
                            label="Drupan" />
                                <category   scheme="/blog/tags"
                            term="clean urls"
                            label="Clean Urls" />
                                <category   scheme="/blog/tags"
                            term="tip"
                            label="Tip" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;For various reasons I wasn&#39;t able to use the regular interface for checking for
clean urls, and at the time I installed drupal I hadn&#39;t configured apache
correctly, so drupal thought (rightly) that clean urls were not supported.&lt;/p&gt;
&lt;p&gt;I just fixed my apache config, and wanted to tell drupal that clean urls were now usable. Here&#39;s the SQL command to run:&lt;/p&gt;
&lt;pre class=&#34;code sql literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;variable&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string single&#34;&gt;&#39;s:1:&amp;quot;1&amp;quot;;&#39;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string single&#34;&gt;&#39;clean_url&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;that&#39;s assuming you ran &lt;tt class=&#34;docutils literal&#34;&gt;mysql mydbname &lt;span class=&#34;pre&#34;&gt;-u[username]&lt;/span&gt; &lt;span class=&#34;pre&#34;&gt;-p&lt;/span&gt;&lt;/tt&gt; and are in the mysql shell.&lt;/p&gt;
&lt;p&gt;cheers&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Birthday release: PJs 0.19</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-may-06-birthday-release-pjs-019.html"/>
                <updated>2010-05-06T11:30:31Z</updated>
                <published>2010-05-06T11:30:31Z</published>
                <id>/blog/2010-may-06-birthday-release-pjs-019.html</id>
                                <category   scheme="/blog/tags"
                            term="release"
                            label="Release" />
                                <category   scheme="/blog/tags"
                            term="pjs"
                            label="Pjs" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="javascript"
                            label="Javascript" />
                                <category   scheme="/blog/tags"
                            term="project"
                            label="Project" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://jaredforsyth.com/media/projects/pjs_logo125x125.png&#34; class=&#34;first align-left&#34; src=&#34;http://jaredforsyth.com/media/projects/pjs_logo125x125.png&#34; /&gt;
&lt;p&gt;So today&#39;s my birthday, and I thought I&#39;d celebrate by releasing the first
version of &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/pjs/&#34;&gt;PJs&lt;/a&gt;...actually, it&#39;s pretty much a coincidence, but i just got PJs
into a state that I&#39;m comfortable letting other people hack away at it, and
it&#39;s my birthday. Why 0.19? Because today, in 1991, I was born. So I am now
19. I think the number-play is interesting.&lt;/p&gt;
&lt;p&gt;Anyway, if you missed &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/blog/2010/may/4/announcing-pjs/&#34;&gt;my announcement&lt;/a&gt;, PJs is a library
similar in nature to Pyjamas, that is it provides Python to Javascript
translation, with added libraries for easing the development of UIs on the
web. Here are some of the current features:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;true pythonic &lt;strong&gt;object-oriented programming&lt;/strong&gt;, visible on the javascript side as
well&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;function argument checking&lt;/strong&gt;: this is important. One of the reasons I
got frustrated with pyjamas while trying to use it was the lack of robust
error management. PJs provides optional method argument enforcing, and also
provides a method of specifying default argument values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*args and **kwargs&lt;/strong&gt;: this is a really useful one. Javascript doesn&#39;t
normally support argument-magic such as this, but PJs does.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modules&lt;/strong&gt;: yes, importing works; as nearly to python as is possible; this
includes things like reload(), sub-modules, and other such wonderful
goodness. __name__, __file__, and __doc__ variables work too =)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the things that I am really proud of with PJs is the care taken to make
the produced javascript &lt;em&gt;actually readable and usable&lt;/em&gt;. The modules that deal
with pythonic functions and classes &lt;em&gt;can realistically be used in javascript
hacking&lt;/em&gt;, as they use a reasonable syntax and strive to make sense to humans
=).&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/PJs/blob/v0.19/pjs/js/classy.js&#34;&gt;pjs/js/classy.js&lt;/a&gt;: provides the
Class function, which handles the creation of classes&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/PJs/blob/v0.19/pjs/js/functions.js&#34;&gt;pjs/js/functions.js&lt;/a&gt;: provides
the $m function, which can add strict argument checking, default values,
*args and **kargs&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/PJs/blob/v0.19/pjs/js/modules.js&#34;&gt;pjs/js/modules.js&lt;/a&gt; isn&#39;t
terribly useful without &lt;a class=&#34;reference external&#34; href=&#34;http://github.com/jabapyth/PJs/blob/v0.19/pjs/js/__builtin__.js&#34;&gt;__builtin__.js&lt;/a&gt;, which
provides the __import__ function, but the two together can concievably be
used in any javascript project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;m now working on making tests for everything =) There&#39;s a file
test/example.py which contains just about everything that PJs currently
handles. To try the translation yourself, just run:&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
./build.py &lt;span class=&#34;name builtin&#34;&gt;test&lt;/span&gt;/example.py &amp;gt; &lt;span class=&#34;name builtin&#34;&gt;test&lt;/span&gt;/example.js
&lt;/pre&gt;
&lt;p&gt;Then, if you have &lt;a class=&#34;reference external&#34; href=&#34;http://www.mozilla.org/rhino/&#34;&gt;rhino&lt;/a&gt; installed, you can run:&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
rhino &lt;span class=&#34;name builtin&#34;&gt;test&lt;/span&gt;/example.js
&lt;/pre&gt;
&lt;p&gt;to see the output.&lt;/p&gt;
&lt;p&gt;For this release, I have tried to focus on the things which would be most
difficult/interesting, with the exception of two things:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;__add__, __call__ and other python operator magic.&lt;/li&gt;
&lt;li&gt;generators&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With the first, I don&#39;t know if I&#39;ll ever implement it -- there would be too
much of a performance hit to implement this globally (requiring simple things
like &lt;tt class=&#34;docutils literal&#34;&gt;2 + 3&lt;/tt&gt; to turn into &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;Number(2).__add__(Number(3))&lt;/span&gt;&lt;/tt&gt; worst case), and
I&#39;m wary of trying any compile-time type/attr checking...&lt;/p&gt;
&lt;p&gt;I&#39;ve had a few ideas today about how to do generators -- it won&#39;t be pretty,
but they might come...&lt;/p&gt;
&lt;p&gt;Some easy things that remain, and will probably be taken care of in the next
two days:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;while loops&lt;/li&gt;
&lt;li&gt;for loops&lt;/li&gt;
&lt;li&gt;tuples, lists, and dictionaries&lt;/li&gt;
&lt;li&gt;string functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I invite you to clone the repo (&lt;tt class=&#34;docutils literal&#34;&gt;git clone &lt;span class=&#34;pre&#34;&gt;git://github.com/jabapyth/PJs.git&lt;/span&gt;&lt;/tt&gt;)
start playing around with it!&lt;/p&gt;
&lt;p&gt;Not bad for one guy in two days, eh?&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Disqus comments in Django</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-may-04-disqus-comments-django.html"/>
                <updated>2010-05-04T21:41:29Z</updated>
                <published>2010-05-04T21:41:29Z</published>
                <id>/blog/2010-may-04-disqus-comments-django.html</id>
                                <category   scheme="/blog/tags"
                            term="disqus"
                            label="Disqus" />
                                <category   scheme="/blog/tags"
                            term="django"
                            label="Django" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="blog"
                            label="Blog" />
                                <category   scheme="/blog/tags"
                            term="webdev"
                            label="Webdev" />
                                <category   scheme="/blog/tags"
                            term="comments"
                            label="Comments" />
                                <category   scheme="/blog/tags"
                            term="tip"
                            label="Tip" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;http://www.clickonf5.org/wp-content/uploads/2009/08/disqus.jpg&#34; class=&#34;first&#34; src=&#34;http://www.clickonf5.org/wp-content/uploads/2009/08/disqus.jpg&#34; style=&#34;width: 190px;&#34; /&gt;
&lt;p&gt;Recently I finally got around to adding comments to this blog; &lt;a class=&#34;reference external&#34; href=&#34;http://disqus.com&#34;&gt;disqus&lt;/a&gt; made it so easy that I didn&#39;t really have an excuse to
keep putting it off ;)&lt;/p&gt;
&lt;p&gt;When I first made this blog...a few months ago, I was simultaneously
discovering &lt;a class=&#34;reference external&#34; href=&#34;http://djangoproject.com&#34;&gt;django&lt;/a&gt; (they say the way to learn
the ropes in django is to create a blogging engine) and wasn&#39;t quite satisfied
with the readily available comments solutions.&lt;/p&gt;
&lt;p&gt;I heard from several places that django.contrib.comments has a problem with
taking you out of context if the form needs errors corrected, which really
isn&#39;t acceptible. Looking around further, I saw a presentation at djangocon 08
(iirc) about pluggable apps, which looked like a solution, but I really didn&#39;t
want to go to the trouble; it was easier to just postpone the comments
question, at least for a time.&lt;/p&gt;
&lt;p&gt;As I looked around at the blogs of people talking about django, I kept seeing
&amp;quot;powered by disqus&amp;quot; at the bottom, so I went &lt;a class=&#34;reference external&#34; href=&#34;http://disqus.com&#34;&gt;over to investigate&lt;/a&gt;, and was very satisfied by their offering. Of course, it
helps that it&#39;s free, and that &lt;strong&gt;the only installation was adding 10 lines of
HTML to the bottom of my blog_post template&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The real clincher for me though was integration; disqus enables people reading
my blog to use OpenID, facebook, twitter, or general disqus authorization.
People who might not have commented had they been required to sign up for my
site alone would have far fewer qualms.&lt;/p&gt;
&lt;p&gt;Cheers&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Announcing: PJs</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-may-04-announcing-pjs.html"/>
                <updated>2010-05-04T20:38:37Z</updated>
                <published>2010-05-04T20:38:37Z</published>
                <id>/blog/2010-may-04-announcing-pjs.html</id>
                                <category   scheme="/blog/tags"
                            term="announcement"
                            label="Announcement" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="project"
                            label="Project" />
                                <category   scheme="/blog/tags"
                            term="pjs"
                            label="Pjs" />
                                <category   scheme="/blog/tags"
                            term="javascript"
                            label="Javascript" />
                                <category   scheme="/blog/tags"
                            term="translator"
                            label="Translator" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;My new project: &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/pjs/&#34;&gt;PJs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&#39;ve been keeping an eye on the &lt;a class=&#34;reference external&#34; href=&#34;http://pyjs.org&#34;&gt;pyjamas project&lt;/a&gt; for some
time now (it&#39;s been around for a few years at least), but unfortunately It has
never from what I can see lived up to it&#39;s potential.&lt;/p&gt;
&lt;p&gt;In the mean time, I&#39;ve been doing a good deal of javascript programming (it&#39;s
one of my favorite languages), and been looking for ways to  make that more
friendly -- one issue I have with javascript is the way it tries to handle
Object Oriented design; IMO javascript&#39;s solution is a very poor one...&lt;/p&gt;
&lt;p&gt;So I wrote a library, which I called &lt;em&gt;classy.js&lt;/em&gt; to &lt;strong&gt;help javascript be a
little more pythonic&lt;/strong&gt;. This worked well, and allowed me to organize classes
like this:&lt;/p&gt;
&lt;pre class=&#34;code javascript literal-block&#34;&gt;
&lt;span class=&#34;keyword declaration&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;Bar&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;name other&#34;&gt;somevar&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;literal string single&#34;&gt;&#39;val&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;name other&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword declaration&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;name other&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;punctuation&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;name other&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword declaration&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;boo&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;boo&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This of course corresponds to the following python code:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;name class&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;Bar&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;somevar&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&#39;val&#39;&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;name&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;name function&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin pseudo&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;boo&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;boo&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;3&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Not perfect of course, but it follows so much more naturally than the
&lt;tt class=&#34;docutils literal&#34;&gt;prototype&lt;/tt&gt; syntax (note the &lt;tt class=&#34;docutils literal&#34;&gt;self&lt;/tt&gt; argument -- it&#39;s &lt;em&gt;automagically&lt;/em&gt;
populated!)&lt;/p&gt;
&lt;p&gt;But my frustration at pyjamas (it is far too much a port of GWT, but fails at
error handling) has encouraged me to expand upon my pythonic javascript.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thus was PJs born&lt;/strong&gt; =) It&#39;s like Pyjamas, but shorter, quicker, and more
robust. &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/pjs/&#34;&gt;PJs&lt;/a&gt; is built from the ground
up to produce &lt;em&gt;readable&lt;/em&gt; javascript from python code.&lt;/p&gt;
&lt;p&gt;At the moment I&#39;ve completed the javascript libraries required to
have pythonic contructs in javascript, including: classes, functions (with
positional, default, and dictionary arguments, as well as strict argument
validation), and modules.&lt;/p&gt;
&lt;p&gt;What remains is to make the actual code converter; this should not be too
difficult, as my pjs library as brigded most of the few differences between
python and javascript.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Embed youtube videos in RestructuredText</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-apr-30-embed-youtube-videos-restructuredtext.html"/>
                <updated>2010-04-30T06:30:26Z</updated>
                <published>2010-04-30T06:30:26Z</published>
                <id>/blog/2010-apr-30-embed-youtube-videos-restructuredtext.html</id>
                                <category   scheme="/blog/tags"
                            term="youtube"
                            label="Youtube" />
                                <category   scheme="/blog/tags"
                            term="restructuredtext"
                            label="Restructuredtext" />
                                <category   scheme="/blog/tags"
                            term="restructuredtext extensions"
                            label="Restructuredtext Extensions" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;I write this blog almost exclusively in &lt;a class=&#34;reference external&#34; href=&#34;http://docutils.sourceforge.net/docs/user/rst/quickstart.html&#34;&gt;RestructuredText&lt;/a&gt; and I
recently wanted to embed a youtube video on the &lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/projects/baby-tux/&#34;&gt;Baby Tux project page&lt;/a&gt;. Fortunately someone&#39;s already
done the work of making a directive, so you can just save the code &lt;a class=&#34;reference external&#34; href=&#34;http://countergram.com/articles/youtube-in-rst/&#34;&gt;here&lt;/a&gt; to &lt;tt class=&#34;docutils literal&#34;&gt;youtube_rst.py&lt;/tt&gt; and
put&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword namespace&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;name namespace&#34;&gt;youtube_rst&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;in the &lt;tt class=&#34;docutils literal&#34;&gt;__init__.py&lt;/tt&gt; of your django project. Using the directive is dead simple:&lt;/p&gt;
&lt;pre class=&#34;code rst literal-block&#34;&gt;
&lt;span class=&#34;punctuation&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;operator word&#34;&gt;youtube&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;::&lt;/span&gt; 9ZWyv9icIfI
&lt;/pre&gt;
&lt;p&gt;Cheers.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Django to UML</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-apr-29-django-uml.html"/>
                <updated>2010-04-29T16:49:12Z</updated>
                <published>2010-04-29T16:49:12Z</published>
                <id>/blog/2010-apr-29-django-uml.html</id>
                                <category   scheme="/blog/tags"
                            term="tip"
                            label="Tip" />
                                <category   scheme="/blog/tags"
                            term="django"
                            label="Django" />
                                <category   scheme="/blog/tags"
                            term="graphviz"
                            label="Graphviz" />
                                <category   scheme="/blog/tags"
                            term="bash"
                            label="Bash" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;I was looking around for a django models to UML converter and took a bit of
doing, but I found one nestled in the app &lt;a class=&#34;reference external&#34; href=&#34;http://code.google.com/p/django-command-extensions/&#34;&gt;django-extensions&lt;/a&gt;. As it took a while, I
thought I&#39;d spare the next guy a search.&lt;/p&gt;
&lt;p&gt;To use, grab the &lt;a class=&#34;reference external&#34; href=&#34;http://django-command-extensions.googlecode.com/files/django-extensions-0.4.1.tar.gz&#34;&gt;latest version&lt;/a&gt;,
and install pygraphviz. Here are the commands I used:&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
wget http://django-command-extensions.googlecode.com/files/django-extensions-0.4.1.tar.gz
tar zxf django-extensions-0.4.1.tar.gz
&lt;span class=&#34;name builtin&#34;&gt;cd &lt;/span&gt;django-extensions-0.4.1
sudo setup.py install
&lt;/pre&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p class=&#34;first admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p class=&#34;last&#34;&gt;Make sure to add django_extensions to INSTALLED_APPS in your project&#39;s settings module (thanks Stephen!)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
sudo apt-get install python-pygraphviz
&lt;/pre&gt;
&lt;p&gt;Then in your project directory:&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
./manage.py graph_models -a -g -o my_project_visualized.png
&lt;/pre&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">AccessInit: hash collision: 3 for both 1 and 1</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-apr-28-accessinit-hash-collision-3-both-1-and-1.html"/>
                <updated>2010-04-28T11:43:54Z</updated>
                <published>2010-04-28T11:43:54Z</published>
                <id>/blog/2010-apr-28-accessinit-hash-collision-3-both-1-and-1.html</id>
                                <category   scheme="/blog/tags"
                            term="troubleshooting"
                            label="Troubleshooting" />
                                <category   scheme="/blog/tags"
                            term="PIL"
                            label="Pil" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="import"
                            label="Import" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;I recently ran into a problem, which didn&#39;t immediately make itself clear
(this is one of the troubles that django causes me -- too often the error
reporting is just &lt;em&gt;not there&lt;/em&gt;, and forces me to do a good deal of debugging to
even determine where the error is occurring).&lt;/p&gt;
&lt;p&gt;After facing several unpromising &amp;quot;500&amp;quot; errors (well, they were really 404&#39;s
&amp;quot;page 500.shtml not found...&amp;quot;), I broke down, tunneled in and started the
devel server. At this point, the error was made plain; python was all-out
&lt;em&gt;dying&lt;/em&gt;, with the cryptic message &lt;tt class=&#34;docutils literal&#34;&gt;AccessInit: hash collision: 3 for both 1
and 1&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;[for the impatient, you can jump down to &lt;a class=&#34;reference internal&#34; href=&#34;#the-solution&#34;&gt;The Solution&lt;/a&gt; ]&lt;/p&gt;
&lt;p&gt;A good deal of googling later found no satisfactory answers, but &lt;a class=&#34;reference external&#34; href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/image-sig/3841039&#34;&gt;several&lt;/a&gt;
&lt;a class=&#34;reference external&#34; href=&#34;http://groups.google.com/group/satchmo-users/browse_thread/thread/b763986876a131cf/f0d9759524270000?hl=en&amp;amp;lnk=gst&amp;amp;q=Daniel+Hirsch#f0d9759524270000&#34;&gt;unanswered&lt;/a&gt;
&lt;a class=&#34;reference external&#34; href=&#34;http://www.mail-archive.com/image-sig&amp;#64;python.org/msg03083.html&#34;&gt;questions&lt;/a&gt;
(hence this post).&lt;/p&gt;
&lt;p&gt;What I got from these posts was that &lt;strong&gt;somehow, PIL was getting imported
twice&lt;/strong&gt;, or something, and was &lt;strong&gt;choking because of it&lt;/strong&gt;. But the question
remained as to &lt;em&gt;how&lt;/em&gt; this could happen.&lt;/p&gt;
&lt;p&gt;So, I dove into the source code, and several unscrupulous &lt;a class=&#34;reference external&#34; href=&#34;http://en.wikipedia.org/wiki/Debugging#Various_debugging_techniques&#34;&gt;print statements&lt;/a&gt; later,
I traced the problem down to my use of the &amp;quot;Pygments&amp;quot; module, which in turn
uses PIL.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;the-problem&#34;&gt;
&lt;h1&gt;The Problem&lt;/h1&gt;
&lt;p&gt;The offending statement is in pygments/formatters/img.py, line 21&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;comment&#34;&gt;# Import this carefully&lt;/span&gt;
&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;keyword namespace&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;name namespace&#34;&gt;Image&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name namespace&#34;&gt;ImageDraw&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name namespace&#34;&gt;ImageFont&lt;/span&gt;
    &lt;span class=&#34;name&#34;&gt;pil_available&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name builtin pseudo&#34;&gt;True&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The problem is, that in Django, PIL is imported thus&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;keyword namespace&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;name namespace&#34;&gt;PIL&lt;/span&gt; &lt;span class=&#34;keyword namespace&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;Image&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;the-solution&#34;&gt;
&lt;h1&gt;The Solution&lt;/h1&gt;
&lt;p&gt;This is confusing to python, which thinks that these two &amp;quot;Image&amp;quot; modules are different, when they are in fact the same. (I found several people on the internet bemoaning this double-standard of PIL usage). I fixed this by changing the Pygments module to use the &lt;tt class=&#34;docutils literal&#34;&gt;from PIL import&lt;/tt&gt; syntax.&lt;/p&gt;
&lt;p&gt;Unfortunately, this wasn&#39;t the end of my problems; I also use the docutils module, which again tries to &amp;quot;import Image&amp;quot;, causing the hash collision. Luckily, it wasn&#39;t to difficult to track those instances down and kill them...I mean fix them. Anyway, I ended up with the following two patches, which restored my system to working order.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/media/uploads/PIL_fix.pygments.patch&#34;&gt;pygments patch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://jaredforsyth.com/media/uploads/PIL_fix.docutils.patch&#34;&gt;docutils patch&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Vim tip of the day: copy current file name</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-apr-17-vim-tip-day-copy-current-file-name.html"/>
                <updated>2010-04-17T13:05:07Z</updated>
                <published>2010-04-17T13:05:07Z</published>
                <id>/blog/2010-apr-17-vim-tip-day-copy-current-file-name.html</id>
                                <category   scheme="/blog/tags"
                            term="vim"
                            label="Vim" />
                                <category   scheme="/blog/tags"
                            term="tip"
                            label="Tip" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;If you want to copy/paste the current filename, the magic register &amp;quot;%&amp;quot; is just what you need.&lt;/p&gt;
&lt;p&gt;It&#39;s as simple as &amp;quot;%p (which means p[aste] from the register %)&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
&amp;quot;%p
&lt;/pre&gt;
&lt;p&gt;Or if you&#39;re in insert mode, &amp;lt;C-r&amp;gt;% will do the same.&lt;/p&gt;
&lt;p&gt;Note: this will always be the filename of the current window/buffer. To save this in a regular register (for later use), try:&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
O&amp;lt;C-r&amp;gt;%&amp;lt;Esc&amp;gt;&amp;quot;fdd
&lt;/pre&gt;
&lt;p&gt;that transfers it to the f register.&lt;/p&gt;
&lt;p&gt;roughly translated:&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
O      on a new line (go into insert mode)
&amp;lt;C-r&amp;gt;% paste the contents of %
&amp;lt;Esc&amp;gt;  exit insert mode
&amp;quot;fdd   then delete that line and put it into f
&lt;/pre&gt;
&lt;p&gt;Note: this might not exactly work with indenting...&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Vim crash recovery</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-apr-09-vim-crash-recovery.html"/>
                <updated>2010-04-09T12:02:01Z</updated>
                <published>2010-04-09T12:02:01Z</published>
                <id>/blog/2010-apr-09-vim-crash-recovery.html</id>
                                <category   scheme="/blog/tags"
                            term="vim"
                            label="Vim" />
                                <category   scheme="/blog/tags"
                            term="sessions"
                            label="Sessions" />
                                <category   scheme="/blog/tags"
                            term="tip"
                            label="Tip" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;Currently the host I use (bluehost) likes to SIGKILL my processes if they run too long (in an ssh session). This makes perfect sense from their point of view -- it&#39;s a shared hosting situation, so they don&#39;t want processes hogging resources -- but it can get pretty annoying, especially as I usually have several buffers open in split windows.&lt;/p&gt;
&lt;p&gt;Solution! I now have vim automatically save my session on exit. I put the following line in my .vimrc&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
autocmd VimLeavePre * mksession! .vim.sess
&lt;/pre&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://vimdoc.sourceforge.net/htmldoc/autocmd.html&#34;&gt;vim docs for autocmd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VimLeavePre means &amp;quot;exec just before vim exits&amp;quot;&lt;/li&gt;
&lt;li&gt;the &amp;quot;*&amp;quot; says -- do this for every file type. You could just do &amp;quot;*.html&amp;quot; or &amp;quot;*.c&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://vimdoc.sourceforge.net/htmldoc/starting.html#:mksession&#34;&gt;mksession&lt;/a&gt; saves vim&#39;s state&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now whenever you exit, or vim is killed, vim will auto-create a &amp;quot;.vim.sess&amp;quot; file in the current directory. To resume that session, run vim thus:&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
vim -S .vim.sess
&lt;/pre&gt;
&lt;p&gt;note the -S is capital&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                            <entry>
                <title type="html">Giving Django admin a favicon</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-apr-06-giving-django-admin-favicon.html"/>
                <updated>2010-04-06T19:24:25Z</updated>
                <published>2010-04-06T19:24:25Z</published>
                <id>/blog/2010-apr-06-giving-django-admin-favicon.html</id>
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;I&#39;m a power-user in the browser, and I usually have a large amount of tabs
open; often it is the case that I can only see the favicon (I use chromium,
which shrinks the tabs indefinitely). As such, I make use of favicons to
distinguish sites, and this works well for me as most sites have jumped on the
favicon bus.&lt;/p&gt;
&lt;p&gt;In working with django-admin I noticed that it does not define a favicon, and
is therefore indistinguishable from other sites. I can see why this would be a
low priority, and I didn&#39;t want to make up a ticket this close to 1.2, so I
just changed it locally, which turned out to be a bit more difficult than it
might seem.&lt;/p&gt;
&lt;p&gt;Of course django-admin templates can be overridden, and the admin/base.html
provides a nice block (extrahead) for inserting things into the head. The
problem is that &lt;strong&gt;a template can&#39;t extend what the template is overriding&lt;/strong&gt;.
In the future, I can forsee a system in which one can specify the source of
the extension, e.g.&lt;/p&gt;
&lt;pre class=&#34;code html literal-block&#34;&gt;
{% extends &amp;quot;admin/base.html&amp;quot; from &amp;quot;django.contrib.admin&amp;quot; %}
&lt;/pre&gt;
&lt;p&gt;but once again, we have a feature freeze.&lt;/p&gt;
&lt;p&gt;I got around this by symlinking the directory, e.g.&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
ln -s ~/lib/python/django/contrib/admin/templates/admin myproject/templates/admin_tp
&lt;/pre&gt;
&lt;p&gt;and having my &amp;quot;myprojects/templates/admin/base.html&amp;quot; read thus:&lt;/p&gt;
&lt;pre class=&#34;code html literal-block&#34;&gt;
{% extends &amp;quot;admin_tp/base.html&amp;quot; %}

{% block extrahead %}
&lt;span class=&#34;name tag&#34;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;rel=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;icon&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;image/png&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;/media/django-favicon.png&amp;quot;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;/&amp;gt;&lt;/span&gt;
{% endblock %}
&lt;/pre&gt;
&lt;p&gt;And it worked!&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">One-liner to rule them all: django mingus install script</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-feb-27-one-liner-rule-them-all.html"/>
                <updated>2010-02-27T23:16:15Z</updated>
                <published>2010-02-27T23:16:15Z</published>
                <id>/blog/2010-feb-27-one-liner-rule-them-all.html</id>
                                <category   scheme="/blog/tags"
                            term="mingus"
                            label="Mingus" />
                                <category   scheme="/blog/tags"
                            term="django"
                            label="Django" />
                                <category   scheme="/blog/tags"
                            term="install"
                            label="Install" />
                                <category   scheme="/blog/tags"
                            term="script"
                            label="Script" />
                                <category   scheme="/blog/tags"
                            term="dependencies"
                            label="Dependencies" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;Ok, so it&#39;s technically more than one line -- but all the logic/execution is on one line =)&lt;/p&gt;
&lt;p&gt;This is the install script I just whipped up to get django-mingus up and
running. It&#39;s fairly simple, but the script does a good job of telling you
what went wrong (if anything happens to go wrong). What I really hate is
copy/pasting ~15 lines of commands into bash, only to have the 3rd one fail
for some reason, and the remaining 12 still execute, usually to no effect
(lots of errors), but to potentially dangerous effect.&lt;/p&gt;
&lt;p&gt;Thus, all the commands are dependant on one another! If one fails, it doesn&#39;t
blindly execute the rest. I thought of doing an only mess of nested if-else
blocks, but instead I took advantage of some bash-fu to join them all together
with &amp;amp;&amp;amp; (and). Anyway, here&#39;s the script. Enjoy. -- it also manages all
dependencies of mingus.&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
&lt;span class=&#34;comment&#34;&gt;#mingus-install.sh
&lt;/span&gt;&lt;span class=&#34;name variable&#34;&gt;projectname&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;name variable&#34;&gt;$1&lt;/span&gt;
&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;$projectname&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;]&lt;/span&gt;;&lt;span class=&#34;keyword&#34;&gt;then
    &lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;No project name given. usage: mingus-install.sh [project_name]&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;name builtin&#34;&gt;exit
&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt; sudo pip install virtualenv &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;got virtualenv...&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;||&lt;/span&gt;
    &lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;failed to install virtualenv. Is pip installed properly (try &#39;sudo easy_install pip&#39; on ubuntu)&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;[&lt;/span&gt; -n &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;literal string escape&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt; sudo pip install virtualenvwrapper &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;got virtualenvwrapper...&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;||&lt;/span&gt;
    &lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;failed to install virtualenvwrapper. Is pip installed properly (try &#39;sudo easy_install pip&#39; on ubuntu)&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;[&lt;/span&gt; -n &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;literal string escape&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;[&lt;/span&gt; ! -d &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;$WORKON_HOME/$projectname&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;||&lt;/span&gt;
    &lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;env exists ($WORKON_HOME/$projectname). clear?&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;read&lt;/span&gt; -e ans &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;(([&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;$ans&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;$WORKON_HOME/$projectname&amp;quot;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;exiting $ans&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;[&lt;/span&gt; -n &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;]))))&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;literal string escape&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;source&lt;/span&gt; /usr/local/bin/virtualenvwrapper_bashrc &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkvirtualenv &lt;span class=&#34;name variable&#34;&gt;$projectname&lt;/span&gt; --no-site-packages &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;created virtual environment $projectname ...&amp;quot;&lt;/span&gt;  &lt;span class=&#34;operator&#34;&gt;||&lt;/span&gt;
    &lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;[&lt;/span&gt; -n &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;literal string escape&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;source&lt;/span&gt; /usr/local/bin/virtualenvwrapper_bashrc &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; workon &lt;span class=&#34;name variable&#34;&gt;$projectname&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;$WORKON_HOME&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;$projectname&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;woking on $projectname&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;||&lt;/span&gt;
    &lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;Looks like you failed to create the virtual environment, or \$WORKON_HOME isn&#39;t set...&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;[&lt;/span&gt; -n &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;literal string escape&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;$WORKON_HOME&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;$projectname&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./bin/easy_install pip &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git clone git://github.com/montylounge/django-mingus.git  &lt;span class=&#34;operator&#34;&gt;||&lt;/span&gt;
    &lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;failed to install pip or django-mingus&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;[&lt;/span&gt; -n &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;literal string escape&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;$WORKON_HOME&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;$projectname&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;cd &lt;/span&gt;django-mingus/mingus &lt;span class=&#34;operator&#34;&gt;||&lt;/span&gt;
    &lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;directory not created correctly&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;[&lt;/span&gt; -n &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;literal string escape&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;$WORKON_HOME&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;name variable&#34;&gt;$projectname&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./bin/pip install -r django-mingus/mingus/requirements.txt &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;installed all dependencies...&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;||&lt;/span&gt;
    &lt;span class=&#34;operator&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;installing all the sub apps...failed&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;[&lt;/span&gt; -n &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;literal string escape&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;Looks like everything installed correctly! If anything fails (in the way of package imports), try running &#39;pip install the_package --upgrade&#39;. cheers!&amp;quot;&lt;/span&gt;

&lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;To check it out, \&amp;quot;cd $WORKON_HOME/$projectname\&amp;quot;.&amp;quot;&lt;/span&gt;
&lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;If everything went well, try \&amp;quot;cd django-mingus/mingus &amp;amp;&amp;amp; mv local_settings.py.template local_settings.py &amp;amp;&amp;amp; ./manage.py syncdb &amp;amp;&amp;amp; ./manage.py runserver\&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;name builtin&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;That will start the server up for you w/ default settings&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;To run, save this to a .sh file, and run it from the command line.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Django apps&#39; documentation problem</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-feb-26-django-apps-documentation-problem.html"/>
                <updated>2010-02-26T02:07:35Z</updated>
                <published>2010-02-26T02:07:35Z</published>
                <id>/blog/2010-feb-26-django-apps-documentation-problem.html</id>
                                <category   scheme="/blog/tags"
                            term="django"
                            label="Django" />
                                <category   scheme="/blog/tags"
                            term="docs"
                            label="Docs" />
                                <category   scheme="/blog/tags"
                            term="documentation"
                            label="Documentation" />
                                <category   scheme="/blog/tags"
                            term="admindocs"
                            label="Admindocs" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;So I just spent the last little while going back to the &lt;a class=&#34;reference external&#34; href=&#34;http://code.djangoproject.com/changeset/392&#34;&gt;dawn of time&lt;/a&gt; and svn revision 392 of django
core-- the current revision is nearly 13 &lt;strong&gt;thousand&lt;/strong&gt;) to find the answer to a
surprisingly elusive question: why is there a&lt;/p&gt;
&lt;pre class=&#34;literal-block&#34;&gt;
^templates/(?P&amp;lt;template&amp;gt;.*)/$
&lt;/pre&gt;
&lt;p&gt;pattern in admindocs URLconf, and a corresponding template_detail view? (there&#39;s no template_list view mind, and no way of ever getting to
the template_detail view other than typing a url in directly).&lt;/p&gt;
&lt;p&gt;At first I thought that it might be a recent addition to admindocs, and
therefore not fully implemented -- that could explain its effectively disabled
status. But no, it&#39;s a &lt;strong&gt;year dormant&lt;/strong&gt; little bit of code.&lt;/p&gt;
&lt;p&gt;contrib.admindocs seems to me to be not very well cared for -- especially in
light of its vast importance, imo, to django&#39;s user experience. I know that
when I install a module I don&#39;t want to dig through all of its code (although
I have resorted to that several times), I want its functionality and
configurability laid out for me in a nice, friendly manner. In keeping with
this, I believe strongly that contrib.admindocs should have the ability to
show me general docs &lt;em&gt;of my installed modules&lt;/em&gt;, and not just the component
parts. In reality, if I have to look at an app&#39;s Models to understand &lt;em&gt;what it
is the darn thing does&lt;/em&gt;, it&#39;s already to late.&lt;/p&gt;
&lt;p&gt;As I see it, django suffers from a staggering lack of documentation (mostly
with regards to community apps), which I see as a side-effect of a lack of a
&#39;tradition of documentation&#39;. This is really the biggest barrier to me
installing a new app (as we are &lt;em&gt;supposed to&lt;/em&gt;, make and use others&#39; reusable
apps).&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Django application settings</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-feb-25-django-application-settings.html"/>
                <updated>2010-02-25T23:50:55Z</updated>
                <published>2010-02-25T23:50:55Z</published>
                <id>/blog/2010-feb-25-django-application-settings.html</id>
                                <category   scheme="/blog/tags"
                            term="django"
                            label="Django" />
                                <category   scheme="/blog/tags"
                            term="dbsettings"
                            label="Dbsettings" />
                                <category   scheme="/blog/tags"
                            term="settings"
                            label="Settings" />
                                <category   scheme="/blog/tags"
                            term="application"
                            label="Application" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;One thing that (it looks like) is missing in the django tradition is a
generally adopted method for making user-friendly application-specific
settings. And this feature is extremely key if we want to appeal to a broader
audience; your average person &lt;em&gt;does not&lt;/em&gt; want to have to edit a settings.py
file in order to change [most] things. Yes, settings that would require a
server restart should go there, but there are a vast number of settings which
are UI/display related, and should be dynamically modifiable.&lt;/p&gt;
&lt;p&gt;Examples from the public:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://oebfare.com/blog/2008/nov/07/app-settings/&#34;&gt;http://oebfare.com/blog/2008/nov/07/app-settings/&lt;/a&gt;
&lt;a class=&#34;reference external&#34; href=&#34;http://thisweekindjango.com/screencasts/episode/6/application-settings/&#34;&gt;http://thisweekindjango.com/screencasts/episode/6/application-settings/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I sent an email to the group detailing my feelings on the subject.&lt;/p&gt;
&lt;p&gt;dbsettings:
&lt;a class=&#34;reference external&#34; href=&#34;http://stackoverflow.com/questions/1308034/admin-interface-editable-django-app-settings&#34;&gt;http://stackoverflow.com/questions/1308034/admin-interface-editable-django-app-settings&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Django Flatpages crazy 404</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-feb-25-flatpages-crazy-404.html"/>
                <updated>2010-02-25T00:52:53Z</updated>
                <published>2010-02-25T00:52:53Z</published>
                <id>/blog/2010-feb-25-flatpages-crazy-404.html</id>
                                <category   scheme="/blog/tags"
                            term="django"
                            label="Django" />
                                <category   scheme="/blog/tags"
                            term="troubleshooting"
                            label="Troubleshooting" />
                                <category   scheme="/blog/tags"
                            term="flatpages"
                            label="Flatpages" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;Wow, they&#39;re not kidding about &amp;quot;Make sure to have leading and trailing slashes&amp;quot;...Don&#39;t know what I&#39;m talking about?&lt;/p&gt;
&lt;p&gt;That&#39;s the &#39;help text&#39; on the &amp;quot;Create flat page&amp;quot; form -- and boy, do they mean
it. I just spent the last [longer than I care to admit] trying to figure out
&lt;em&gt;why&lt;/em&gt; flatpages was giving me a 404! I had installed and configured everything
correctly, and, &lt;em&gt;darn it&lt;/em&gt;, flatpages is about the simplest app out there.
&lt;em&gt;What is wrong with me?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Well, it turns out I entered &amp;quot;/about&amp;quot; as the url for the page -- extremely
foolish of me, I know. What really floored me, though, was that the form
didn&#39;t complain, and it gave me a link to &amp;quot;view this flatpage on site -&amp;gt;&amp;quot;,
which invariably led to a 404.&lt;/p&gt;
&lt;p&gt;IMO there should definitely be an error thrown if you&#39;re stupid enough not to
include the trailing slash [submitting ticket now].&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;edit:&lt;/strong&gt; sent in a patch, so hopefully this we be dealt with&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Setting up a blog in django</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-feb-25-setting-blog-django.html"/>
                <updated>2010-02-25T00:10:09Z</updated>
                <published>2010-02-25T00:10:09Z</published>
                <id>/blog/2010-feb-25-setting-blog-django.html</id>
                                <category   scheme="/blog/tags"
                            term="django"
                            label="Django" />
                                <category   scheme="/blog/tags"
                            term="blog"
                            label="Blog" />
                                <category   scheme="/blog/tags"
                            term="drupal"
                            label="Drupal" />
                                <category   scheme="/blog/tags"
                            term="tip"
                            label="Tip" />
                                <category   scheme="/blog/tags"
                            term="migration"
                            label="Migration" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;Recently, I decided that my site needed an overhaul. Initially, I only
imagined a theme redesign, but as I examined my site, I realized that drupal
&lt;em&gt;really&lt;/em&gt; wasn&#39;t doing it for me. Yes, it&#39;s leaps and bounds ahead of what I&#39;d
done before. Yes, it&#39;s amazing, with incredible contributed themes and
modules. But...it was just insufficient / wrong. For one thing, it&#39;s written
in PHP, which &lt;em&gt;really&lt;/em&gt; grates on my consience; I&#39;ve done php development, and
it is imo just &lt;em&gt;so&lt;/em&gt; inferior as a language, to, well, many other languages.
Python in particular.&lt;/p&gt;
&lt;p&gt;I really love python, and I get the feeling that it loves me back ;) so I
wanted to find a CMS in python -- because I didn&#39;t just want a blog; and I
_really_ didn&#39;t want a cookie-cutter website; I had a vision for how it
should look and what it should do that went beyond any pure blog (e.g.
wordpress). So I looked around for a &amp;quot;python CMS&amp;quot; and ran into a few that
looked interesting, but none that looked &lt;em&gt;phenomenal&lt;/em&gt;. But then I found
Django.&lt;/p&gt;
&lt;p&gt;Of course, at first I was skeptical -- it really didn&#39;t look like a CMS (well,
it&#39;s &lt;em&gt;not&lt;/em&gt; a CMS) and I wasn&#39;t sure how well/easily I would be able to write
my website using it. Then I read through the &lt;a class=&#34;reference external&#34; href=&#34;http://djangobook.com&amp;quot;&#34;&gt;Django Book&lt;/a&gt; and was totally sold -- this is &lt;em&gt;python&lt;/em&gt;, this is &lt;em&gt;well
designed&lt;/em&gt; this is, frankly, &lt;strong&gt;awesome&lt;/strong&gt;. I still had some questions, though.
Coming as I did from a drupal background (and WordPress before that) I was
still stuck in the monolithic mindset -- Isn&#39;t it just plain messy to allow
apps to be anywhere on the python path? Shouldn&#39;t there be some federated
system for installing and keeping track of modules?&lt;/p&gt;
&lt;p&gt;Then I was searching around on a blog and found a reference to a talk at
DjangoCon 2008: &lt;a class=&#34;reference external&#34; href=&#34;http://www.youtube.com/watch?v=A-S0tqpPga4&amp;quot;&#34;&gt;Reusable Apps&lt;/a&gt;, which cleared up almost all
the questions I had about django, and the reasons behind its
structure/philosophy.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Songbird Global Hotkeys for Ubuntu Linux</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2010-feb-20-songbird-global-hotkeys-ubuntu-linux.html"/>
                <updated>2010-02-20T21:00:35Z</updated>
                <published>2010-02-20T21:00:35Z</published>
                <id>/blog/2010-feb-20-songbird-global-hotkeys-ubuntu-linux.html</id>
                                <category   scheme="/blog/tags"
                            term="songbird"
                            label="Songbird" />
                                <category   scheme="/blog/tags"
                            term="ubuntu"
                            label="Ubuntu" />
                                <category   scheme="/blog/tags"
                            term="hotkeys"
                            label="Hotkeys" />
                                <category   scheme="/blog/tags"
                            term="tip"
                            label="Tip" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;One thing that I have really missed in playing with songbird is Global Hotkeys
for changing the song, etc. This functionality is available for &lt;a class=&#34;reference external&#34; href=&#34;http://wiki.songbirdnest.com/Getting_Started_with_Songbird/03_Basic_Controls#Hotkeys_.26_Keyboard_Shortcuts&#34;&gt;Windows&lt;/a&gt;,
but Linux (and Mac) users still have to wait if we want official support.
There is a workaround, though, thanks to GeekShadow&#39;s addon &lt;a class=&#34;reference external&#34; href=&#34;http://addons.songbirdnest.com/addons/1381&#34;&gt;Command Line
Support&lt;/a&gt;. This allows for all
kinds of clever hackery, including global Hotkeys.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This tutorial is for Ubuntu Linux specifically, but might well apply to other linux distros with Gnome, and the principals are certainly globally applicable.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;First, get the &lt;a class=&#34;reference external&#34; href=&#34;http://addons.songbirdnest.com/addons/1381&#34;&gt;Command Line Support&lt;/a&gt; addon&lt;/p&gt;
&lt;img alt=&#34;/media/images/clsongbird.png&#34; src=&#34;/media/images/clsongbird.png&#34; /&gt;
&lt;p&gt;Navigate to &lt;a class=&#34;reference external&#34; href=&#34;http://addons.songbirdnest.com/addons/1381&#34;&gt;http://addons.songbirdnest.com/addons/1381&lt;/a&gt; in songbird&#39;s browser, and you can install it cleanly. Otherwise, you can download the .xpi file, and open it with songbird.&lt;/p&gt;
&lt;p&gt;Now to create the shortcuts&lt;/p&gt;
&lt;img alt=&#34;/media/images/keyshortcuts.png&#34; src=&#34;/media/images/keyshortcuts.png&#34; /&gt;
&lt;p&gt;In the &amp;quot;Keyboard Shortcuts&amp;quot; dialog, click &amp;quot;Add&amp;quot;&lt;/p&gt;
&lt;img alt=&#34;/media/images/key1.png&#34; src=&#34;/media/images/key1.png&#34; /&gt;
&lt;p&gt;Fill &amp;quot;Songbird Next&amp;quot; for the name, and &amp;quot;songbird -next&amp;quot; for the command&lt;/p&gt;
&lt;img alt=&#34;/media/images/key2.png&#34; src=&#34;/media/images/key2.png&#34; /&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the &amp;quot;songbird -next&amp;quot; command will only work if the command &amp;quot;songbird&amp;quot; works on your command-line. If you have Songbird installed someplace special. use for your command &amp;quot;/path/to/Songbird/songbird -next&amp;quot;.&lt;/p&gt;
&lt;p&gt;Finally, enter a key combination to bind to the command. Repeat for -prev and -pause&lt;/p&gt;
&lt;img alt=&#34;/media/images/key3.png&#34; src=&#34;/media/images/key3.png&#34; /&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                                                                <entry>
                <title type="html">UNetbootin failed to unmount /cdrom</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2009-nov-01-unetbootin-failed-unmount-cdrom.html"/>
                <updated>2009-11-01T13:49:56Z</updated>
                <published>2009-11-01T13:49:56Z</published>
                <id>/blog/2009-nov-01-unetbootin-failed-unmount-cdrom.html</id>
                                <category   scheme="/blog/tags"
                            term="troubleshooting"
                            label="Troubleshooting" />
                                <category   scheme="/blog/tags"
                            term="ubuntu"
                            label="Ubuntu" />
                                <category   scheme="/blog/tags"
                            term="install"
                            label="Install" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;/media/images/ubuntu-error.png&#34; src=&#34;/media/images/ubuntu-error.png&#34; /&gt;
&lt;p&gt;I used UNetBootin to install Karmic (Ubuntu 9.10) to my laptop, but I kept running into the error &amp;quot;Failed to unmount partitions&amp;quot;&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
The installer needs to commit changes to partition tables, but cannot &lt;span class=&#34;keyword&#34;&gt;do &lt;/span&gt;so becaue partitions on the following mount points could not be unmounted:

/cdrom

Please close any applications using these mount points

Would you like the installer to try to unmount these partitions again?
&lt;/pre&gt;
&lt;p&gt;This is probably a result of me choosing the &amp;quot;install from Hard Drive&amp;quot; option in UNetbootin, and so I was about to give up, when I tried just unmounting ;)
Of course, ubuntu complained a bit, but when I used strong words (flags) with it, it complied. The command I used was&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
sudo umount -l -r -f /cdrom
&lt;/pre&gt;
&lt;p&gt;which worked like a charm, and allowed installation to continue normally. NOTE: you can&#39;t use this method to install ubuntu to the partition from which you ran unetbootin...that just doesn&#39;t work.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">SVG Birds</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2009-oct-11-svg-birds.html"/>
                <updated>2009-10-11T19:51:50Z</updated>
                <published>2009-10-11T19:51:50Z</published>
                <id>/blog/2009-oct-11-svg-birds.html</id>
                                <category   scheme="/blog/tags"
                            term="graphics"
                            label="Graphics" />
                                <category   scheme="/blog/tags"
                            term="art"
                            label="Art" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;/media/images/birds2.png&#34; src=&#34;/media/images/birds2.png&#34; /&gt;
&lt;p&gt;I needed to create some svg birds for a game I&#39;m working on (i couldn&#39;t find any around) and I thought I&#39;d share them; feel free to use/abuse them in any way you want ;)&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Error installing xdebug: phpize not found</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2009-aug-15-error-installing-xdebug-phpize-not-found.html"/>
                <updated>2009-08-15T17:18:17Z</updated>
                <published>2009-08-15T17:18:17Z</published>
                <id>/blog/2009-aug-15-error-installing-xdebug-phpize-not-found.html</id>
                                <category   scheme="/blog/tags"
                            term="troubleshooting"
                            label="Troubleshooting" />
                                <category   scheme="/blog/tags"
                            term="xdebug"
                            label="Xdebug" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;So I ran &lt;tt class=&#34;docutils literal&#34;&gt;sudo pecl install xdebug&lt;/tt&gt; like a good linux user, but was stymied
when it threw the error &lt;tt class=&#34;docutils literal&#34;&gt;phpize not found&lt;/tt&gt;, especially when &lt;tt class=&#34;docutils literal&#34;&gt;sudo &lt;span class=&#34;pre&#34;&gt;apt-get&lt;/span&gt;
install phpize&lt;/tt&gt; yielded no friuts (darn it, that usually works!)&lt;/p&gt;
&lt;p&gt;The magic package actually happens to be &amp;quot;php5-dev&amp;quot;, so a quick &lt;tt class=&#34;docutils literal&#34;&gt;sudo &lt;span class=&#34;pre&#34;&gt;apt-get&lt;/span&gt;
install &lt;span class=&#34;pre&#34;&gt;php5-dev&lt;/span&gt;&lt;/tt&gt; fixes everything!&lt;/p&gt;
&lt;p&gt;Now wasn&#39;t that simple...of course it made me waste a half hour searching, but,
never again ;)&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">[Drupal] Make user profile URLs readable</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2009-may-27-drupal-make-user-profile-urls-readable.html"/>
                <updated>2009-05-27T08:07:24Z</updated>
                <published>2009-05-27T08:07:24Z</published>
                <id>/blog/2009-may-27-drupal-make-user-profile-urls-readable.html</id>
                                <category   scheme="/blog/tags"
                            term="drupal"
                            label="Drupal" />
                                <category   scheme="/blog/tags"
                            term="pathauto"
                            label="Pathauto" />
                                <category   scheme="/blog/tags"
                            term="pretty-urls"
                            label="Pretty-Urls" />
                                <category   scheme="/blog/tags"
                            term="ux"
                            label="Ux" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;Here&#39;s a tip for making you&#39;re community site that much more user friendly:&lt;/p&gt;
&lt;p&gt;change this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;em&gt;http://example.com/user/5275&lt;/em&gt;&lt;/blockquote&gt;
&lt;p&gt;to this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;em&gt;http://example.com/users/joe-shmo&lt;/em&gt;&lt;/blockquote&gt;
&lt;p&gt;Much better, right?&lt;/p&gt;
&lt;p&gt;To accomplish this, we will make use of the excellent &lt;a class=&#34;reference external&#34; href=&#34;http://drupal.org/project/pathauto&#34;&gt;Pathauto&lt;/a&gt; module, which, among other things,
allows us to alias user profile urls.&lt;/p&gt;
&lt;p&gt;Once pathauto is installed and enabled, go to &lt;em&gt;admin/build/path/pathauto&lt;/em&gt;
(&lt;em&gt;admin/settings/pathauto&lt;/em&gt; in drupal 5), and select &lt;strong&gt;&amp;quot;Bulk generate aliases
for users that are not aliased&amp;quot;&lt;/strong&gt; under the &amp;quot;user path settings&amp;quot; dropdown.&lt;/p&gt;
&lt;p&gt;This will create the aliases for all your current users (future users will be
aliased as they are registered).&lt;/p&gt;
&lt;p&gt;Save the configuration, and you&#39;re all set!&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">All screenshots from drupal theme garden on one page</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2009-may-15-all-screenshots-drupal-theme-garden-one-page.html"/>
                <updated>2009-05-15T23:02:24Z</updated>
                <published>2009-05-15T23:02:24Z</published>
                <id>/blog/2009-may-15-all-screenshots-drupal-theme-garden-one-page.html</id>
                                <category   scheme="/blog/tags"
                            term="drupal"
                            label="Drupal" />
                                <category   scheme="/blog/tags"
                            term="themes"
                            label="Themes" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;/media/images/drupalthemegarden.png&#34; src=&#34;/media/images/drupalthemegarden.png&#34; /&gt;
&lt;p&gt;I got annoyed with &lt;a class=&#34;reference external&#34; href=&#34;http://themegarden.org/&#34;&gt;drupal theme garden&lt;/a&gt; so I whipped up &lt;a class=&#34;reference external&#34; href=&#34;/prog/themegarden.cgi&#34;&gt;this page&lt;/a&gt;&lt;/p&gt;
&lt;img alt=&#34;/media/images/drupalthemegarden.png&#34; src=&#34;/media/images/drupalthemegarden.png&#34; /&gt;
&lt;p&gt;this shows all the screenshots from all the (drupal 6) themes on themegarden.org&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;/prog/themegarden.cgi&#34;&gt;check it out here&lt;/a&gt; &lt;strong&gt;(no longer supported)&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                                        <entry>
                <title type="html">Songbird Recipe: Playlists</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2009-feb-02-songbird-recipe-playlists.html"/>
                <updated>2009-02-02T22:24:55Z</updated>
                <published>2009-02-02T22:24:55Z</published>
                <id>/blog/2009-feb-02-songbird-recipe-playlists.html</id>
                                <category   scheme="/blog/tags"
                            term="songbird"
                            label="Songbird" />
                                <category   scheme="/blog/tags"
                            term="tip"
                            label="Tip" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;Here&#39;s a quick javascript+XPCOM recipe on how to get a list of the user&#39;s
playlists in a songbird extension.&lt;/p&gt;
&lt;pre class=&#34;code javascript literal-block&#34;&gt;
&lt;span class=&#34;keyword declaration&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;getUserPlaylists&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;keyword declaration&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;sLM&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;Components&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;classes&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal string double&#34;&gt;&amp;quot;&amp;#64;songbirdnest.com/Songbird/library/Manager;1&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;
                &lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;getService&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;Components&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;interfaces&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;sbILibraryManager&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;keyword declaration&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;aLib&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;sLM&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;mainLibrary&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;keyword declaration&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;playlists&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;aLib&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;keyword declaration&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;pnames&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;keyword declaration&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;listener&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;name other&#34;&gt;onEnumerationBegin&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword declaration&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;name other&#34;&gt;onEnumerationEnd&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword declaration&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;name other&#34;&gt;onEnumeratedItem&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;keyword declaration&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;pnames&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;literal number integer&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;){&lt;/span&gt; &lt;span class=&#34;comment single&#34;&gt;// sometimes we get smart playlists multiple times
&lt;/span&gt;                &lt;span class=&#34;name other&#34;&gt;playlists&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;name other&#34;&gt;pnames&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;Components&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;interfaces&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;sbIMediaListEnumerationListener&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;CONTINUE&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;punctuation&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;name other&#34;&gt;aLib&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;enumerateItemsByProperty&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;literal string double&#34;&gt;&amp;quot;http://songbirdnest.com/data/1.0#isList&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;literal string double&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;listener&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;playlists&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;keyword declaration&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;playPlaylist&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;plist&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;){&lt;/span&gt; &lt;span class=&#34;comment single&#34;&gt;// i == index of the song you want to play
&lt;/span&gt;    &lt;span class=&#34;keyword declaration&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;gMM&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;name other&#34;&gt;Components&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;classes&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;literal string double&#34;&gt;&amp;quot;&amp;#64;songbirdnest.com/Songbird/Mediacore/Manager;1&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;
                    &lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;getService&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;Components&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;interfaces&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;sbIMediacoreManager&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;name other&#34;&gt;gMM&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;sequencer&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;playView&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;plist&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;createView&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;name other&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Once you get your lists of playlists, you can start one playing with
&lt;tt class=&#34;docutils literal&#34;&gt;playPlaylist(plist,index)&lt;/tt&gt; or check the user-visible names with &lt;tt class=&#34;docutils literal&#34;&gt;plist.name&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;For more info on the songbird extension API, hit &lt;a class=&#34;reference external&#34; href=&#34;http://developer.songbirdnest.com/add-on-api/docs/trunk/&#34;&gt;the docs&lt;/a&gt; or mozilla&#39;s
&lt;a class=&#34;reference external&#34; href=&#34;irc://irc.mozilla.org/#songbird&#34;&gt;songbird irc channel&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                <entry>
                <title type="html">Install Python 2.6 in Ubuntu</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2009-jan-20-install-python-26-ubuntu.html"/>
                <updated>2009-01-20T18:20:48Z</updated>
                <published>2009-01-20T18:20:48Z</published>
                <id>/blog/2009-jan-20-install-python-26-ubuntu.html</id>
                                <category   scheme="/blog/tags"
                            term="how-to"
                            label="How-To" />
                                <category   scheme="/blog/tags"
                            term="tips"
                            label="Tips" />
                                <category   scheme="/blog/tags"
                            term="troubleshooting"
                            label="Troubleshooting" />
                                <category   scheme="/blog/tags"
                            term="python"
                            label="Python" />
                                <category   scheme="/blog/tags"
                            term="ubuntu"
                            label="Ubuntu" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;p&gt;At first blush, it would seem that those wanting the latest stable python, 2.6,
would have to compile it themselves (or so &lt;a class=&#34;reference external&#34; href=&#34;http://www.python.org/download/releases/2.6.1/&#34;&gt;python.org&lt;/a&gt; would indicate). Fortunately
for us, that process, which is at best annoying, and at worst long and
complicated, is spared us by our friends over at Launchpad, and their
&lt;a class=&#34;reference external&#34; href=&#34;https://help.launchpad.net/Packaging/PPA#Installing%20software%20from%20a%20PPA&#34;&gt;&amp;quot;Personal Package Archives&amp;quot;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to install anything from the PPA, you need to add them to your
repositories: &lt;tt class=&#34;docutils literal&#34;&gt;deb &lt;span class=&#34;pre&#34;&gt;http://ppa.launchpad.net/doko/ubuntu/&lt;/span&gt; intrepid main&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;For those who&#39;ve forgotten how, or just need a refresher, hit &lt;a class=&#34;reference external&#34; href=&#34;https://help.ubuntu.com/community/Repositories/Ubuntu#Adding%20Repositories%20in%20Ubuntu&#34;&gt;this page&lt;/a&gt;
for full instructions.&lt;/p&gt;
&lt;p&gt;Once you&#39;ve done that, just run&lt;/p&gt;
&lt;pre class=&#34;code bash literal-block&#34;&gt;
sudo apt-get update
sudo apt-get install python2.6
&lt;/pre&gt;
&lt;p&gt;and you&#39;re done! (note that aptitude will inform you that this package is &lt;em&gt;not
verified&lt;/em&gt; -- because it&#39;s not in ubuntu&#39;s own repositories).&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
                                                        <entry>
                <title type="html">Convert videos with ffmpeg</title>
                <author><name>Jared Forsyth</name></author>
                <link href="/blog/2009-jan-06-convert-videos-ffmpeg.html"/>
                <updated>2009-01-06T14:07:58Z</updated>
                <published>2009-01-06T14:07:58Z</published>
                <id>/blog/2009-jan-06-convert-videos-ffmpeg.html</id>
                                <category   scheme="/blog/tags"
                            term="ffmpeg"
                            label="Ffmpeg" />
                                <category   scheme="/blog/tags"
                            term="troubleshooting"
                            label="Troubleshooting" />
                                <category   scheme="/blog/tags"
                            term="linux"
                            label="Linux" />
                                <category   scheme="/blog/tags"
                            term="tip"
                            label="Tip" />
                
                <content type="html">
                    &lt;div class=&#34;document&#34;&gt;
&lt;img alt=&#34;FFmpeg logo&#34; src=&#34;http://ffmpeg.mplayerhq.hu/ffmpeg-logo.png&#34; style=&#34;width: 306px; height: 84px;&#34; /&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://ffmpeg.mplayerhq.hu/&#34;&gt;FFmpeg&lt;/a&gt; is a wonderful   tool which every
aspiring linux guru should get familiar with. The thing it does, just about
better   than anything else, is handle media files. You can mux them, demux
them, encode/decode, resize, compress  .....you name it.&lt;/p&gt;
&lt;p&gt;Unfortunately, all that versatility means that it can be somewhat confusing,
if, say &lt;em&gt;all you want   to do is convert this one file&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Well, actually, most of the time, ffmpeg will play nice, and theres this one
simple command that will   do you:&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;name&#34;&gt;ffmpeg&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;infile.abc&amp;quot;&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;outfile.cba&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In this manner, you can convert wav to mp3, wmv to avi, or flv to mpg.&lt;/p&gt;
&lt;p&gt;The problems start, of course, when ffmpeg starts spitting out errors. This
happens when the settings   for your infile are incompatible woth the format of
your outfile...so the solution is to manually set   those settings.&lt;/p&gt;
&lt;p&gt;if it complains about &amp;quot;timebase not supported by mpeg 4 standard&amp;quot;, try adding
this parameter (before   the outfile param):&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;25&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;this sets the framerate to the ffmpeg default&lt;/p&gt;
&lt;p&gt;Another error I got was &amp;quot;Sampling rate 11025 is not allowed in mp2&amp;quot;&lt;/p&gt;
&lt;p&gt;to fix that, just set the sampling rate to the default with&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;ar&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;44100&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Another handy option is the file size limit -- great for compressing a video,
when you dont want to   mess with bitrates and framerates and the like. The
file size is specified in bytes, thus&lt;/p&gt;
&lt;pre class=&#34;code python literal-block&#34;&gt;
&lt;span class=&#34;name&#34;&gt;ffmpeg&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;large.mov&amp;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;fs&lt;/span&gt; &lt;span class=&#34;literal number integer&#34;&gt;10000000&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;name&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;name&#34;&gt;qvga&lt;/span&gt; &lt;span class=&#34;literal string&#34;&gt;&amp;quot;small.avi&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;the &amp;quot;-s qvga&amp;quot; parameter resizes the video as well -- down to 320x240.&lt;/p&gt;
&lt;p&gt;For extensive technical documentation for ffmpeg, &lt;a class=&#34;reference external&#34; href=&#34;http://ffmpeg.mplayerhq.hu/ffmpeg-doc.html&#34;&gt;go here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
                </content>
            </entry>
            </feed>