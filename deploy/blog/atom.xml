<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>
        BASIC blog full text feed    </title>
        <link href="/blog/atom.xml" rel="self" />
    
        <link href="/"/>
    
        
    <updated>2013-04-29T20:12:14Z</updated>

    <id>/blog/atom.xml/</id>

            <entry>
            <title type="html">ProtoClipper - clip web pages for rapid prototyping</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Apr-25-protoclipper-clip-web-pages-rapid-prototyping.html"/>
            <updated>2013-04-25T20:00:38Z</updated>
            <published>2013-04-25T20:00:38Z</published>
            <id>/blog/2013-Apr-25-protoclipper-clip-web-pages-rapid-prototyping.html</id>
            
            <content type="html">
                                &lt;p&gt;I&amp;#8217;m doing some prototyping of &lt;span class=&#34;caps&#34;&gt;UX&lt;/span&gt; changed for a website, and created a tool to help you create sandboxed, interactive prototypes. Essentially it lets you take a snapshot of a single section of a page and save it as a static &lt;span class=&#34;caps&#34;&gt;HTML&lt;/span&gt; file - including everything that may have been dynamically loaded or changed. Then the in-body javascript is removed, and you&amp;#8217;re free to edit the resulting file and produce your interactive&amp;nbsp;mockup.&lt;/p&gt;
&lt;p&gt;To use, bookmark the following link. Then when you click the bookmark, the page will get grayer out a bit, and you can click+drag to select the region you want. If you want to quit, click &lt;span class=&#34;caps&#34;&gt;ESC&lt;/span&gt;. Once you&amp;#8217;ve selected the region you want, press &lt;Enter&gt; or click inside of the box to finalize &amp;#8212; then the page will be clipped appropriately. Then you can &amp;#8220;Ctrl-S&amp;#8221; to save the clipped web page, and you can then edit all you&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ProtoClipper&lt;/code&gt;__&lt;/p&gt;
&lt;p&gt;__&amp;nbsp;javascript:(function(){document.body.appendChild(document.createElement(&amp;#8216;script&amp;#8217;)).src=&amp;#8217;http://jaredforsyth.com/media/protoclipper.js&amp;#8217;;})();&lt;/p&gt;
&lt;p&gt;.. image:: /media/uploads/jared_protoclipper.png
   :width:&amp;nbsp;470px&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">The Internet of Things</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Apr-11-internet-things.html"/>
            <updated>2013-04-11T11:00:00Z</updated>
            <published>2013-04-11T11:00:00Z</published>
            <id>/blog/2013-Apr-11-internet-things.html</id>
            
            <content type="html">
                                &lt;p&gt;The &amp;#8220;simplify&amp;#8221; trend among productivity specialists calls for a rejection of
much of the complexities of modern lifestyle, opting instead for simplicity
and minimalism. This is by no means a new concept; the ascetic monks from
various religions have embraced such practices for millenia. However, with the
rise of the technological age and the birth of the twenty-first century, such
ideals have become increasingly popular. Why is it, though, that the modern
world with all its conveniences and time-savers would drive so many to reject
these very &amp;#8220;advancements&amp;#8221;? These amenities and convenient technologies are
developed around and often serve to support a culture of consumerism,
materialism, and individualism. While online shopping, social networking, and
email can be incredibly useful and assist in necessary tasks, they can also be
a significant detriment to our productivity and general well-being. Add to
that the many often disturbing negative uses of these new technologies, and
one can readily understand the urge to step back and focus on the&amp;nbsp;essential.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Social Conference</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Apr-09-social-conference.html"/>
            <updated>2013-04-09T21:18:00Z</updated>
            <published>2013-04-09T21:18:00Z</published>
            <id>/blog/2013-Apr-09-social-conference.html</id>
            
            <content type="html">
                                &lt;p&gt;This past weekend I experimented with using twitter during one of the sessions
of &lt;code&gt;General Conference &amp;lt;http://conference.lds.org/&amp;gt;&lt;/code&gt;__. Frankly, it was
similar to watching conference with several dozen other people who were all
carrying on lively conversations, complete with peanut&amp;nbsp;gallery.&lt;/p&gt;
&lt;p&gt;I found it detracted greatly from the experience, distracting my attention
while adding very little value. Leaving out all of the &amp;#8220;watching #ldsconf in
my PJs&amp;#8221;, it seemed that most of the activity was just people quoting something
a general authority had just said &amp;#8230; which I would have heard and noted on my
own, as long as I wasn&amp;#8217;t distracted. For the same reasons that we are asked to
be reverent in a meeting such as sacrament meeting or general conference, 
twitter has no place in meetings where the Holy Spirit is the main&amp;nbsp;teacher.&lt;/p&gt;
&lt;p&gt;Where twitter really shines is in the after-conference review and study of the
talks. When you are going over your notes, twitter provides the best quotes,
references, and related material for each talk, saving you a lot of time and&amp;nbsp;research.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">If I can&#39;t see you</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Apr-04-if-i-cant-see-you.html"/>
            <updated>2013-04-04T00:04:39Z</updated>
            <published>2013-04-04T00:04:39Z</published>
            <id>/blog/2013-Apr-04-if-i-cant-see-you.html</id>
            
            <content type="html">
                                &lt;p&gt;If you know indisputably that a behavior or product has destroyed lives and
families, would you dare touch it? In a number of cases, online gaming has
done just that. This is only a small percentage, of course, and we can&amp;#8217;t live
our lives in fear of everything that has associated risks. We all enjoy
electricity, for example, though it has tremendous power to kill. But this
begs the question: what benefits are there from online gaming that warrant
even the slight risk of devastation? Call me an idealist, but I believe in a
world where truth is more exciting than fiction, where reality is &lt;em&gt;better&lt;/em&gt;
than virtual reality. Is it too much to hope that everyone could be exerting
their individual effort towards something constructive and inherently
meaningful for mankind, rather than commanding hoards of virtual orcs to blow
up someone else&amp;#8217;s hoards of virtual orcs? And it&amp;#8217;s not just the war games;
cultivating a virtual farm or flinging angry birds seems to accomplish equally
little. I don&amp;#8217;t mean to imply that online gaming is devoid of inherent value.
I&amp;#8217;m sure that players learn some amount of teamwork and problem solving over
the course of a quest. I propose, however, that spending time and effort in
actual reality results in stronger relationships and greater real value
overall. Escaping the problems we face in real life by immersing ourselves in
a virtual life does nothing to solve our problems, and often just intensifies&amp;nbsp;them.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Software Patents</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Apr-02-software-patents.html"/>
            <updated>2013-04-02T21:59:48Z</updated>
            <published>2013-04-02T21:59:48Z</published>
            <id>/blog/2013-Apr-02-software-patents.html</id>
            
            <content type="html">
                                &lt;p&gt;.. youtube::&amp;nbsp;Hk0E5a1nCjU&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Creative Education</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Mar-28-creative-education.html"/>
            <updated>2013-03-28T11:43:01Z</updated>
            <published>2013-03-28T11:43:01Z</published>
            <id>/blog/2013-Mar-28-creative-education.html</id>
                        <category   scheme="/blog/tags"
                        term="education"
                        label="Education" />
                        <category   scheme="/blog/tags"
                        term="reform"
                        label="Reform" />
            
            <content type="html">
                                &lt;p&gt;It&amp;#8217;s time to  stop ignoring the need for general education reform. It&amp;#8217;s true,                                                                                                                                                                                               &lt;br /&gt;
there are some of us who happen to be good at the kinds of things that                                                                                                                                                                                                      &lt;br /&gt;
standardized tests are looking for, and who learn to love to learn &lt;em&gt;despite&lt;/em&gt; their                                                                                                                                                                                              &lt;br /&gt;
public education. But for every one who survives public schooling with creativity in tact, there                                                                                                                                                                                              &lt;br /&gt;
are a dozen others who buy in to the game, who either spend their time trying                                                                                                                                                                                               &lt;br /&gt;
to be good at the things that are tested, or sacrifice their creativity and                                                                                                                                                                                                 &lt;br /&gt;
lose all desire to learn because the school system so often incentivises                                                                                                                                                                                                    &lt;br /&gt;
conformity and punishes their&amp;nbsp;creativity.                                                                                                                                                                                                                                     &lt;/p&gt;
&lt;p&gt;The tragedy here is that these people spend the first few decades of their                                                                                                                                                                                                  &lt;br /&gt;
lives &amp;#8220;preparing for the workforce&amp;#8221;, hoping to gain an education so they will                                                                                                                                                                                               &lt;br /&gt;
be successful in providing for themselves, only to find that the attributes                                                                                                                                                                                                 &lt;br /&gt;
that are critical for occupational success are the very characteristics that                                                                                                                                                                                                &lt;br /&gt;
public school had beaten out of&amp;nbsp;them.                                                                                                                                                                                                                                         &lt;/p&gt;
&lt;p&gt;Assuming that the goal is to educate everyone as much as possible, to increase                                                                                                                                                                                              &lt;br /&gt;
their intelligence and help them have more opportunities throughout their                                                                                                                                                                                                   &lt;br /&gt;
lives, the current system of &amp;#8220;education&amp;#8221; has more than a few curiosities. Why,                                                                                                                                                                                              &lt;br /&gt;
for example, do high schools around the country spend a large amount of time                                                                                                                                                                                                &lt;br /&gt;
&amp;#8220;teaching to&amp;#8221; the &lt;span class=&#34;caps&#34;&gt;SAT&lt;/span&gt;, the &lt;span class=&#34;caps&#34;&gt;ACT&lt;/span&gt;, and various other standardized tests? Closer                                                                                                                                                                                                &lt;br /&gt;
inspection reveals that much of &amp;#8220;education&amp;#8221; is geared toward &lt;em&gt;ranking&lt;/em&gt;                                                                                                                                                                                                      &lt;br /&gt;
children in addition to&amp;#8212;and sometimes in the place of&amp;#8212;teaching&amp;nbsp;them.                                                                                                                                                                                                        &lt;/p&gt;
&lt;p&gt;The need for ranking America&amp;#8217;s youth follows naturally from the notion that                                                                                                                                                                                                 &lt;br /&gt;
there are a limited number of jobs and a large number of potential employees.                                                                                                                                                                                               &lt;br /&gt;
Employers naturally would want to select the best and &amp;#8220;most intelligent&amp;#8221; for                                                                                                                                                                                                &lt;br /&gt;
the best jobs. This idea was born of the industrial revolution, where there was                                                                                                                                                                                             &lt;br /&gt;
indeed a tremendous glut of labor as people migrated to urban centers &lt;em&gt;en                                                                                                                                                                                                   &lt;br /&gt;
masse&lt;/em&gt;. In such a world of job scarcity, students would in fact &lt;em&gt;want&lt;/em&gt; to be                                                                                                                                                                                                &lt;br /&gt;
ranked so that they can have the best job possible. This scenario, however, is                                                                                                                                                                                              &lt;br /&gt;
a&amp;nbsp;delusion.                                                                                                                                                                                                                                                                   &lt;/p&gt;
&lt;p&gt;..  This makes sense if you adhere to the early twentieth century view                                                                                                                                                                                                &lt;br /&gt;
          that intelligence is static, &lt;span class=&#34;caps&#34;&gt;IQ&lt;/span&gt; is a perfect representation of that                                                                                                                                                                                               &lt;br /&gt;
          intelligence, and that we should have involuntary sterilization of                                                                                                                                                                                                &lt;br /&gt;
          people who are &amp;#8220;just too stupid&amp;#8221;. I hope I&amp;#8217;m not being too generous                                                                                                                                                                                               &lt;br /&gt;
          when I claim that nobody thinks that way&amp;nbsp;anymore.                                                                                                                                                                                                                   &lt;/p&gt;
&lt;p&gt;I hope none of us believe in a world where, regardless of how educated we all                                                                                                                                                                                               &lt;br /&gt;
are, the lowest ranked will just &lt;em&gt;have to work at McDonalds&lt;/em&gt;, because there                                                                                                                                                                                                 &lt;br /&gt;
&lt;em&gt;just won&amp;#8217;t be enough&lt;/em&gt; good, fulfilling jobs for everyone. It&amp;#8217;s buy-in to                                                                                                                                                                                               &lt;br /&gt;
this fallacy of scarcity that leads to the type of ranking&amp;#8212;not                                                                                                                                                                                                             &lt;br /&gt;
schooling&amp;#8212;which we see happening to our children. With school reform that                                                                                                                                                                                                  &lt;br /&gt;
encourages creativity and innovation, we will see many more entrepreneurs                                                                                                                                                                                                  &lt;br /&gt;
pushing the limits of human ability which will &lt;em&gt;create&lt;/em&gt; more jobs and lead to a more                                                                                                                                                                                                 &lt;br /&gt;
flourishing economy&amp;nbsp;overall.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">You know, we all want to change the world</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Mar-26-you-know-we-all-want-change-world.html"/>
            <updated>2013-03-26T11:31:25Z</updated>
            <published>2013-03-26T11:31:25Z</published>
            <id>/blog/2013-Mar-26-you-know-we-all-want-change-world.html</id>
                        <category   scheme="/blog/tags"
                        term="ict4d"
                        label="Ict4D" />
            
            <content type="html">
                                &lt;p&gt;If you want to change the world, chances are you major in business, law,
political science, or economics. If you don&amp;#8217;t really care about making tons of 
money, then sociology, anthropology, and nonprofit management are
possibilities. In general, though, computer science isn&amp;#8217;t on the top of the
&amp;#8220;change-maker&amp;#8221; list, and yet computer technology is changing the world faster
than anything else.  In many developing nations, the urban and rural poor have
cell phones and satellite dishes before they have shoes and running water. In
the information age, technology has the potential to connect societies and
cultures, and to empower the poor in less-developed nations to speak up and be
heard on a global scale. But who will build the software and design the
hardware that will enable this change? Computer scientists and engineers are
changing the world&amp;nbsp;already.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Communist Software</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Mar-19-communist-software.html"/>
            <updated>2013-03-19T11:30:52Z</updated>
            <published>2013-03-19T11:30:52Z</published>
            <id>/blog/2013-Mar-19-communist-software.html</id>
                        <category   scheme="/blog/tags"
                        term="communism"
                        label="Communism" />
            
            <content type="html">
                                &lt;p&gt;The world has seen several attempts to implement communism in the political
sphere, which invariably end in corrupt leaders and oppression of the masses.
So what makes open source and free software different? The core open
source values look a lot like communism on the face of it; people contribute
without monetary compensation, and receive without having to pay. Everyone
gives what they can and receives what they need. The key difference here,
though, is that the open source phenomenon has been entirely voluntary, in no
way enforced by a government or entity.  For some reason, intelligent,
hard-working people from around the world have gravitated to this standard of
openness, resulting in an incredible number of free software projects, many of
which are very professional and have been able to help millions of people. The
ease of contributing afforded by the internet and the inherent low resource
cost make software development a domain where the ideal of community
contribution and benefit can actually be&amp;nbsp;realized.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Grandpa&#39;s got an iPad</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Mar-14-grandpas-got-ipad.html"/>
            <updated>2013-03-14T11:49:36Z</updated>
            <published>2013-03-14T11:49:36Z</published>
            <id>/blog/2013-Mar-14-grandpas-got-ipad.html</id>
                        <category   scheme="/blog/tags"
                        term="genealogy"
                        label="Genealogy" />
            
            <content type="html">
                                &lt;p&gt;In general, age and technological aptitude seem to be negatively correlated.
Toddlers raised on an iPad have no difficulty navigating the various menus and
interfaces now ubiquitous in the digital age, while their grandparents and
great-grandparents are left in the dust. In fact, &amp;#8220;my grandmother&amp;#8221; has become
the archetypal &amp;#8220;most inept computer user I know&amp;#8221;, resulting in claims such as
&amp;#8220;this is so easy even my grandmother could use it&amp;#8221;. Imagine the clash, then,
when a domain dominated by the elderly &amp;#8212; genealogy &amp;#8212; experiences a
technological revolution, as has occurred over the past few decades. The
search for progenitors lends itself naturally to digitization, but it also
requires the main demographic involved to rely heavily on the younger&amp;nbsp;generation.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Software Wars</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Mar-07-software-wars.html"/>
            <updated>2013-03-07T11:19:16Z</updated>
            <published>2013-03-07T11:19:16Z</published>
            <id>/blog/2013-Mar-07-software-wars.html</id>
            
            <content type="html">
                                &lt;p&gt;The current software patent environment is enough to make me want to hide
under a rock somewhere, alone with my code and safe from predatory companies
and their packs of lawyers. If you&amp;#8217;ve missed it, the news is rife with
examples of companies armed with rediculously broad patents&amp;#8212;covering things
like &amp;#8220;downloading a file&amp;#8221; or &amp;#8220;a webpage with a popup&amp;#8221;&amp;#8212;who pray on small
startups without the funds to cover the court costs.  The internet is littered
with examples of bright minds speaking out against the current software patent
situation, and I haven&amp;#8217;t found one yet touting its benefits, or claiming that
it does in fact encourage innovation or accomplish &lt;em&gt;any&lt;/em&gt; of the goals for
which it was originally created.  But it&amp;#8217;s important to remember that we haven&amp;#8217;t
yet had two decades of the &lt;em&gt;internet&lt;/em&gt;, and the software industry isn&amp;#8217;t even
half a century old.  It&amp;#8217;s more than likely that the situation will become a
lot more sane after another half-century or so; I have faith in humanity that
judges around the country will eventually understand the nature of software,
and this familiarity will remove the opportunity for predatory &amp;#8220;patent
trolling&amp;#8221; and the&amp;nbsp;like.&lt;/p&gt;
&lt;p&gt;More&amp;nbsp;information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MP3s are not the devil &amp;lt;http://www.ornery.org/essays/warwatch/2003-09-07-1.html&amp;gt;&lt;/code&gt;_&lt;/li&gt;
&lt;li&gt;&lt;code&gt;The Control of Ideas &amp;lt;http://www.prospect.org/cs/articles?article=the_control_of_ideas&amp;gt;&lt;/code&gt;_&lt;/li&gt;
&lt;li&gt;&lt;code&gt;When patents attack! &amp;lt;http://www.thisamericanlife.org/radio-archives/episode/441/when-patents-attack&amp;gt;&lt;/code&gt;_&lt;/li&gt;
&lt;/ul&gt;            </content>
        </entry>
            <entry>
            <title type="html">The Sleeping Giant</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Feb-22-sleeping-giant.html"/>
            <updated>2013-02-22T00:54:13Z</updated>
            <published>2013-02-22T00:54:13Z</published>
            <id>/blog/2013-Feb-22-sleeping-giant.html</id>
                        <category   scheme="/blog/tags"
                        term="microsoft"
                        label="Microsoft" />
            
            <content type="html">
                                &lt;p&gt;There was a time when Microsoft was the hottest, fastest kid on the block,
dominating every market it entered. Bill Gates, the magnetic visionary, lead
the company with a philosophy that rejected complacency, always striving for
progress and innovation. That was the Microsoft of the 90s. The most recent
decade saw the software giant become complacent, somehow failing to retain the
air of innovation, drive, and novelty. In mobile devices, the Zune and the
Windows phone were relegated to the back seat while Apple and Google drove the
market. Yet, somehow, Microsoft seems to have accomplished the improbable in
the world of technology: a public image reboot. Young people of today see
Microsoft as cooler than it was two years ago, thanks to a strong emphasis on
design and human connectedness in advertising and&amp;nbsp;marketing.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;source &amp;lt;http://www.reuters.com/article/2013/02/21/us-microsoft-poll-idUSBRE91K05P20130221&amp;gt;&lt;/code&gt;_&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Security is for the paranoid</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Feb-14-security-paranoid.html"/>
            <updated>2013-02-14T11:33:58Z</updated>
            <published>2013-02-14T11:33:58Z</published>
            <id>/blog/2013-Feb-14-security-paranoid.html</id>
            
            <content type="html">
                                &lt;p&gt;Through modern media, we are well aware of the prevalence of hackers and
compromised accounts, both on a personal and corporate level. Yet somehow
it&amp;#8217;s still easy to be lulled into security by &lt;span class=&#34;caps&#34;&gt;SSL&lt;/span&gt;, secure routers, and
passwords that Google told me were &amp;#8220;very&amp;nbsp;strong&amp;#8221;.&lt;/p&gt;
&lt;p&gt;The thing about hacking is it&amp;#8217;s not a science; it&amp;#8217;s an exploration. Security
is not like a ball of string to untangle, where there&amp;#8217;s a sure way to solve it
waiting to be found. Security is a suit of armor which can protect you, but
only if coverage is complete. One chink, however, and there&amp;#8217;s the possibility
that some creative hacker will find your weakness and breach your defenses.
Once the initial barrier is down, it depends on your security practices how
easily the intruder can hop from account to account, wreaking havoc with your
private&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;Two days ago I got hacked. Walking home from classes, I found that my gmail
account had send emails with a suspicious-looking link to around 50 people
from my contacts list. I looked around for other damages, but found none; and&lt;br /&gt;
it looked like the account had only been compromised an hour or so earlier. I
quickly changed my account&amp;#8217;s password, thanking my lucky stars that the hacker
hadn&amp;#8217;t locked me out, and sent apology emails to everyone&amp;nbsp;involved.&lt;/p&gt;
&lt;p&gt;How did this happen? It turns out, the biggest liability in computer security 
is summed up by the error code &lt;span class=&#34;caps&#34;&gt;PEBKAC&lt;/span&gt;: Problem Exists Between Keyboard And
Chair. Yes, though computers have vulnerabilities, and exploits are constantly
being found for various operating systems and browsers, You are probably the
source of your data&amp;#8217;s vulnerability. In the early days of computing and the
internet, having a password such as &amp;#8220;password&amp;#8221;, &amp;#8220;123456&amp;#8221;, or one&amp;#8217;s own name
was embarrassingly common. Nowadays most serious websites require some amount
of password length and strength, making accounts far less vulnerable to a
brute force attack. But a major issue that persists is password reuse; it 
doesn&amp;#8217;t matter how secure your bank&amp;#8217;s servers are if you use the same password
on a website that has much lower&amp;nbsp;security.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re like me, it may take a break-in to startle you into beefing up your
security. My advice: don&amp;#8217;t wait, because your hacker might not be as
benign as mine&amp;nbsp;was.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">What if Computer Science had been invented by Women?</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Feb-07-what-if-computer-science-had-been-invented-women.html"/>
            <updated>2013-02-07T11:36:49Z</updated>
            <published>2013-02-07T11:36:49Z</published>
            <id>/blog/2013-Feb-07-what-if-computer-science-had-been-invented-women.html</id>
            
            <content type="html">
                                &lt;p&gt;If we want to know why women aren&amp;#8217;t drawn to &lt;span class=&#34;caps&#34;&gt;CS&lt;/span&gt; like they are to other
scientific departments, we have no further to look than the &amp;#8220;typical computer
nerd&amp;#8221;. Since it&amp;#8217;s inception, computer programming has been dominated by
young men whose fascination with computers borders on obsession; early 
startups in the now silicon valley were manned by college kids who ran on
pizza and slept in their cubicles. Why would women want to be a part of that? 
If the culture of computing had &lt;em&gt;begun&lt;/em&gt; with women, it would likely 
be much better structured, cleaner, and less dominated by&amp;nbsp;trial-and-error.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Facebook knows where you live</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Feb-05-facebook-knows-where-you-live.html"/>
            <updated>2013-02-05T11:36:57Z</updated>
            <published>2013-02-05T11:36:57Z</published>
            <id>/blog/2013-Feb-05-facebook-knows-where-you-live.html</id>
                        <category   scheme="/blog/tags"
                        term="facebook"
                        label="Facebook" />
            
            <content type="html">
                                &lt;p&gt;Get ready for Big Brother: Facebook&amp;#8217;s new app &amp;#8220;innovation&amp;#8221; will track your
movements even when you aren&amp;#8217;t using it. Though this might have a few perks
for users, the real winners are in advertising &amp;#8212; marketers would leap at the
chance to take advantage of that kind of information, to make
ultra-personalized ads based on where you go and what you do. But for the
average user, this could usher in the era forecasted by minority report and
1984, where big brother knows where you are at all times, billboards address
you by name, and abuse of privacy is just too easy to pass up. This begs the
question: is such a future inevitable? Can we imagine technological advance
without such deterioration of privacy? Because if we don&amp;#8217;t come up with
something soon, it will no longer be an&amp;nbsp;option.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Original Article (bloomberg.com)&lt;/code&gt;__&lt;/p&gt;
&lt;p&gt;__&amp;nbsp;http://www.bloomberg.com/news/2013-02-04/facebook-is-said-to-create-mobile-location-tracking-app.html&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">North Korea Penetrated by Crowd Sourcing</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Jan-29-north-korea-penetrated-crowd-sourcing.html"/>
            <updated>2013-01-29T21:29:12Z</updated>
            <published>2013-01-29T21:29:12Z</published>
            <id>/blog/2013-Jan-29-north-korea-penetrated-crowd-sourcing.html</id>
            
            <content type="html">
                                &lt;p&gt;North Korea, which since the end of the Korean war has been shut off from the
world and especially technology, is finally being opened up, at least
cartographically; google maps will soon be updated with detail about the
streets and cities of the hermit nation, thanks entirely to user contributions.
This instance joins many others in the recent past showing the sometimes
disruptive power of internet collaboration. Even in a country where internet
access is highly restricted, truth and information eventually find their way
out onto the larger&amp;nbsp;scene.&lt;/p&gt;
&lt;p&gt;Story on&amp;nbsp;NYTimes__&lt;/p&gt;
&lt;p&gt;__&amp;nbsp;http://www.nytimes.com/2013/01/30/world/asia/google-maps-new-target-secretive-north-korea.html?_r=0&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">The Information Age is Killing Original Thought</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Jan-17-information-age-killing-original-thought.html"/>
            <updated>2013-01-17T23:36:08Z</updated>
            <published>2013-01-17T23:36:08Z</published>
            <id>/blog/2013-Jan-17-information-age-killing-original-thought.html</id>
                        <category   scheme="/blog/tags"
                        term="creativity"
                        label="Creativity" />
                        <category   scheme="/blog/tags"
                        term="big data"
                        label="Big Data" />
                        <category   scheme="/blog/tags"
                        term="information age"
                        label="Information Age" />
                        <category   scheme="/blog/tags"
                        term="thought"
                        label="Thought" />
            
            <content type="html">
                                &lt;p&gt;.. figure:: http://farm4.staticflickr.com/3123/2553692300_acd80eff45_m.jpg
  :figclass:&amp;nbsp;align-right&lt;/p&gt;
&lt;p&gt;When my father was growing                   &lt;br /&gt;
up, he didn&amp;#8217;t have wikipedia or google to answer every question. Why is the                   &lt;br /&gt;
sky blue? Today you would just look it up on wikipedia. He actually had to                    &lt;br /&gt;
&lt;em&gt;think&lt;/em&gt; if he wanted a reasonable answer. And it&amp;#8217;s the act and effort of
reasoning about the small things as a child that lead to skills in critical
thinking as an adult. The children of today have instantaneous access to such                 &lt;br /&gt;
a glut of information that it provides the illusion that &amp;#8220;someone else has
thought about it so I don&amp;#8217;t have to&amp;#8221;; we have become consumers, not producers,                &lt;br /&gt;
of information. As a result we are losing the ability to think critically and                 &lt;br /&gt;
to turn that information into knowledge and&amp;nbsp;wisdom.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Data &lt; Information &lt; Knowledge &lt; Wisdom</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Jan-17-data-information-knowledge-wisdom.html"/>
            <updated>2013-01-17T02:13:30Z</updated>
            <published>2013-01-17T02:13:30Z</published>
            <id>/blog/2013-Jan-17-data-information-knowledge-wisdom.html</id>
                        <category   scheme="/blog/tags"
                        term="knowledge"
                        label="Knowledge" />
                        <category   scheme="/blog/tags"
                        term="learning"
                        label="Learning" />
                        <category   scheme="/blog/tags"
                        term="philosophy"
                        label="Philosophy" />
                        <category   scheme="/blog/tags"
                        term="enlightenment"
                        label="Enlightenment" />
            
            <content type="html">
                                &lt;p&gt;.. figure:: http://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Jean-Jacques_Rousseau_%28painted_portrait%29.jpg/220px-Jean-Jacques_Rousseau_%28painted_portrait%29.jpg
   :figclass: align-right&amp;nbsp;med-img&lt;/p&gt;
&lt;p&gt;In pondering the issues raised by the advent of big data and public access to vast stores of information, I am reminded of Rousseau&amp;#8217;s book &lt;em&gt;Emilie&lt;/em&gt; in which he describes how best to raise a hypothetical child of the same name. Speaking of the acquisition of knowledge, he&amp;nbsp;writes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;When I see a man in love with knowledge, ... he seems to me like a child gathering shells on the sea-shore, now picking them up, then throwing them aside for others which he sees beyond them, then taking them again, till overwhelmed by their number and unable to choose between them, he flings them all away and returns empty handed.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It seems all too easy to jet-ski along the surface of the great ocean of knowledge available to us &amp;#8212; flitting through wikipedia articles, browsing blog posts and twitter feeds &amp;#8212; and in the process fail to ever descend below the superficial to where knowledge, understanding, and wisdom are to be found. Speeding through topics and picking up bits of trivia might be enjoyable and give us the illusion of being well-informed, but it short-changes us of the abiding satisfaction and joy that come from comprehension and critical&amp;nbsp;analysis.&lt;/p&gt;
&lt;p&gt;The age of consumerism has made us not only consumers of physical products but also of ideas, opinions, and information. Due to the glut of information, we have largely forgotten how to procure our own through independent critical&amp;nbsp;thought.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Vanilla Android Music Player</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2012-Aug-11-vanilla-android-music-player.html"/>
            <updated>2012-08-11T14:49:10Z</updated>
            <published>2012-08-11T14:49:10Z</published>
            <id>/blog/2012-Aug-11-vanilla-android-music-player.html</id>
                        <category   scheme="/blog/tags"
                        term="android"
                        label="Android" />
                        <category   scheme="/blog/tags"
                        term="vanilla"
                        label="Vanilla" />
                        <category   scheme="/blog/tags"
                        term="app"
                        label="App" />
                        <category   scheme="/blog/tags"
                        term="open-source"
                        label="Open-Source" />
            
            <content type="html">
                                &lt;p&gt;.. image:: http://jaredforsyth.com/media/uploads/screenshots/vanilla/nowplaying_h.png
   :width:&amp;nbsp;40%&lt;/p&gt;
&lt;p&gt;So I just got myself an &lt;span class=&#34;caps&#34;&gt;LG&lt;/span&gt;-G2x android smartphone [running eaglesblood &lt;span class=&#34;caps&#34;&gt;ICS&lt;/span&gt; :)] and I&amp;#8217;ve been trying a lot of things out. One thing that I really wanted to get right was a music player app. I looked around at the many reviews of the (mostly adware or freemium) popular music apps, thinking to myself &amp;#8220;there&amp;#8217;s gotta be a really good, free, even open-source music player. somewhere&amp;#8221;. well, I stumbled across &amp;#8220;vanilla&amp;#8221; early on, but was scared away by the somewhat primitive and downright clucky looking graphics [see the screenshots on &lt;code&gt;google play &amp;lt;https://play.google.com/store/apps/details?id=org.kreed.vanilla&amp;gt;&lt;/code&gt;&lt;em&gt; or &lt;code&gt;AndroidOpenSourceApplications &amp;lt;http://www.androidopensourceapplications.com/content/vanilla-music-player&amp;gt;&lt;/code&gt;&lt;/em&gt; ]. But, after more searching and finding nothing promising, I decided to give it a&amp;nbsp;spin.&lt;/p&gt;
&lt;p&gt;So I grabbed &lt;code&gt;the source &amp;lt;https://github.com/kreed/vanilla/&amp;gt;&lt;/code&gt;_ from github, compiled it and gave it a ride on my g2x, and&amp;#8230;it&amp;#8217;s beautiful! At least, much more than the aformentioned screenshots would attest. It looks really sharp, actually blending in perfectly with the &lt;span class=&#34;caps&#34;&gt;UI&lt;/span&gt;, and packing some surprise goodies like an &lt;em&gt;integrated file-browser&lt;/em&gt; and &lt;em&gt;lock screen support&lt;/em&gt;. Granted, the lock screen could use some tweaking, but that&amp;#8217;s what &lt;code&gt;fork&lt;/code&gt; and &lt;code&gt;pull-request&lt;/code&gt; are&amp;nbsp;for!&lt;/p&gt;
&lt;p&gt;Anyway, to save the next guy some trouble, I&amp;#8217;ve taken some screenshots of this app in action. (running at commit &lt;code&gt;496d28411a &amp;lt;https://github.com/kreed/vanilla/commit/496d28411acc82c032e20bbf402dee1a901cbe01&amp;gt;&lt;/code&gt;_&amp;nbsp;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[update]:&lt;/strong&gt; looks like the apk on google play &lt;em&gt;really is&lt;/em&gt; as old as Jan 2011&amp;#8230;so for anyonw that wants it, here&amp;#8217;s the build I made &amp;#8212; for Ice Cream Sandwich [warning: I have very little knowledge of these things. so it might be buggy on &lt;span class=&#34;caps&#34;&gt;GB&lt;/span&gt;, etc&amp;#8230; I&amp;#8217;m still&amp;nbsp;learning]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Download apk &amp;lt;http://jaredforsyth.com/media/downloads/VanillaMusic.apk&amp;gt;&lt;/code&gt;_&lt;/p&gt;
&lt;p&gt;.. image::&amp;nbsp;http://qr.kaywa.com/img.php?s=4&amp;amp;d=http%3A%2F%2Fjaredforsyth.com%2Fmedia%2Fdownloads%2FVanillaMusic.apk&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;caps&#34;&gt;ALSO&lt;/span&gt;: I made no changes to the source code so far, this is all kreed&amp;#8217;s&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;.. image:: http://jaredforsyth.com/media/uploads/screenshots/vanilla/nowplaying.png
   :width: 40%
.. image:: http://jaredforsyth.com/media/uploads/screenshots/vanilla/nowplaying_h.png
   :width: 40%
.. image:: http://jaredforsyth.com/media/uploads/screenshots/vanilla/list_albums.png
   :width: 40%
.. image:: http://jaredforsyth.com/media/uploads/screenshots/vanilla/list_artists.png
   :width: 40%
.. image:: http://jaredforsyth.com/media/uploads/screenshots/vanilla/list_songs.png
   :width: 40%
.. image:: http://jaredforsyth.com/media/uploads/screenshots/vanilla/list_files.png
   :width:&amp;nbsp;40%&lt;/p&gt;
&lt;p&gt;Lock screens (grid and&amp;nbsp;slide)&lt;/p&gt;
&lt;p&gt;.. image:: http://jaredforsyth.com/media/uploads/screenshots/vanilla/lock_grid.png
   :width: 40%
.. image:: http://jaredforsyth.com/media/uploads/screenshots/vanilla/lock_slide.png
   :width:&amp;nbsp;40%&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">A Happy Post</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/happy-post.html"/>
            <updated>2011-02-01T10:00:00Z</updated>
            <published>2011-02-01T10:00:00Z</published>
            <id>/blog/happy-post.html</id>
                        <category   scheme="/blog/tags"
                        term="happy"
                        label="Happy" />
                        <category   scheme="/blog/tags"
                        term="thoughts"
                        label="Thoughts" />
            
            <content type="html">
                                &lt;p&gt;&lt;img alt=&#34;Airport&#34; src=&#34;/media/images/airport.png&#34; /&gt;
Lady Malvern was a hearty, happy, healthy, overpowering sort of dashed female,
not so very tall but making up for it by measuring about six feet from the
&lt;span class=&#34;caps&#34;&gt;O.P.&lt;/span&gt; to the Prompt Side.
She fitted into my biggest arm-chair as if it had
been built round her by someone who knew they were wearing arm-chairs tight
about the hips that season. She had bright, bulging eyes and a lot of yellow
hair, and when she spoke she showed about fifty-seven front teeth. She was one
of those women who kind of numb a fellow&amp;#8217;s faculties. She made me feel as if I
were ten years old and had been brought into the drawing-room in my Sunday
clothes to say how-d&amp;#8217;you-do. Altogether by no means the sort of thing a
chappie would wish to find in his sitting-room before&amp;nbsp;breakfast.&lt;/p&gt;
&lt;p&gt;Motty, the son, was about twenty-three, tall and thin and meek-looking. He had
the same yellow hair as his mother, but he wore it plastered down and parted
in the middle. His eyes bulged, too, but they weren&amp;#8217;t bright. They were a dull
grey with pink rims. His chin gave up the struggle about half-way down, and he
didn&amp;#8217;t appear to have any eyelashes. A mild, furtive, sheepish sort of
blighter, in&amp;nbsp;short.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Awfully glad to see you,&amp;#8221; I said. &amp;#8220;So you&amp;#8217;ve popped over, eh? Making a long
stay in&amp;nbsp;America?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;About a month. Your aunt gave me your address and told me to be sure and call
on&amp;nbsp;you.&amp;#8221;&lt;/p&gt;
&lt;p&gt;I was glad to hear this, as it showed that Aunt Agatha was beginning to come
round a bit. There had been some unpleasantness a year before, when she had
sent me over to New York to disentangle my Cousin Gussie from the clutches of
a girl on the music-hall stage. When I tell you that by the time I had
finished my operations, Gussie had not only married the girl but had gone on
the stage himself, and was doing well, you&amp;#8217;ll understand that Aunt Agatha was
upset to no small extent. I simply hadn&amp;#8217;t dared go back and face her, and it
was a relief to find that time had healed the wound and all that sort of thing
enough to make her tell her pals to look me up. What I mean is, much as I
liked America, I didn&amp;#8217;t want to have England barred to me for the rest of my
natural; and, believe me, England is a jolly sight too small for anyone to
live in with Aunt Agatha, if she&amp;#8217;s really on the warpath. So I braced on
hearing these kind words and smiled genially on the&amp;nbsp;assemblage.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Your aunt said that you would do anything that was in your power to be of
assistance to&amp;nbsp;us.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Rather? Oh, rather!&amp;nbsp;Absolutely!&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Thank you so much. I want you to put dear Motty up for a little&amp;nbsp;while.&amp;#8221;&lt;/p&gt;
&lt;p&gt;I didn&amp;#8217;t get this for a&amp;nbsp;moment.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Put him up? For my&amp;nbsp;clubs?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;No, no! Darling Motty is essentially a home bird. Aren&amp;#8217;t you, Motty&amp;nbsp;darling?&amp;#8221;&lt;/p&gt;
&lt;p&gt;Motty, who was sucking the knob of his stick, uncorked&amp;nbsp;himself.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Yes, mother,&amp;#8221; he said, and corked himself up&amp;nbsp;again.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;I should not like him to belong to clubs. I mean put him up here. Have him to
live with you while I am&amp;nbsp;away.&amp;#8221;&lt;/p&gt;
&lt;p&gt;These frightful words trickled out of her like honey. The woman simply didn&amp;#8217;t
seem to understand the ghastly nature of her proposal. I gave Motty the swift
east-to-west. He was sitting with his mouth nuzzling the stick, blinking at
the wall. The thought of having this planted on me for an indefinite period
appalled me. Absolutely appalled me, don&amp;#8217;t you know. I was just starting to
say that the shot wasn&amp;#8217;t on the board at any price, and that the first sign
Motty gave of trying to nestle into my little home I would yell for the
police, when she went on, rolling placidly over me, as it&amp;nbsp;were.&lt;/p&gt;
&lt;p&gt;There was something about this woman that sapped a chappie&amp;#8217;s&amp;nbsp;will-power.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;I am leaving New York by the midday train, as I have to pay a visit to
Sing-Sing prison. I am extremely interested in prison conditions in America.
After that I work my way gradually across to the coast, visiting the points of
interest on the journey. You see, Mr. Wooster, I am in America principally on
business. No doubt you read my book, India and the Indians? My publishers are
anxious for me to write a companion volume on the United States. I shall not
be able to spend more than a month in the country, as I have to get back for
the season, but a month should be ample. I was less than a month in India, and
my dear friend Sir Roger Cremorne wrote his America from Within after a stay
of only two weeks. I should love to take dear Motty with me, but the poor boy
gets so sick when he travels by train. I shall have to pick him up on my&amp;nbsp;return.&amp;#8221;&lt;/p&gt;
&lt;p&gt;From where I sat I could see Jeeves in the dining-room, laying the
breakfast-table. I wished I could have had a minute with him alone. I felt
certain that he would have been able to think of some way of putting a stop to
this&amp;nbsp;woman.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;It will be such a relief to know that Motty is safe with you, Mr. Wooster. I
know what the temptations of a great city are. Hitherto dear Motty has been
sheltered from them. He has lived quietly with me in the country. I know that
you will look after him carefully, Mr. Wooster. He will give very little
trouble.&amp;#8221; She talked about the poor blighter as if he wasn&amp;#8217;t there. Not that
Motty seemed to mind. He had stopped chewing his walking-stick and was sitting
there with his mouth open. &amp;#8220;He is a vegetarian and a teetotaller and is
devoted to reading. Give him a nice book and he will be quite contented.&amp;#8221; She
got up. &amp;#8220;Thank you so much, Mr. Wooster! I don&amp;#8217;t know what I should have done
without your help. Come, Motty! We have just time to see a few of the sights
before my train goes. But I shall have to rely on you for most of my
information about New York, darling. Be sure to keep your eyes open and take
notes of your impressions! It will be such a help. Good-bye, Mr. Wooster. I
will send Motty back early in the&amp;nbsp;afternoon.&amp;#8221;&lt;/p&gt;
&lt;p&gt;They went out, and I howled for&amp;nbsp;Jeeves.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Jeeves! What about&amp;nbsp;it?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Sir?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;What&amp;#8217;s to be done? You heard it all, didn&amp;#8217;t you? You were in the dining-room
most of the time. That pill is coming to stay&amp;nbsp;here.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Pill,&amp;nbsp;sir?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;The&amp;nbsp;excrescence.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;I beg your pardon,&amp;nbsp;sir?&amp;#8221;&lt;/p&gt;
&lt;p&gt;I looked at Jeeves sharply. This sort of thing wasn&amp;#8217;t like him. It was as if
he were deliberately trying to give me the pip. Then I understood. The man was
really upset about that tie. He was trying to get his own&amp;nbsp;back.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Lord Pershore will be staying here from to-night, Jeeves,&amp;#8221; I said&amp;nbsp;coldly.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Very good, sir. Breakfast is ready,&amp;nbsp;sir.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.gutenberg.org/cache/epub/8164/pg8164.html&#34;&gt;My Man Jeeves by &lt;span class=&#34;caps&#34;&gt;PG&lt;/span&gt;&amp;nbsp;Wodehouse&lt;/a&gt;&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">An Angry Post</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/angry-post.html"/>
            <updated>2011-01-01T10:00:00Z</updated>
            <published>2011-01-01T10:00:00Z</published>
            <id>/blog/angry-post.html</id>
                        <category   scheme="/blog/tags"
                        term="angry"
                        label="Angry" />
                        <category   scheme="/blog/tags"
                        term="thoughts"
                        label="Thoughts" />
            
            <content type="html">
                                &lt;p&gt;&lt;img alt=&#34;Airport&#34; src=&#34;/media/images/airport.png&#34; /&gt;
To complete the character-study of Mr. Worple, he was a man of extremely
uncertain temper, and his general tendency was to think that Corky was a poor
chump and that whatever step he took in any direction on his own account, was
just another proof of his innate idiocy. I should imagine Jeeves feels very
much the same about me.
So when Corky trickled into my apartment one afternoon, shooing a girl in
front of him, and said, &amp;#8220;Bertie, I want you to meet my fiancée, Miss Singer,&amp;#8221;
the aspect of the matter which hit me first was precisely the one which he had
come to consult me about. The very first words I spoke were, &amp;#8220;Corky, how about
your&amp;nbsp;uncle?&amp;#8221;&lt;/p&gt;
&lt;p&gt;The poor chap gave one of those mirthless laughs. He was looking anxious and
worried, like a man who has done the murder all right but can&amp;#8217;t think what the
deuce to do with the&amp;nbsp;body.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;We&amp;#8217;re so scared, Mr. Wooster,&amp;#8221; said the girl. &amp;#8220;We were hoping that you might
suggest a way of breaking it to&amp;nbsp;him.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Muriel Singer was one of those very quiet, appealing girls who have a way of
looking at you with their big eyes as if they thought you were the greatest
thing on earth and wondered that you hadn&amp;#8217;t got on to it yet yourself. She sat
there in a sort of shrinking way, looking at me as if she were saying to
herself, &amp;#8220;Oh, I do hope this great strong man isn&amp;#8217;t going to hurt me.&amp;#8221; She
gave a fellow a protective kind of feeling, made him want to stroke her hand
and say, &amp;#8220;There, there, little one!&amp;#8221; or words to that effect. She made me feel
that there was nothing I wouldn&amp;#8217;t do for her. She was rather like one of those
innocent-tasting American drinks which creep imperceptibly into your system so
that, before you know what you&amp;#8217;re doing, you&amp;#8217;re starting out to reform the
world by force if necessary and pausing on your way to tell the large man in
the corner that, if he looks at you like that, you will knock his head off.
What I mean is, she made me feel alert and dashing, like a jolly old
knight-errant or something of that kind. I felt that I was with her in this
thing to the&amp;nbsp;limit.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;I don&amp;#8217;t see why your uncle shouldn&amp;#8217;t be most awfully bucked,&amp;#8221; I said to
Corky. &amp;#8220;He will think Miss Singer the ideal wife for&amp;nbsp;you.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Corky declined to cheer&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;You don&amp;#8217;t know him. Even if he did like Muriel he wouldn&amp;#8217;t admit it. That&amp;#8217;s
the sort of pig-headed guy he is. It would be a matter of principle with him
to kick. All he would consider would be that I had gone and taken an important
step without asking his advice, and he would raise Cain automatically. He&amp;#8217;s
always done&amp;nbsp;it.&amp;#8221;&lt;/p&gt;
&lt;p&gt;I strained the old bean to meet this&amp;nbsp;emergency.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;You want to work it so that he makes Miss Singer&amp;#8217;s acquaintance without
knowing that you know her. Then you come&amp;nbsp;along&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;But how can I work it that&amp;nbsp;way?&amp;#8221;&lt;/p&gt;
&lt;p&gt;I saw his point. That was the&amp;nbsp;catch.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;There&amp;#8217;s only one thing to do,&amp;#8221; I&amp;nbsp;said.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;What&amp;#8217;s&amp;nbsp;that?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Leave it to&amp;nbsp;Jeeves.&amp;#8221;&lt;/p&gt;
&lt;p&gt;And I rang the&amp;nbsp;bell.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Sir?&amp;#8221; said Jeeves, kind of manifesting himself. One of the rummy things about
Jeeves is that, unless you watch like a hawk, you very seldom see him come
into a room. He&amp;#8217;s like one of those weird chappies in India who dissolve
themselves into thin air and nip through space in a sort of disembodied way
and assemble the parts again just where they want them. I&amp;#8217;ve got a cousin
who&amp;#8217;s what they call a Theosophist, and he says he&amp;#8217;s often nearly worked the
thing himself, but couldn&amp;#8217;t quite bring it off, probably owing to having fed
in his boyhood on the flesh of animals slain in anger and&amp;nbsp;pie.&lt;/p&gt;
&lt;p&gt;The moment I saw the man standing there, registering respectful attention, a
weight seemed to roll off my mind. I felt like a lost child who spots his
father in the offing. There was something about him that gave me&amp;nbsp;confidence.&lt;/p&gt;
&lt;p&gt;Jeeves is a tallish man, with one of those dark, shrewd faces. His eye gleams
with the light of pure&amp;nbsp;intelligence.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Jeeves, we want your&amp;nbsp;advice.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Very good,&amp;nbsp;sir.&amp;#8221;&lt;/p&gt;
&lt;p&gt;I boiled down Corky&amp;#8217;s painful case into a few well-chosen&amp;nbsp;words.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;So you see what it amount to, Jeeves. We want you to suggest some way by
which Mr. Worple can make Miss Singer&amp;#8217;s acquaintance without getting on to the
fact that Mr. Corcoran already knows her.&amp;nbsp;Understand?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Perfectly,&amp;nbsp;sir.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Well, try to think of&amp;nbsp;something.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;I have thought of something already,&amp;nbsp;sir.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;You&amp;nbsp;have!&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;The scheme I would suggest cannot fail of success, but it has what may seem
to you a drawback, sir, in that it requires a certain financial&amp;nbsp;outlay.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;He means,&amp;#8221; I translated to Corky, &amp;#8220;that he has got a pippin of an idea, but
it&amp;#8217;s going to cost a&amp;nbsp;bit.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Naturally the poor chap&amp;#8217;s face dropped, for this seemed to dish the whole
thing. But I was still under the influence of the girl&amp;#8217;s melting gaze, and I
saw that this was where I started in as a&amp;nbsp;knight-errant.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;You can count on me for all that sort of thing, Corky,&amp;#8221; I said. &amp;#8220;Only too
glad. Carry on,&amp;nbsp;Jeeves.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;I would suggest, sir, that Mr. Corcoran take advantage of Mr. Worple&amp;#8217;s
attachment to&amp;nbsp;ornithology.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;How on earth did you know that he was fond of&amp;nbsp;birds?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.gutenberg.org/cache/epub/8164/pg8164.html&#34;&gt;My Man Jeeves by &lt;span class=&#34;caps&#34;&gt;PG&lt;/span&gt;&amp;nbsp;Wodehouse&lt;/a&gt;&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">A Sad Post</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/sad-post.html"/>
            <updated>2010-12-01T10:00:00Z</updated>
            <published>2010-12-01T10:00:00Z</published>
            <id>/blog/sad-post.html</id>
                        <category   scheme="/blog/tags"
                        term="sad"
                        label="Sad" />
                        <category   scheme="/blog/tags"
                        term="thoughts"
                        label="Thoughts" />
            
            <content type="html">
                                &lt;p&gt;&lt;img alt=&#34;A Dark Image&#34; src=&#34;/media/images/dark.png&#34; /&gt;
I went and dressed sadly. It will show you pretty well how pipped I was when I
tell you that I near as a toucher put on a white tie with a dinner-jacket. I
sallied out for a bit of food more to pass the time than because I wanted it.
It seemed brutal to be wading into the bill of fare with poor old Bicky headed
for the breadline.
When I got back old Chiswick had gone to bed, but Bicky was there, hunched up
in an arm-chair, brooding pretty tensely, with a cigarette hanging out of the
corner of his mouth and a more or less glassy stare in his eyes. He had the
aspect of one who had been soaked with what the newspaper chappies call &amp;#8220;some
blunt&amp;nbsp;instrument.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;This is a bit thick, old thing—what!&amp;#8221; I&amp;nbsp;said.&lt;/p&gt;
&lt;p&gt;He picked up his glass and drained it feverishly, overlooking the fact that it
hadn&amp;#8217;t anything in&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;I&amp;#8217;m done, Bertie!&amp;#8221; he&amp;nbsp;said.&lt;/p&gt;
&lt;p&gt;He had another go at the glass. It didn&amp;#8217;t seem to do him any&amp;nbsp;good.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;If only this had happened a week later, Bertie! My next month&amp;#8217;s money was due
to roll in on Saturday. I could have worked a wheeze I&amp;#8217;ve been reading about
in the magazine advertisements. It seems that you can make a dashed amount of
money if you can only collect a few dollars and start a chicken-farm. Jolly
sound scheme, Bertie! Say you buy a hen—call it one hen for the sake of
argument. It lays an egg every day of the week. You sell the eggs seven for
twenty-five cents. Keep of hen costs nothing. Profit practically twenty-five
cents on every seven eggs. Or look at it another way: Suppose you have a dozen
eggs. Each of the hens has a dozen chickens. The chickens grow up and have
more chickens. Why, in no time you&amp;#8217;d have the place covered knee-deep in hens,
all laying eggs, at twenty-five cents for every seven. You&amp;#8217;d make a fortune.
Jolly life, too, keeping hens!&amp;#8221; He had begun to get quite worked up at the
thought of it, but he slopped back in his chair at this juncture with a good
deal of gloom. &amp;#8220;But, of course, it&amp;#8217;s no good,&amp;#8221; he said, &amp;#8220;because I haven&amp;#8217;t the&amp;nbsp;cash.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;You&amp;#8217;ve only to say the word, you know, Bicky, old&amp;nbsp;top.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Thanks awfully, Bertie, but I&amp;#8217;m not going to sponge on&amp;nbsp;you.&amp;#8221;&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s always the way in this world. The chappies you&amp;#8217;d like to lend money to
won&amp;#8217;t let you, whereas the chappies you don&amp;#8217;t want to lend it to will do
everything except actually stand you on your head and lift the specie out of
your pockets. As a lad who has always rolled tolerably free in the right
stuff, I&amp;#8217;ve had lots of experience of the second class. Many&amp;#8217;s the time, back
in London, I&amp;#8217;ve hurried along Piccadilly and felt the hot breath of the
toucher on the back of my neck and heard his sharp, excited yapping as he
closed in on me. I&amp;#8217;ve simply spent my life scattering largesse to blighters I
didn&amp;#8217;t care a hang for; yet here was I now, dripping doubloons and pieces of
eight and longing to hand them over, and Bicky, poor fish, absolutely on his
uppers, not taking any at any&amp;nbsp;price.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Well, there&amp;#8217;s only one hope,&amp;nbsp;then.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;What&amp;#8217;s&amp;nbsp;that?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Jeeves.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;Sir?&amp;#8221;&lt;/p&gt;
&lt;p&gt;There was Jeeves, standing behind me, full of zeal. In this matter of
shimmering into rooms the chappie is rummy to a degree. You&amp;#8217;re sitting in the
old armchair, thinking of this and that, and then suddenly you look up, and
there he is. He moves from point to point with as little uproar as a jelly
fish. The thing startled poor old Bicky considerably. He rose from his seat
like a rocketing pheasant. I&amp;#8217;m used to Jeeves now, but often in the days when
he first came to me I&amp;#8217;ve bitten my tongue freely on finding him unexpectedly
in my&amp;nbsp;midst.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.gutenberg.org/cache/epub/8164/pg8164.html&#34;&gt;My Man Jeeves by &lt;span class=&#34;caps&#34;&gt;PG&lt;/span&gt;&amp;nbsp;Wodehouse&lt;/a&gt;&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">CodeTalker by example: test!</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-29-codetalker-example-test.html"/>
            <updated>2010-07-29T14:08:10Z</updated>
            <published>2010-07-29T14:08:10Z</published>
            <id>/blog/2010-Jul-29-codetalker-example-test.html</id>
            
            <content type="html">
                                &lt;p&gt;This is the last in a four-part series, in which I demonstrate how to build a
&lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; parser using&amp;nbsp;CodeTalker_:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tokenize_&lt;/li&gt;
&lt;li&gt;parse_&lt;/li&gt;
&lt;li&gt;translate_&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;test!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.. _parse: http://jaredforsyth.com/blog/2010/jul/28/codetalker-example-parse/
.. _tokenize: http://jaredforsyth.com/blog/2010/jul/27/codetalker-example-tokenize/
.. _translate: http://jaredforsyth.com/blog/2010/jul/29/codetalker-example-translate/
.. _CodeTalker:&amp;nbsp;http://jaredforsyth.com/projects/codetalker/&lt;/p&gt;
&lt;p&gt;To get the code for&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; &lt;code&gt;git://github.com/jabapyth/css.git &amp;lt;http://github.com/jabapyth/css/&amp;gt;&lt;/code&gt;_&lt;/p&gt;
&lt;h1&gt;Test!&lt;/h1&gt;
&lt;p&gt;No code is complete (and some would say it&amp;#8217;s broken) without a good amount of
testing, and CodeTalker provides a simple way to test your rules individually,
to ensure the best&amp;nbsp;coverage.&lt;/p&gt;
&lt;p&gt;the tests for our &lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; grammar are contained in &lt;code&gt;tests/grammar.py
&amp;lt;http://github.com/jabapyth/css/blob/master/tests/grammar.py&amp;gt;&lt;/code&gt;_. To run them
(ensure you have py.test installed, then) &lt;code&gt;py.test tests/grammar.py&lt;/code&gt;. Or
just &lt;code&gt;./setup.py test&lt;/code&gt; to run all of&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;codetalker/testing.py
&amp;lt;http://github.com/jabapyth/codetalker/blob/master/codetalker/testing.py#L1&amp;gt;&lt;/code&gt;_
currently only has one function, but it will setup valitation tests for rule&amp;nbsp;parsing.&lt;/p&gt;
&lt;p&gt;Here it is in&amp;nbsp;action:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import css.grammar as grammar
from codetalker import testing

parse_rule = testing.parse_rule(__name__, grammar.grammar)

parse_rule(grammar.class_, (
    &#39;.one&#39;,
    &#39;.green&#39;,
    &#39;.GReEn&#39;,
    &#39;.div&#39;,
    ), (
    &#39;one&#39;,
    ))

parse_rule(grammar.simple_selector, ( # should pass
    &#39;div&#39;,
    &#39;div#some&#39;,
    &#39;div#one.green&#39;,
    &#39;div.frown&#39;,
    &#39;ul.cheese:first-child&#39;,
    &#39;li.one.two.three&#39;,
    &#39;a#b.c.d:last-child&#39;,
    ), (                              # should fail
    &#39;one&#39;,
    &#39;div# and&#39;,
    &#39;div. one&#39;,
    ))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you do that, &lt;code&gt;parse_rule&lt;/code&gt; sets up a verification test for each&amp;nbsp;string.&lt;/p&gt;
&lt;p&gt;To get your very own factory function, call &lt;code&gt;parse_rule = testing.parse_rule(__name__,
the_grammar)&lt;/code&gt; (it needs your module&amp;#8217;s &lt;code&gt;__name__&lt;/code&gt; in order to setup the
functions in your &lt;code&gt;global&lt;/code&gt; namespace, where py.test can recognize and run&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;Then for each rule you want to test, call &lt;code&gt;parse_rule(the_rule,
passing_strings, failing_strings&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This method of incremental testing is really a boon while you are initially
creating your grammar — this way, you don&amp;#8217;t have to complete the grammar
before you test parts of it&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;Now, in addition to just grammar testing, you should have some testing of your
translation as well, but the nature of those tests depends completely on your
specific&amp;nbsp;project.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">CodeTalker by example: translate</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-29-codetalker-example-translate.html"/>
            <updated>2010-07-29T11:54:10Z</updated>
            <published>2010-07-29T11:54:10Z</published>
            <id>/blog/2010-Jul-29-codetalker-example-translate.html</id>
            
            <content type="html">
                                &lt;p&gt;This is the third in a four-part series, in which I demonstrate how to build a
&lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; parser using&amp;nbsp;CodeTalker_:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tokenize_&lt;/li&gt;
&lt;li&gt;parse_&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;translate&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test!&lt;/code&gt;_&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.. _parse: http://jaredforsyth.com/blog/2010/jul/28/codetalker-example-parse/
.. _tokenize: http://jaredforsyth.com/blog/2010/jul/27/codetalker-example-tokenize/
.. _test!:&amp;nbsp;http://jaredforsyth.com/blog/2010/jul/29/codetalker-example-test/&lt;/p&gt;
&lt;p&gt;.. _CodeTalker:&amp;nbsp;http://jaredforsyth.com/projects/codetalker/&lt;/p&gt;
&lt;p&gt;.. _compiler-compiler:&amp;nbsp;http://en.wikipedia.org/wiki/Compiler-compiler&lt;/p&gt;
&lt;p&gt;To get the code for&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; &lt;code&gt;git://github.com/jabapyth/css.git &amp;lt;http://github.com/jabapyth/css/&amp;gt;&lt;/code&gt;_&lt;/p&gt;
&lt;h1&gt;Translation&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;[for the impatient, here&amp;#8217;s the&lt;/em&gt; &lt;code&gt;final code&lt;/code&gt;_ &lt;em&gt;].&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;.. _final code:&amp;nbsp;http://github.com/jabapyth/css/blob/master/css/translator.py#L1&lt;/p&gt;
&lt;p&gt;Like everything else in CodeTalker, translation is mean to be straightforward;
you have an abstract syntax tree, which is cool, but what you really want
is&amp;#8230;in this case, an object which represents a stylesheet. So you have a
&lt;code&gt;StyleSheet&lt;/code&gt; class and a &lt;code&gt;RuleSet&lt;/code&gt; class, but how do you go from &lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt;
to&amp;nbsp;that?&lt;/p&gt;
&lt;p&gt;In general, you&amp;#8217;ll create one translation rule for each grammar rule.  Here&amp;#8217;s
the code for our &lt;code&gt;stylesheet&lt;/code&gt; rule to refresh your&amp;nbsp;memory.&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def style_sheet(rule):                              
    rule | ([charset], star(import_), star(section))
    rule.astAttrs = {                               
            &#39;charset&#39;: charset,                     
            &#39;imports&#39;: [import_],                   
            &#39;sections&#39;: [section],                  
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here&amp;#8217;s what it takes to translate&amp;nbsp;it:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@t.translates(ast.StyleSheet)
def stylesheet(node):
    ss = StyleSheet()
    if node.charset is not None:
        ss.charset = t.translate(node.charset)
    ss.imports = list((imp.source, imp.media) for imp in node.imports)
    ss.rules = []
    for section in node.sections:
        if isinstance(section, ast.Ruleset): # right now I&#39;m not dealing
                                             # with other kinds of sections (media, page, font_face)
            rule = t.translate(section)
            if rule is not None:
                ss.rules.append(rule)
    return ss
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the object, populate it with the &lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt; node, and then return it. And
register the function w/ the translator&amp;nbsp;object.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">CodeTalker by example: parse</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-28-codetalker-example-parse.html"/>
            <updated>2010-07-28T09:41:59Z</updated>
            <published>2010-07-28T09:41:59Z</published>
            <id>/blog/2010-Jul-28-codetalker-example-parse.html</id>
            
            <content type="html">
                                &lt;p&gt;This is the second in a four-part series, in which I demonstrate how to build a
&lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; parser using&amp;nbsp;CodeTalker_:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tokenize_&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;parse&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;translate_&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test!&lt;/code&gt;_&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.. _tokenize: http://jaredforsyth.com/blog/2010/jul/27/codetalker-example-tokenize/
.. _translate: http://jaredforsyth.com/blog/2010/jul/29/codetalker-example-translate/
.. _test!:&amp;nbsp;http://jaredforsyth.com/blog/2010/jul/29/codetalker-example-test/&lt;/p&gt;
&lt;p&gt;.. _CodeTalker:&amp;nbsp;http://jaredforsyth.com/projects/codetalker/&lt;/p&gt;
&lt;p&gt;.. _compiler-compiler:&amp;nbsp;http://en.wikipedia.org/wiki/Compiler-compiler&lt;/p&gt;
&lt;p&gt;To get the code for&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; &lt;code&gt;git://github.com/jabapyth/css.git &amp;lt;http://github.com/jabapyth/css/&amp;gt;&lt;/code&gt;_&lt;/p&gt;
&lt;h1&gt;Parsing&lt;/h1&gt;
&lt;p&gt;In this section we actually define the grammar and the &lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt; attributes.
Fortunately for someone has already gone to the trouble of specifying &lt;span class=&#34;caps&#34;&gt;CSS2&lt;/span&gt; as
a &lt;span class=&#34;caps&#34;&gt;CFG&lt;/span&gt;, and the process of transforming their &lt;span class=&#34;caps&#34;&gt;EBNF&lt;/span&gt; to CodeTalker is relatively&amp;nbsp;straight-forward.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[for the impatient, you can just look at the&lt;/em&gt; &lt;code&gt;final code&lt;/code&gt;_ &lt;em&gt;].&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;.. _final code:&amp;nbsp;http://github.com/jabapyth/css/blob/master/css/grammar.py&lt;/p&gt;
&lt;p&gt;I should mention that &lt;strong&gt;&lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; is an interesting case, as far as grammars go&lt;/strong&gt;.
With its case-insensitivity, ambiguous tokens (&lt;code&gt;#FFF&lt;/code&gt; could either be a
color or a node id depending on the placement), and permissive error handling
(you&amp;#8217;re supposed to &amp;#8220;just ignore anything you don&amp;#8217;t understand&amp;#8221;), it proves
an interesting challange for a world which usually avoids ambiguity and spits
out a &amp;#8220;Syntax Error&amp;#8221; at the first sign of&amp;nbsp;trouble.&lt;/p&gt;
&lt;h2&gt;Confession&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;But&lt;/em&gt; before we begin the main grammar, I have to address an aspect of &lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; that I
conveniently failed to mention during the tokenization stage; &lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; identifiers
&lt;strong&gt;can contain a hyphen&lt;/strong&gt;, and therefore aren&amp;#8217;t fully covered by the baked-in
&lt;span class=&#34;caps&#34;&gt;ID&lt;/span&gt;&amp;nbsp;token.&lt;/p&gt;
&lt;p&gt;It can&amp;#8217;t even be fixed by using the &lt;code&gt;idchars&lt;/code&gt; option, because then a single
hyphen could be considered an &lt;span class=&#34;caps&#34;&gt;ID&lt;/span&gt;, which wouldn&amp;#8217;t work&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;Now, in my first version of this code, I just used a&amp;nbsp;regexp &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;``(-\w+)+|\w+(-\w+)*``
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but for performance reasons, I chose to handle this
special aspect of IDs in a grammar rule. So here it&amp;nbsp;is:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def cssid(rule):
    ids = ID, COLOR, NODE_NAME, UNIT
    rule | plus(&#39;-&#39;, _or(*ids)) | (_or(*ids), star(&#39;-&#39;, _or(*ids)))
    rule.dont_ignore = True
    rule.astAttrs = {&#39;parts&#39;: (SYMBOL, ) + ids}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;..&amp;nbsp;yeah*&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ids&lt;/code&gt; variable is a list of all tokens that could concievably match
&lt;em&gt;part&lt;/em&gt; of a token; e.g. &lt;code&gt;green-div-baz&lt;/code&gt; would be tokenized &lt;code&gt;[COLOR, SYMBOL,
NODE_NAME, SYMBOL, ID]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Also of note is the &lt;code&gt;dont_ignore&lt;/code&gt; flag; normally, whitespace, newlines, and
comments are ignored while parsing grammar rules (for this grammar, anyway),
which is the behavior you&amp;#8217;d expect. For this one rule, however, we don&amp;#8217;t want&amp;nbsp;to.&lt;/p&gt;
&lt;h2&gt;Grammar&amp;nbsp;Rules&lt;/h2&gt;
&lt;p&gt;Aaaand on to the normal stuff. Here&amp;#8217;s the &lt;code&gt;stylesheet&lt;/code&gt; rule (which will be
our starting&amp;nbsp;rule):&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def style_sheet(rule):
    rule | ([charset], star(import_), star(section))
    rule.astAttrs = {
            &#39;charset&#39;: charset,
            &#39;imports&#39;: [import_],
            &#39;sections&#39;: [section],
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty normal. (if this looks confusing to you, take a look at the &lt;code&gt;CodeTalker
reference&lt;/code&gt;_)&lt;/p&gt;
&lt;p&gt;.. _CodeTalker reference:&amp;nbsp;http://jaredforsyth.com/blog/2010/jul/26/only-codetalker-introduction-youll-ever-need/&lt;/p&gt;
&lt;p&gt;But I won&amp;#8217;t bore you with the details — you could just look at &lt;code&gt;the code&lt;/code&gt;__ for&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;__ &lt;code&gt;final code&lt;/code&gt;_&lt;/p&gt;
&lt;p&gt;Here are some&amp;nbsp;highlights:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def charset(rule):
    rule | (no_ignore(&#39;@&#39;, &#39;charset&#39;), _or(STRING, SSTRING), &#39;;&#39;)
    rule.astAttrs = {
        &#39;charset&#39;:{&#39;type&#39;:[STRING, SSTRING], &#39;single&#39;:True}
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;no_ignore&lt;/code&gt; function indicates that, during the parsing of this
sequence no tokens should be ignored. It&amp;#8217;s like the &lt;code&gt;dont_ignore&lt;/code&gt; rule flag,
but for a&amp;nbsp;sequence.&lt;/p&gt;
&lt;h2&gt;Permissive&amp;nbsp;Syntax&lt;/h2&gt;
&lt;p&gt;In order to address the &lt;strong&gt;just ignore any syntax errors, and do your best&lt;/strong&gt;
&lt;code&gt;rule of CSS parsing
&amp;lt;http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#parsing-errors&amp;gt;&lt;/code&gt;_, I
made an addition to the &lt;code&gt;declaration&lt;/code&gt; rule.&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def declaration(rule):
    rule | (cssid, &#39;:&#39;, plus(value), [important], &#39;;&#39;)
    rule | (plus(_not(_or(&#39;;&#39;, &#39;}&#39;))), &#39;;&#39;)
    rule.astAttrs = {
        &#39;property&#39;:cssid,
        &#39;values&#39;:[value],
        &#39;important&#39;:important,
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essentially, &amp;#8220;first try to make some sense of it, and if that fails, consume
tokens up to the next &amp;#8216;;&amp;#8217; or &amp;#8216;}&amp;#8217;&amp;#8221;. In the second case, the &lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt; attributes will
be&amp;nbsp;None/empty.&lt;/p&gt;
&lt;p&gt;Anyway, I think that pretty much sums up what I wanted to focus on. Any
questions? comments? Shakespeare&amp;nbsp;quotations?&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">CodeTalker by example: tokenize</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-27-codetalker-example-tokenize.html"/>
            <updated>2010-07-27T16:33:48Z</updated>
            <published>2010-07-27T16:33:48Z</published>
            <id>/blog/2010-Jul-27-codetalker-example-tokenize.html</id>
            
            <content type="html">
                                &lt;p&gt;This is the first in a four-part series, in which I demonstrate how to build a
&lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; parser using&amp;nbsp;CodeTalker_:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tokenize&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;parse_&lt;/li&gt;
&lt;li&gt;translate_&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test!&lt;/code&gt;_&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.. _parse: http://jaredforsyth.com/blog/2010/jul/28/codetalker-example-parse/
.. _translate: http://jaredforsyth.com/blog/2010/jul/29/codetalker-example-translate/
.. _test!:&amp;nbsp;http://jaredforsyth.com/blog/2010/jul/29/codetalker-example-test/&lt;/p&gt;
&lt;p&gt;To get the code for&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; &lt;code&gt;git://github.com/jabapyth/css.git &amp;lt;http://github.com/jabapyth/css/&amp;gt;&lt;/code&gt;_&lt;/p&gt;
&lt;h2&gt;(background) What is&amp;nbsp;CodeTalker?&lt;/h2&gt;
&lt;p&gt;CodeTalker_ might be described as a &lt;code&gt;compiler-compiler&lt;/code&gt;&lt;em&gt; although that doesn&amp;#8217;t
quite fit. I would probably call it a &amp;#8220;compiler creation library&amp;#8221;, written in
python (with a healthy dose of C for performance). With CodeTalker, I have
&lt;code&gt;written a JSON parser
&amp;lt;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/json.py&amp;gt;&lt;/code&gt;&lt;/em&gt;
in &lt;strong&gt;66 lines of code&lt;/strong&gt; that &lt;code&gt;beats most of the other python-based JSON
parsers around &amp;lt;http://jaredforsyth.com/media/uploads/new_json.html&amp;gt;&lt;/code&gt;_.&lt;/p&gt;
&lt;p&gt;.. _CodeTalker:&amp;nbsp;http://jaredforsyth.com/projects/codetalker/&lt;/p&gt;
&lt;p&gt;.. _compiler-compiler:&amp;nbsp;http://en.wikipedia.org/wiki/Compiler-compiler&lt;/p&gt;
&lt;h2&gt;Tokenizing&lt;/h2&gt;
&lt;p&gt;For reference I will be using the &lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; specification at w3.org, although I will
be deviating somewhat from their suggested&amp;nbsp;tokenization_.&lt;/p&gt;
&lt;p&gt;.. _tokenization:&amp;nbsp;http://www.w3.org/&lt;span class=&#34;caps&#34;&gt;TR&lt;/span&gt;/2008/&lt;span class=&#34;caps&#34;&gt;REC&lt;/span&gt;-&lt;span class=&#34;caps&#34;&gt;CSS2&lt;/span&gt;-20080411/syndata.html#tokenization&lt;/p&gt;
&lt;p&gt;Tokenization in CodeTalker is for the most part taken care of for you — as
tokens don&amp;#8217;t differ too much between languages — but there are some things
that it is useful to&amp;nbsp;customize.&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from codetalker.pgm.tokens import *
import constants
import re

## specified http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#tokenization

class SYMBOL(CharToken):
    chars = &#39;@#-%();{}[].:&amp;gt;+,&#39;

class HTMLCOMMENT(StringToken):
    strings = &#39;&amp;lt;!--&#39;, &#39;--&amp;gt;&#39;

class UNIT(IIdToken):
    strings = &#39;em&#39;, &#39;px&#39;, &#39;pt&#39;, &#39;mm&#39;, &#39;cm&#39;, &#39;rad&#39;, &#39;deg&#39;, &#39;grad&#39;, &#39;in&#39;

class COLOR(IIdToken):
    strings = constants.colors

class NODE_NAME(IIdToken):
    strings = constants.tags

class HEXCOLOR(ReToken):
    rx = re.compile(r&#39;#([\da-fA-F]{6}|[\da-fA-F]{3})&#39;)

the_tokens = [NUMBER, HEXCOLOR, CMCOMMENT, HTMLCOMMENT,
              SYMBOL, UNIT, COLOR, NODE_NAME, STRING,
              SSTRING, ID, WHITE, NEWLINE, ANY]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, I put the tokens in a saparate file from the main grammar, so
I&amp;#8217;ve made a &lt;code&gt;list&lt;/code&gt; of the tokens, &lt;em&gt;in the order I want them&lt;/em&gt;, which can
simply be&amp;nbsp;imported.&lt;/p&gt;
&lt;p&gt;Note that the order of tokens is very important — tokens are matched and
consumed strictly on a first-match basis. Therefore, if you put the &amp;#8220;&lt;span class=&#34;caps&#34;&gt;ANY&lt;/span&gt;&amp;#8221;
token first (which matches any character), none of the other tokens would be&amp;nbsp;used.&lt;/p&gt;
&lt;p&gt;A quick refresher on the Base token&amp;nbsp;types:&lt;/p&gt;
&lt;p&gt;:CharToken:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Match a single char, restricted to those in its ``chars`` attribute.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:StringToken:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Match one of the specified strings.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:IIdToken:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Match one of the specified strings, case-insensitively, but *only* when
that string is followed by a non-id character.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:ReToken:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Use RegEx to match tokens.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like I said; not too much going on&amp;nbsp;here.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Orphan Alert</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-27-orphan-alert.html"/>
            <updated>2010-07-27T15:36:59Z</updated>
            <published>2010-07-27T15:36:59Z</published>
            <id>/blog/2010-Jul-27-orphan-alert.html</id>
            
            <content type="html">
                                &lt;p&gt;In last couple of weeks a few of my projects (most notably &lt;code&gt;vim-debug&lt;/code&gt;&lt;em&gt; and CodeTalker&lt;/em&gt;) have really begun to take off and generate some public&amp;nbsp;interest.&lt;/p&gt;
&lt;p&gt;.. _vim-debug: http://jaredforsyth.com/projects/vim-debug/
.. _CodeTalker:&amp;nbsp;http://jaredforsyth.com/projects/CodeTalker/&lt;/p&gt;
&lt;p&gt;Unfortunately (for the projects), I will be &lt;strong&gt;leaving next week&lt;/strong&gt; to serve an &lt;code&gt;LDS Mission&lt;/code&gt;_ in Germany &lt;strong&gt;for the next two years&lt;/strong&gt;, during which time I will have exactly &lt;em&gt;no time&lt;/em&gt; to pursue various hobbies, including any&amp;nbsp;coding.&lt;/p&gt;
&lt;p&gt;.. _LDS Mission:&amp;nbsp;http://jaredforsyth.com/mission/&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why should you care?&lt;/strong&gt; Well, if anyone has an interest in any of the projects I&amp;#8217;ve got &lt;code&gt;up on github &amp;lt;http://github.com/jabapyth/&amp;gt;&lt;/code&gt;_, I would be happy to add them as a maintainer, allowing them to push updates to my&amp;nbsp;repo.&lt;/p&gt;
&lt;p&gt;Of course, anyone can fork my repos and do whatever they want, but I thought it would be nice to keep things from getting too&amp;nbsp;fractured.&lt;/p&gt;
&lt;p&gt;Feel free to contact me at jared@jaredforsyth.com if you&amp;#8217;re&amp;nbsp;interested.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">The Only CodeTalker Introduction You&#39;ll Ever Need</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-26-only-codetalker-introduction-youll-ever-need.html"/>
            <updated>2010-07-26T17:35:38Z</updated>
            <published>2010-07-26T17:35:38Z</published>
            <id>/blog/2010-Jul-26-only-codetalker-introduction-youll-ever-need.html</id>
            
            <content type="html">
                                &lt;p&gt;Or at least that&amp;#8217;s the idea. I tried to design CodeTalker such that you don&amp;#8217;t
need to pore over pages of &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt; docs&amp;#8230; This document + the example contrib parsers
provided should be enough (let me know if they&amp;nbsp;aren&amp;#8217;t).&lt;/p&gt;
&lt;h2&gt;What is&amp;nbsp;CodeTalker?&lt;/h2&gt;
&lt;p&gt;CodeTalker_ might be described as a &lt;code&gt;compiler-compiler&lt;/code&gt;&lt;em&gt; although that doesn&amp;#8217;t quite fit. I would probably call it a &amp;#8220;compiler creation library&amp;#8221;, written in python (with a healthy dose of C for performance). With CodeTalker, I have &lt;code&gt;written a JSON parser &amp;lt;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/json.py&amp;gt;&lt;/code&gt;&lt;/em&gt; in &lt;strong&gt;66 lines of code&lt;/strong&gt; that &lt;code&gt;beats most of the other python-based JSON parsers around &amp;lt;http://jaredforsyth.com/media/uploads/new_json.html&amp;gt;&lt;/code&gt;_.&lt;/p&gt;
&lt;h2&gt;&amp;#8230;and why would I use&amp;nbsp;it?&lt;/h2&gt;
&lt;p&gt;Currently, if you want to make a parser that recognizes a &lt;code&gt;Context-Free Grammar &amp;lt;http://en.wikipedia.org/wiki/Context-free_grammar&amp;gt;&lt;/code&gt;_, you can &lt;em&gt;hand code it yourself&lt;/em&gt; (which is rediculous for all but the simplest of grammars), or use some sort of assisted parsing library. &lt;span class=&#34;caps&#34;&gt;ANTLR&lt;/span&gt; is one that has been around for a long time. Yacc is another well known&amp;nbsp;solution.&lt;/p&gt;
&lt;p&gt;The cool thing about CodeTalker is that it doesn&amp;#8217;t rely on a specialized syntax for grammar definition &amp;#8212; it&amp;#8217;s all python &amp;#8212; so the grammar can take advantage of specialized &amp;#8220;helper functions&amp;#8221; which can make your grammar much cleaner and more&amp;nbsp;readable.&lt;/p&gt;
&lt;p&gt;The really awesome thing about CodeTalker is that it&amp;#8217;s &lt;em&gt;fast&lt;/em&gt;. Fast to define, test and maintain your grammar (it is python, after all), but &lt;strong&gt;most importantly the parser it produces is&amp;nbsp;fast.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Additionally, I know there&amp;#8217;s no accounting for taste, but I think the way that CodeTalker grammars + translators are laid out are more intuitive than other solutions&amp;#8230;but of course I would; so take a look for&amp;nbsp;yourself.&lt;/p&gt;
&lt;p&gt;.. _CodeTalker:&amp;nbsp;http://jaredforsyth.com/projects/codetalker/&lt;/p&gt;
&lt;p&gt;.. _compiler-compiler:&amp;nbsp;http://en.wikipedia.org/wiki/Compiler-compiler&lt;/p&gt;
&lt;h2&gt;Defining a&amp;nbsp;Grammar&lt;/h2&gt;
&lt;p&gt;Specifying&amp;nbsp;Tokens&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CTokens (built-in, c&amp;nbsp;optimized)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;caps&#34;&gt;STRING&lt;/span&gt; # normal &amp;#8220;&amp;nbsp;string&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;caps&#34;&gt;SSTRING&lt;/span&gt; # single-quoted &amp;#8216;&amp;nbsp;string&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;caps&#34;&gt;TSTRING&lt;/span&gt; # triple-quoted &amp;#8221;&amp;#8217; or &amp;#8220;&amp;#8221;&amp;#8221; pythonic&amp;nbsp;string&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;caps&#34;&gt;CCOMMENT&lt;/span&gt; # c-style comment&amp;nbsp;//&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;caps&#34;&gt;CMCOMMENT&lt;/span&gt; # c-style multiline comment /*&lt;em&gt; *&lt;/em&gt;/ &lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;caps&#34;&gt;PYCOMMENT&lt;/span&gt; # python-style&amp;nbsp;comment&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;caps&#34;&gt;NUMBER&lt;/span&gt; # an integer or&amp;nbsp;float&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;caps&#34;&gt;INT&lt;/span&gt; # an&amp;nbsp;integer&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;caps&#34;&gt;HEX&lt;/span&gt; # an 0xabc012 hex&amp;nbsp;number.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;caps&#34;&gt;ID&lt;/span&gt; # usually&amp;nbsp;[a-zA-Z_][a-zA-Z_0-9]*&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;caps&#34;&gt;ANY&lt;/span&gt; # matches any single&amp;nbsp;char&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CharToken&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;also c-optimized; matches &amp;#8216;one of the specified&amp;nbsp;characters&amp;#8217;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;example:&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;SYMBOLS&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;StringToken&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;matches &amp;#8216;one of the specified&amp;nbsp;strings&amp;#8217;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IdToken&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;matches &amp;#8216;one of the specified strings&amp;#8217; &lt;em&gt;followed by a non-id&amp;nbsp;character&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;example:&amp;nbsp;RESERVED_WORDS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IIdToken&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;same as IdToken, but&amp;nbsp;caseInsensitive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ReToken&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;this is the most flexible, but also the slowest. Use only when needed
   (uses the python &lt;code&gt;re&lt;/code&gt; module to match&amp;nbsp;tokens)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Defining&amp;nbsp;Rules&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def rulename(rule):
    rule | option1 | option2
    rule | option3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:option:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;``child`` or ``(child, child, ...)``
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:child: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- ``&#34;string literal&#34;``
- ``[optional, children, ...]``
- ``(nested, (tuples, are), collapsed)``
- ``star(zero, or_more)``
- ``plus(one, or_more)``
- ``_or(one, of, these)``
- ``_not(this, stuff)`` # checks the content, and if it *does not* match,
  consumes **a single** token.
- ``TOKEN_NAME``
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Abstract Syntax Tree&amp;nbsp;Attributes&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;By default, none of the rules you create will become nodes in the &lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt; - that&amp;#8217;s
because you haven&amp;#8217;t defined what attributes such a node would have. Adding to
our generic rule, you specify an &lt;code&gt;astAttrs&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def rulename(rule):
    rule | option1 | option2
    rule.astAttrs = {
        &#34;attr1&#34;: spec,
        &#34;attr2&#34;: spec
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;#8217;s a dictionary where the &lt;em&gt;keys&lt;/em&gt; are the attribute names that you want, and
the values are a specification of the value to be populated. The &lt;code&gt;spec&lt;/code&gt;
comes in two flavors &amp;#8212; simple or complex. As you&amp;#8217;ll see, the simple flavor is
just a shortcut, but makes the definition clearer &lt;span class=&#34;amp&#34;&gt;&amp;amp;&lt;/span&gt; simpler in many cases. (in
the following examples, &lt;code&gt;atype&lt;/code&gt; is the name of a rule or&amp;nbsp;token).&lt;/p&gt;
&lt;p&gt;Simple&amp;nbsp;++++++&lt;/p&gt;
&lt;p&gt;:atype:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;match the first element of atype — *AstNode/Token or None*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:[atype]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;match all elements of atype — *list*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:[atype,&amp;nbsp;btype]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;match all elements of the contained types — *list*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Complex&amp;nbsp;+++++++&lt;/p&gt;
&lt;p&gt;The complex definition is a dictionary, where the &lt;code&gt;type&lt;/code&gt; parameter follows
the &lt;em&gt;simple&lt;/em&gt; definition&amp;nbsp;above.&lt;/p&gt;
&lt;p&gt;:type: atype | [atype] | [atype, anothertype]
:single: (bool) only use if you want to override the normal inference.
:start: (int) used for slicing (default: 0)
:end: (int) also for slicing (default: 0 [means no limit])
:step: (int) (default:&amp;nbsp;1)&lt;/p&gt;
&lt;p&gt;As you can see, if you don&amp;#8217;t need to slice or override the &amp;#8220;single&amp;#8221; aspect,
you can just use the simple&amp;nbsp;spec.&lt;/p&gt;
&lt;p&gt;And here&amp;#8217;s an example from a&amp;nbsp;calculator:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def addsub_expression(rule):
    rule | (value, star(_or(&#39;+&#39;, &#39;-&#39;), value))
    rule.astAttrs = {
        &#39;left&#39;: value,      # matches only the first &#39;value&#39; node
        &#39;ops&#39;: [OP],        # matches all the operator tokens (&#39;+&#39; or &#39;-&#39;)
        &#39;values&#39;: {
            &#39;type&#39;: [value],
            &#39;start&#39;: 1
        }                   # matches all but the first value.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt;&amp;nbsp;Name&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The (class)name of the resulting &lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt; node defaults to the function name,
converted to TitleCase (e.g. some_rule =&amp;gt; SomeRule). You can customize this
name by setting the &lt;code&gt;astName&lt;/code&gt; attribute of the &lt;em&gt;function&lt;/em&gt;.&amp;nbsp;example:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def foo(rule):
    # stuff
foo.astName = &#39;FooBar&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Actually Making the&amp;nbsp;Grammar&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;grammar = Grammar(start, tokens, idchars=&#39;&#39;, indent=False, ignore=[], ast_tokens=[])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:start: the start rule
:tokens: a list of tokens to use&amp;nbsp;:idchars:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;extra characters you want to be considered ID-like (e.g. &#39;$&#39; for
javascript, PHP)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:indent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(bool) if true, insert INDENT and DEDENT tokens in the appropriate places
(necessary if you want to parse indentation-based languages like python)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:ignore:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list of tokens to ignore while parsing (usually [WHITE], or [WHITE,
NEWLINE])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:ast_tokens:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list of tokens to *not* ignore while constructing the AST (often [NUMBER,
ID])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Translating&lt;/h2&gt;
&lt;p&gt;This is the final step - doing something with the &lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt; you just made. The ast
classes are auto generated, and stored in grammar.ast_classes. I generally put
&lt;code&gt;ast = grammar.ast_classes&lt;/code&gt; at the start of my&amp;nbsp;translator.&lt;/p&gt;
&lt;p&gt;..&amp;nbsp;note::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AST Nodes have only the attributes you defined for them, populated with
the parse tree.

Tokens have three attributes:

:value: (str)
:lineno: (int)
:charno: (int)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A translator function can return anything you&amp;nbsp;like&amp;#8230;&lt;/p&gt;
&lt;p&gt;A Translator is really just a pretty transparent shortcut for taking an &lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt;
and turning it into what you really wanted in the first&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;Instead of&amp;nbsp;writing:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def deal_with_ast(node):
    if isinstance(node, ast.Foo):
        return deal_with_foo(node)
    elif isinstance(node, ast.Bar):
        return deal_with_bar(node)
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;nbsp;get:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t = Translator(grammar, bar=0)

@t.translates(ast.Foo)
def deal_with_foo(node, scope):
    ...

@t.translates(ast.Bar)
def deal_with_bar(node, scope):
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within a &lt;code&gt;deal_with_baz&lt;/code&gt; function, if you want to translate a child node,
call &lt;code&gt;t.translate(node.somechild, scope)&lt;/code&gt; &amp;#8212; it will deal with that node in
the way you&amp;#8217;d&amp;nbsp;expect.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;scope&lt;/code&gt; variable that you saw me passing around is an object
that is really useful if you need to maintain any kind of state while
translating (local variables, etc.). To &amp;#8220;turn on&amp;#8221; scope usage, pass some
keyword arguments to the translator, which will populate the default
attributes of the scope.&amp;nbsp;example:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t = Translator(grammar, variables={}, call_stack=[])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;scope&lt;/code&gt; object that gets passed around will then have the attributes
&amp;#8220;variables&amp;#8221; and &amp;#8220;call_stack&amp;#8221;. For a good example of using the translation
scope, look at &lt;code&gt;CleverCSS2 &amp;lt;http://jaredforsyth.com/projects/clevercss2/&amp;gt;&lt;/code&gt;_.
&lt;em&gt;If you don&amp;#8217;t &amp;#8220;turn on&amp;#8221; the scope, it doesn&amp;#8217;t get passed around &amp;#8212; your
translating functions should only take one&amp;nbsp;argument.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Once you&amp;#8217;ve populated your translator, you can call &lt;code&gt;t.from_string(text)&lt;/code&gt; to
first turn the &lt;code&gt;text&lt;/code&gt; into an &lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt;, and then translate the&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a really simple example of a translator function (taken from the &lt;code&gt;json
grammar
&amp;lt;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/json.py#L39&amp;gt;&lt;/code&gt;_):&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@JSON.translates(ast.List)
def t_list(node):
    return list(JSON.translate(value) for value in node.values)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you&amp;#8217;re ready to look at the&amp;nbsp;examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSON
  &amp;lt;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/json.py&amp;gt;&lt;/code&gt;_&lt;/li&gt;
&lt;li&gt;&lt;code&gt;math
  &amp;lt;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/math.py&amp;gt;&lt;/code&gt;_&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CleverCSS2&lt;/code&gt;_ &lt;/li&gt;
&lt;li&gt;&lt;code&gt;python-css &amp;lt;http://github.com/jabapyth/css/blob/master/css/grammar.py&amp;gt;&lt;/code&gt;_&lt;/li&gt;
&lt;/ul&gt;            </content>
        </entry>
            <entry>
            <title type="html">Lessons learned; optimizing CodeTalker</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-26-lessons-learned-optimizing-codetalker.html"/>
            <updated>2010-07-26T12:00:00Z</updated>
            <published>2010-07-26T12:00:00Z</published>
            <id>/blog/2010-Jul-26-lessons-learned-optimizing-codetalker.html</id>
            
            <content type="html">
                                &lt;p&gt;As &lt;code&gt;per request
&amp;lt;http://jaredforsyth.com/blog/2010/jul/21/codetalker-doubles-in-speed/#comment-63681945&amp;gt;&lt;/code&gt;&lt;em&gt;,
I&amp;#8217;ve decided to write down what I&amp;#8217;ve learned from my &lt;code&gt;optimization adventures
&amp;lt;http://jaredforsyth.com/blog/2010/jul/21/codetalker-doubles-in-speed/&amp;gt;&lt;/code&gt;&lt;/em&gt;
with &lt;code&gt;CodeTalker &amp;lt;http://jaredforsyth.com/projects/codetalker/&amp;gt;&lt;/code&gt;_.&lt;/p&gt;
&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;To start out, I&amp;#8217;d like to lay a couple of baseline suggestions. &lt;strong&gt;(Unit)tests are
your very best friend&lt;/strong&gt;. Nothing is more satisfying than running your suite
after an optimization and knowing that you &lt;strong&gt;a)&lt;/strong&gt; didn&amp;#8217;t break anything and &lt;strong&gt;b)&lt;/strong&gt;
made it run faster. And nothing is more terrible than trying out some example
code (or worse, hearing from a user) and realizing that you &lt;em&gt;broke something&lt;/em&gt;,
but you don&amp;#8217;t remember when or where. So you break out the old &lt;code&gt;hg bisect&lt;/code&gt;,
but still, it&amp;#8217;s a&amp;nbsp;pain.&lt;/p&gt;
&lt;p&gt;Which reminds me — &lt;em&gt;you are using version control, right?&lt;/em&gt; Because if you
aren&amp;#8217;t, you really should &lt;strong&gt;get some&lt;/strong&gt;. Seriously. &lt;code&gt;Git &amp;lt;http://git-scm.com/&amp;gt;&lt;/code&gt;&lt;em&gt;, 
&lt;code&gt;Mercurial &amp;lt;http://mercurial.selenic.com/&amp;gt;&lt;/code&gt;&lt;/em&gt;, &lt;code&gt;Bazaar
&amp;lt;http://bazaar.canonical.com/en/&amp;gt;&lt;/code&gt;_&amp;#8230;all good stuff. And really don&amp;#8217;t try to
code without it. Especially when optimizing, when there&amp;#8217;s a better-than-average
chance that you&amp;#8217;ll totally break something&amp;nbsp;:)&lt;/p&gt;
&lt;h1&gt;&lt;span class=&#34;caps&#34;&gt;BTW&lt;/span&gt; (Why) Should I&amp;nbsp;Profile?&lt;/h1&gt;
&lt;p&gt;I&amp;#8217;ve heard several people throw out numbers like &amp;#8220;90% of your time is spent in
10% of your code — so to optimize, just find that 10%&amp;#8221;. If that&amp;#8217;s the case
with you, this is probably &lt;em&gt;not the article you&amp;#8217;re looking for&lt;/em&gt;. You can jump
down to the &lt;code&gt;Initial Optimizations&lt;/code&gt;_ section if you want, but most of my time
I&amp;#8217;ll be talking about data processing optimization. Which brings me to my next&amp;nbsp;point:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Most programs don&amp;#8217;t need to be fast&lt;/strong&gt;. Sure, if your django app takes &lt;em&gt;15
seconds to render&lt;/em&gt; you should do some profiling, but in general speed is not
something you need to worry about. The specific section of computing that I&amp;#8217;ll
be addressing is &lt;strong&gt;data processing&lt;/strong&gt;, where it&amp;#8217;s pretty much &lt;em&gt;all hard work
all the time&lt;/em&gt;, and a 10x speedup from 100 minutes to 10 minutes is a big deal
(again, in your average normal program, that same speedup would be from 1sec
to .1sec, which doesn&amp;#8217;t make quite as much&amp;nbsp;difference).&lt;/p&gt;
&lt;p&gt;Now, on&amp;nbsp;to&lt;/p&gt;
&lt;h1&gt;The actual optimizing&amp;nbsp;stuff&lt;/h1&gt;
&lt;h2&gt;Make sure you know what to&amp;nbsp;optimize&lt;/h2&gt;
&lt;p&gt;Say you&amp;#8217;ve got an example usage of your library/program that really puts it
through its paces; let&amp;#8217;s call it &lt;code&gt;examples/big.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s what I&amp;nbsp;do:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;bash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python -mcProfile -o big.prof examples/big.py
runsnake big.prof
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first command you get out of the box w/ CPython (with some other python,
try &lt;code&gt;-mProfile&lt;/code&gt; instead of &lt;code&gt;-mcProfile&lt;/code&gt;). It runs big.py, profiles the
methods run, and saves the profiling output to&amp;nbsp;big.prof.&lt;/p&gt;
&lt;p&gt;Now in order to understand the profiling output, I like to use a program
called &lt;code&gt;RunSnakeRun &amp;lt;http://www.vrplumber.com/programming/runsnakerun/&amp;gt;&lt;/code&gt;_,
which you can get through easy_install; &lt;code&gt;easy_install RunSnakeRun&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Play around w/ the &lt;span class=&#34;caps&#34;&gt;GUI&lt;/span&gt; a bit, and you should get an idea of what needs to be&amp;nbsp;profiled.&lt;/p&gt;
&lt;p&gt;..&amp;nbsp;note::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Profiling works best when your code is well modularized - if you have all
the work in one function ``do_heavy_stuff`` you won&#39;t get as good a
picture of exactly what needs to be modified.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Methods of&amp;nbsp;optimization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;don&amp;#8217;t do stupid&amp;nbsp;stuff&lt;/li&gt;
&lt;li&gt;use the right&amp;nbsp;datatypes&lt;/li&gt;
&lt;li&gt;C &amp;gt;&amp;nbsp;python&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Initial&amp;nbsp;Optimizations&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Dont do stupid&amp;nbsp;stuff&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;#8230; like concatenate a &lt;code&gt;bunch of strings together
&amp;lt;http://jaredforsyth.com/blog/2010/jun/26/string-concatenation-kills-babies/&amp;gt;&lt;/code&gt;_
in cpython :). Or do things that aren&amp;#8217;t loop-dependent inside of a loop.
Sometimes it&amp;#8217;s small &lt;em&gt;doh!&lt;/em&gt; moments that give you some of your time&amp;nbsp;back.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use the right datatypes + don&amp;#8217;t reinvent the&amp;nbsp;wheel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is another section that a lot of people talk about, so I won&amp;#8217;t spend too
much time. There are a number of problems (like searching, sorting), that
people have spent a lot of time making fast, and there are some datatypes that
are much faster to work with than&amp;nbsp;others. &lt;/p&gt;
&lt;p&gt;For example, in python, list lookup is faster than dictionary lookup (for
large&amp;nbsp;datasets).&lt;/p&gt;
&lt;h2&gt;The Real&amp;nbsp;Stuff&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;C &amp;gt;&amp;nbsp;Python&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sorry folks, but for straight data processing, C wins. But python is much
easier + more fun to write/read/deal&amp;nbsp;with&amp;#8230;&lt;/p&gt;
&lt;p&gt;One of the best things I did for CodeTalker was to dive into &lt;code&gt;Cython
&amp;lt;http://cython.org/&amp;gt;&lt;/code&gt;_, which made the python+c integration a&amp;nbsp;breeze.&lt;/p&gt;
&lt;p&gt;Parts of CodeTalker in&amp;nbsp;C:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tokenization (when no custom tokens are&amp;nbsp;used)&lt;/li&gt;
&lt;li&gt;parsing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Parts of CodeTalker in&amp;nbsp;Cython:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt; conversion (back to python&amp;nbsp;objects)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Parts of CodeTalker in&amp;nbsp;Python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Final&amp;nbsp;translation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the case of CodeTalker, tokenization was most expensive, followed by
parsing, and then &lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt; conversion. The final translation is specified by
whoever is using CodeTalker, so it must be in&amp;nbsp;python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caching is&amp;nbsp;King&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was able to get several big speedups by just caching various objects (often
when converting between python and C). On modern systems, memory is prolific,
so feel free to use&amp;nbsp;it.&lt;/p&gt;
&lt;h1&gt;Some specific CodeTalker&amp;nbsp;notes&lt;/h1&gt;
&lt;p&gt;Back when I had everything in python, I tried moving from a function-centric
organization to a more &lt;span class=&#34;caps&#34;&gt;OO&lt;/span&gt; friendly structure, and I took a big performance&amp;nbsp;hit.&lt;/p&gt;
&lt;p&gt;moving from explicit Tokens to regex was &lt;em&gt;huge&lt;/em&gt;. Moving from regex to
hard-coded C was another&amp;nbsp;huge&lt;/p&gt;
&lt;h2&gt;Cython&lt;/h2&gt;
&lt;p&gt;For some reason, I trust myself more than I trust cython to write pure C.
Maybe I&amp;#8217;m unfounded in this, but I like to have control when I&amp;#8217;m only
working with C data types. When python exceptions/objects get involved, I
owe everything to Cython. [one weird thing — cython&amp;#8217;s &amp;#8220;hello world&amp;#8221; &lt;code&gt;print
&#34;hello world&#34;&lt;/code&gt; is 1204 lines of C?? and the hello.so is&amp;nbsp;26k??]&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">It&#39;s time for a better diff</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-22-its-time-better-diff.html"/>
            <updated>2010-07-22T10:23:24Z</updated>
            <published>2010-07-22T10:23:24Z</published>
            <id>/blog/2010-Jul-22-its-time-better-diff.html</id>
            
            <content type="html">
                                &lt;p&gt;&lt;code&gt;diff&lt;/code&gt; is one of those programs that&amp;#8217;s just been around &lt;em&gt;forever&lt;/em&gt;, and that hasn&amp;#8217;t changed much b/c it&amp;#8217;s the best it can possibly be.&amp;nbsp;&amp;#8230;right?&lt;/p&gt;
&lt;p&gt;Sort of. For finding out which lines have changed between two files, there&amp;#8217;s none better (maybe). 40 (!) years of use has shown us this. But for &lt;em&gt;finding the difference&lt;/em&gt; between two files? I argue that those two problems, which have been so long conflated, are actually not the&amp;nbsp;same.&lt;/p&gt;
&lt;p&gt;Why do I care so much about this? Who uses diff, anyway? Well, &lt;em&gt;git&lt;/em&gt;. &lt;em&gt;mercurial&lt;/em&gt;. &lt;em&gt;svn&lt;/em&gt;. The places that &lt;code&gt;diff&lt;/code&gt; falls short are in dealing with &lt;em&gt;multiple conflicting changes&lt;/em&gt; to a file. Oh, yeah; this post is about merge&amp;nbsp;conflicts.&lt;/p&gt;
&lt;p&gt;If you will kindly consider the following diagram, I will present a case which &lt;em&gt;is covered&lt;/em&gt; by both git and&amp;nbsp;mercurial:&lt;/p&gt;
&lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/images/diffmerge.png&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s an example of changes to an essay, made on two different clones (or branches, or forks &amp;#8212; w/e). The first decides the &amp;#8220;Donec justo&amp;#8230;&amp;#8221; should be moved up, and the second realizes that &amp;#8220;Maecenas&amp;#8221; should really be&amp;nbsp;&amp;#8220;Spam&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Fortunately, automerge takes care of this instance, as it is fairly simple; there is only one commit on each side, and relatively little was&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;For this next part, you&amp;#8217;ll be required to use your imagination (sorry, I didn&amp;#8217;t want to diagram it), or you can just hark back to the last time a merge failed on&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;Say I&amp;#8217;ve got a javascript file, and I rearrange the functions to be in a more sensible arrangement (grouping like functions together spatially). And I commit. And then I fix some bugs, committing for each&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;My friend Jason fixes some &lt;em&gt;completely different&lt;/em&gt; bugs, which wouldn&amp;#8217;t normally have interfered with my changes, had I only not moved the functions&amp;nbsp;around.&lt;/p&gt;
&lt;p&gt;And the merge fails, which makes sense from the vcs&amp;#8217; point of view, but &lt;em&gt;I&lt;/em&gt; know that it really shouldn&amp;#8217;t have failed &amp;#8212; we didn&amp;#8217;t modify conflicting &lt;em&gt;logical lines of code&lt;/em&gt;, we just modified conflicting &lt;em&gt;physical lines of text&lt;/em&gt;. See the difference? Git doesn&amp;#8217;t. But it&amp;nbsp;should.&lt;/p&gt;
&lt;p&gt;I know that there are times when merges should fail; when people modify the same thing, and a human has to step in and decide which modifications to give preference. But there are also several cases where merges &lt;em&gt;shouldn&amp;#8217;t&lt;/em&gt; fail, and yet they&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;If you want to get really fancy, I can envision our vcs actually &lt;strong&gt;grokking syntax&lt;/strong&gt;, realizing&amp;nbsp;that&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;javascript&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (name==&#34;Cain&#34;) alert(&#34;Oh no!&#34;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;javascript&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (name == &#34;Cain&#34;)
{
    alert( &#34;Oh no!&#34; );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;are syntactically equivalent, and conduct merges accordingly. (The opportunity for cases such for this is greatly increased with languages such as C, Java, and Javascript that don&amp;#8217;t pay attention to&amp;nbsp;whitespace).&lt;/p&gt;
&lt;p&gt;Now, I realize that with greater merge power comes greater flexibility&amp;#8230;I mean responsibility. Opportunity for things to get totally messed up. To fix that, you can specify that if a merge fails and &amp;#8220;supermerge&amp;#8221; thinks its found a solution, that solution pops up for you to vet (in mercurial, a merge never gets auto committed &amp;#8212; you have to do that yourself). In any event, you&amp;#8217;ve got a pre-commit test suite, right?&amp;nbsp;=)&lt;/p&gt;
&lt;p&gt;I really love version control, and it makes all of our lives easier. This is just one area where I think there&amp;#8217;s some interesting room for&amp;nbsp;improvement.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">setup.py test with distutils (+py.test)</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-21-setuppy-test-distutils-pytest.html"/>
            <updated>2010-07-21T12:14:34Z</updated>
            <published>2010-07-21T12:14:34Z</published>
            <id>/blog/2010-Jul-21-setuppy-test-distutils-pytest.html</id>
            
            <content type="html">
                                &lt;p&gt;One thing that has bothered me about distutils is its lack of a &amp;#8220;test&amp;#8221; command &amp;#8212; it seems strange to me that setuptools has it but distutils does&amp;nbsp;not&amp;#8230;&lt;/p&gt;
&lt;p&gt;Anyway I &lt;code&gt;looked around &amp;lt;http://www.eggheadcafe.com/software/aspnet/36151038/does-distutils-support-python-setuppy-test.aspx&amp;gt;&lt;/code&gt;&lt;em&gt; to &lt;code&gt;make sure &amp;lt;http://da44en.wordpress.com/2002/11/22/using-distutils/&amp;gt;&lt;/code&gt;&lt;/em&gt; it &lt;code&gt;really wasn&#39;t there &amp;lt;http://mail.python.org/pipermail/distutils-sig/2000-September/001528.html&amp;gt;&lt;/code&gt;&lt;em&gt; (I couldn&amp;#8217;t believe it at first), but finally, convinced, &lt;code&gt;I wrote my own &amp;lt;http://github.com/jabapyth/disttest&amp;gt;&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What&amp;#8217;s cool about&amp;nbsp;this:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it&amp;#8217;s extensible &amp;#8212; designed from the start to allow for many different style tests (using different testing&amp;nbsp;libraries)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;includes 2 test&amp;nbsp;types:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unittest&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;py.test &lt;em&gt;(degrades gracefully to unittest if the py module is not&amp;nbsp;present)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;#8217;s the code used to add unittest&amp;nbsp;support:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def validate_unittest(tester):
    if tester.test_suite is None:
        if tester.test_modules is None:
            raise DistutilsOptionError(
                &#34;You must specify a module or a suite&#34;
            )
        tester.test_suite = self.test_module+&#34;.test_suite&#34;
    elif tester.test_module:
        raise DistutilsOptionError(
            &#34;You may specify a module or a suite, but not both&#34;
        )

@test.add_type(&#39;unittest&#39;, options=(
        (&#39;test-module=&#39;,&#39;m&#39;, &#34;Run &#39;test_suite&#39; in specified module&#34;),
        (&#39;test-suite=&#39;,&#39;s&#39;,
            &#34;Test suite to run (e.g. &#39;some_module.test_suite&#39;)&#34;),
    ), validate=validate_unittest)
def run_unittest(tester):
    import unittest
    unittest.main(
        None, None, [unittest.__file__, tester.test_suite],
        testLoader = unittest.TestLoader()
    )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anyway, I&amp;#8217;m calling it&amp;nbsp;&amp;#8220;disttest&amp;#8221;&amp;#8230;&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t know whether to put it up on pypi or what&amp;#8230;it would kindof be a drag to have to install another package in order to run&amp;nbsp;tests&amp;#8230;&lt;/p&gt;
&lt;p&gt;Then again, it is only one file, so it&amp;#8217;s feasible to just package it in w/ your other code (&lt;strong&gt;grab the file&lt;/strong&gt; &lt;code&gt;here &amp;lt;http://github.com/jabapyth/disttest/blob/master/disttest.py&amp;gt;&lt;/code&gt;&lt;em&gt;). That&amp;#8217;s what I&amp;#8217;ve &lt;code&gt;done with codetalker &amp;lt;http://github.com/jabapyth/codetalker/blob/master/test_cmd.py&amp;gt;&lt;/code&gt;&lt;/em&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;Thoughts? Suggestions?&amp;nbsp;Complaints?&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">CPython vs PyPy vs Cython </title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-21-cpython-vs-pypy-vs-cython.html"/>
            <updated>2010-07-21T10:23:29Z</updated>
            <published>2010-07-21T10:23:29Z</published>
            <id>/blog/2010-Jul-21-cpython-vs-pypy-vs-cython.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/images/cy_py_py.png&lt;/p&gt;
&lt;p&gt;One problem that I needed to solve while making &lt;code&gt;CodeTalker &amp;lt;http://jaredforsyth.com/projects/codetalker/&amp;gt;&lt;/code&gt;_ was fast tokenization &amp;#8212; so I benchmarked several implementations of matching the &lt;span class=&#34;caps&#34;&gt;WHITE&lt;/span&gt; and &lt;span class=&#34;caps&#34;&gt;ID&lt;/span&gt;&amp;nbsp;tokens.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the python implementation, so you understand what&amp;#8217;s going&amp;nbsp;on:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def white(at, st, ln):
    i = at
    while i&amp;lt;ln and st[i] == &#39; &#39;:
        i+=1 
    return i - at

def id(at, st, ln):
    i = at 
    if i &amp;lt; ln and (&#39;a&#39; &amp;lt;= st[i] &amp;lt;= &#39;z&#39; or &#39;A&#39; &amp;lt;= st[i] &amp;lt;= &#39;Z&#39; or st[i] == &#39;_&#39;):
        i += 1
        while i &amp;lt; ln and  (&#39;a&#39; &amp;lt;= st[i] &amp;lt;= &#39;z&#39; or &#39;A&#39; &amp;lt;= st[i] &amp;lt;= &#39;Z&#39; or st[i] == &#39;_&#39; or &#39;0&#39; &amp;lt;= st[i] &amp;lt;= &#39;9&#39;):
            i += 1
    return i - at
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The pypy is of course no different, and for cython I only changed the first two lines of each.&amp;nbsp;e.g.&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;cython&lt;/p&gt;
&lt;p&gt;cpdef white(int at, char* st, int ln):
       cdef int i =&amp;nbsp;at&lt;/p&gt;
&lt;p&gt;I also checked Regex to see if that would be any&amp;nbsp;faster.&lt;/p&gt;
&lt;p&gt;Anyway, the raw results are below, but here&amp;#8217;s a&amp;nbsp;summary:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cython wins&lt;/strong&gt; by about a factor of 10 each time. pypy is about par w/ regex, which is 10x faster than straight&amp;nbsp;python.&lt;/p&gt;
&lt;p&gt;..&amp;nbsp;note::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;I&#39;m using most recent stable release of pypy: 1.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pypy

2.82211303711e-05 at 0   
4.7474861145e-05 at 2    
3.19180488586e-05 at 500 
5.06615638733e-06 at 1007
5.14602661133e-06 at 1014
for IDS                  
0.00018682718277 at 0    
7.82380104065e-05 at 10  
2.23803520203e-06 at 1025
2.27212905884e-06 at 1028

cpython

0.000272939920425 at 0   
0.000285755872726 at 2   
0.000156256914139 at 500 
6.81185722351e-06 at 1007
2.60829925537e-07 at 1014
for IDS                  
0.00100137805939 at 0    
0.000964962005615 at 10  
8.36133956909e-07 at 1025
3.35931777954e-07 at 1028

cython

9.29117202759e-07 at 0   
9.21964645386e-07 at 2   
5.56945800781e-07 at 500 
1.21116638184e-07 at 1007
1.23023986816e-07 at 1014
for IDS                  
1.86841487885e-05 at 0   
8.15391540527e-06 at 10  
1.25169754028e-07 at 1025
1.23023986816e-07 at 1028

cpython + regex

2.03487873077e-05 at 0   
3.93490791321e-05 at 2   
1.27689838409e-05 at 500 
1.77097320557e-06 at 1007
1.10411643982e-06 at 1014
for IDS                  
1.30689144135e-05 at 0   
1.26049518585e-05 at 10  
1.98006629944e-06 at 1025
9.75847244263e-07 at 1028

pypy + regex

0.000184435129166 at 0   
4.27179336548e-05 at 2   
5.02660274506e-05 at 500 
3.67810726166e-05 at 1007
1.60229206085e-05 at 1014
for IDS                  
5.36160469055e-05 at 0   
7.2783946991e-05 at 10   
1.04148387909e-05 at 1025
1.33678913116e-05 at 1028
&lt;/code&gt;&lt;/pre&gt;            </content>
        </entry>
            <entry>
            <title type="html">CodeTalker doubles in speed</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-21-codetalker-doubles-in-speed.html"/>
            <updated>2010-07-21T07:33:30Z</updated>
            <published>2010-07-21T07:33:30Z</published>
            <id>/blog/2010-Jul-21-codetalker-doubles-in-speed.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/projects/logo_codetalker.png&lt;/p&gt;
&lt;p&gt;Just when you though codetalker &lt;code&gt;couldn&#39;t get &amp;lt;http://jaredforsyth.com/blog/2010/jul/17/python-css-parsing-benchmarks/&amp;gt;&lt;/code&gt;&lt;em&gt; &lt;code&gt;any faster &amp;lt;http://jaredforsyth.com/blog/2010/jul/17/comparing-parser-generators-python/&amp;gt;&lt;/code&gt;&lt;/em&gt;, I managed to &lt;em&gt;double its speed&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;in case anyone&amp;#8217;s wondering, the binary around the logo corresponds to the ascii string&amp;nbsp;&amp;#8220;codetalker&amp;#8221;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve put together some updated graphs, for &lt;span class=&#34;caps&#34;&gt;JSON&lt;/span&gt; and &lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt;&amp;nbsp;parsing&amp;#8230;&lt;/p&gt;
&lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/images/new_json_bench.jpeg&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[live graph] &amp;lt;http://jaredforsyth.com/media/uploads/new_json.html&amp;gt;&lt;/code&gt;_&lt;/p&gt;
&lt;p&gt;Ad-hoc json&amp;nbsp;parsing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stdlib.json&lt;/li&gt;
&lt;li&gt;python-json&lt;/li&gt;
&lt;li&gt;cjson&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Parser-generator&amp;nbsp;parsing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;codetalker&lt;/li&gt;
&lt;li&gt;ply&lt;/li&gt;
&lt;li&gt;pyparsing&lt;/li&gt;
&lt;li&gt;funcparserlib&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, codetalker is now &lt;strong&gt;beating python&amp;#8217;s stdlib.json&lt;/strong&gt;, and is way ahead of the other &amp;#8216;parser generator&amp;#8217; solutions. And for lines of code (and maintainability, and speed of coding, etc.) codetalker is really the way to go (especially when speed is thrown into the&amp;nbsp;mix).&lt;/p&gt;
&lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/images/new_css_bench.jpeg&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[live graph]. &amp;lt;http://jaredforsyth.com/media/uploads/bench_css.html&amp;gt;&lt;/code&gt;_&lt;/p&gt;
&lt;p&gt;Not that there was much competition in the first place, but codetalker is now &lt;em&gt;10x faster&lt;/em&gt; than cssutils and &lt;em&gt;7x faster&lt;/em&gt; than&amp;nbsp;css_py.&lt;/p&gt;
&lt;p&gt;I think I&amp;#8217;m done optimizing for now&amp;nbsp;=)&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Python css parsing benchmarks</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-17-python-css-parsing-benchmarks.html"/>
            <updated>2010-07-17T20:24:54Z</updated>
            <published>2010-07-17T20:24:54Z</published>
            <id>/blog/2010-Jul-17-python-css-parsing-benchmarks.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/battle.png&lt;/p&gt;
&lt;p&gt;And I put together another graph, profiling the different libraries for parsing &lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; with&amp;nbsp;python.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cssutils &amp;lt;http://cthedot.de/cssutils/&amp;gt;&lt;/code&gt;_&lt;/li&gt;
&lt;li&gt;&lt;code&gt;css-py &amp;lt;http://code.google.com/p/css-py/&amp;gt;&lt;/code&gt;&lt;em&gt; (&lt;code&gt;ply &amp;lt;http://www.dabeaz.com/ply/&amp;gt;&lt;/code&gt;&lt;/em&gt;&amp;nbsp;based)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python-css &amp;lt;http://jaredforsyth.com/projects/python-css/&amp;gt;&lt;/code&gt;&lt;em&gt; (&lt;code&gt;codetalker &amp;lt;http://jaredforsyth.com/projects/codetalker/&amp;gt;&lt;/code&gt;&lt;/em&gt;&amp;nbsp;based)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;aaand here are the results! (parsing a 22kb &lt;code&gt;real-world css file &amp;lt;https://assets0.github.com/stylesheets/bundle_common.css?bae2af7c4660bfb79be0705bf41a23f647a7e6f0&amp;gt;&lt;/code&gt;_)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[live graph] &amp;lt;http://jaredforsyth.com/media/uploads/bench_css.html&amp;gt;&lt;/code&gt;_&lt;/p&gt;
&lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/images/css_bench.jpeg&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Announcing: python-css</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-17-announcing-python-css.html"/>
            <updated>2010-07-17T18:37:15Z</updated>
            <published>2010-07-17T18:37:15Z</published>
            <id>/blog/2010-Jul-17-announcing-python-css.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/projects/logo___.png&lt;/p&gt;
&lt;p&gt;In the course of &lt;code&gt;rewriting CleverCSS &amp;lt;http://github.com/jabapyth/clevercss2&amp;gt;&lt;/code&gt;&lt;em&gt;, I wanted to write a &lt;code&gt;backwards converter &amp;lt;http://github.com/jabapyth/clevercss2/blob/master/clevercss/backwards.py&amp;gt;&lt;/code&gt;&lt;/em&gt; from css to ccss. I thought it would make the tool &lt;em&gt;much&lt;/em&gt; easier to&amp;nbsp;adopt.&lt;/p&gt;
&lt;p&gt;You know, you&amp;#8217;ve got this big web project, and you realize that what you really need is a little more power behind your stylesheets, and it would be &lt;em&gt;great&lt;/em&gt; to have scoping, and variables&amp;#8230; but you&amp;#8217;ve already got 2,000 lines of css that you really don&amp;#8217;t want to port over&amp;#8230; just throw it at css2ccss and you&amp;#8217;re&amp;nbsp;golden!&lt;/p&gt;
&lt;p&gt;Anyway, it currently uses &lt;code&gt;cssutils &amp;lt;http://cthedot.de/cssutils/&amp;gt;&lt;/code&gt;&lt;em&gt;, but I thought that &lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; would be another great grammar to try codetalker against. And the result is &lt;code&gt;python-css &amp;lt;http://jaredforsyth.com/projects/python-css/&amp;gt;&lt;/code&gt;&lt;/em&gt;. &lt;strong&gt;108 lines, faster than cssutils&amp;#8230;&lt;/strong&gt; I&amp;#8217;m doing some more detailed benchmarks which I&amp;#8217;ll put up&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;update:&lt;/strong&gt; here are the &lt;code&gt;benchmarks &amp;lt;http://jaredforsyth.com/blog/2010/jul/17/python-css-parsing-benchmarks/&amp;gt;&lt;/code&gt;_&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Comparing parser generators in Python</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-17-comparing-parser-generators-python.html"/>
            <updated>2010-07-17T08:42:45Z</updated>
            <published>2010-07-17T08:42:45Z</published>
            <id>/blog/2010-Jul-17-comparing-parser-generators-python.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/battle.png&lt;/p&gt;
&lt;p&gt;One of the &lt;code&gt;comments on reddit &amp;lt;http://www.reddit.com/r/Python/comments/cne57/announcing_codetalker/&amp;gt;&lt;/code&gt;&lt;em&gt; when I &lt;code&gt;announced codetalker &amp;lt;http://jaredforsyth.com/blog/2010/jul/8/announcing-codetalker/&amp;gt;&lt;/code&gt;&lt;/em&gt; was &amp;#8220;what&amp;#8217;s wrong with&amp;nbsp;pyparsing?&amp;#8221;&lt;/p&gt;
&lt;p&gt;So I thought I&amp;#8217;d run some comparisons, detailing why I felt the need to reinvent this particular&amp;nbsp;wheel.&lt;/p&gt;
&lt;p&gt;My favorite entry-level parsing project is &lt;code&gt;JSON &amp;lt;http://www.json.org/&amp;gt;&lt;/code&gt;&lt;em&gt;; it&amp;#8217;s about as simple as a grammar gets while still having a great deal of real world value. So I looked around for some examples of parsing &lt;span class=&#34;caps&#34;&gt;JSON&lt;/span&gt; with &lt;code&gt;pyparsing &amp;lt;http://pyparsing.wikispaces.com/&amp;gt;&lt;/code&gt;&lt;/em&gt;, and thought I&amp;#8217;d throw in &lt;code&gt;PLY &amp;lt;http://www.dabeaz.com/ply/&amp;gt;&lt;/code&gt;_ for good&amp;nbsp;measure.&lt;/p&gt;
&lt;h2&gt;Implementations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PyParsing:&lt;/strong&gt; &lt;code&gt;source &amp;lt;http://jaredforsyth.com/media/uploads/ppjson.py&amp;gt;&lt;/code&gt;&lt;em&gt; (I had to modify the code from &lt;code&gt;these slides &amp;lt;http://www.ptmcg.com/geo/python/confs/TxUnconf2008Pyparsing.html&amp;gt;&lt;/code&gt;&lt;/em&gt; slightly to output the correct&amp;nbsp;results)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CodeTalker:&lt;/strong&gt; &lt;code&gt;codetalker.contrib.json &amp;lt;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/json.py&amp;gt;&lt;/code&gt;&lt;em&gt; taken from the contrib section of my &lt;code&gt;codetalker library &amp;lt;http://jaredforsyth.com/projects/codetalker/&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class=&#34;caps&#34;&gt;PLY&lt;/span&gt;:&lt;/strong&gt; &lt;code&gt;json-ply &amp;lt;http://code.google.com/p/json-ply/&amp;gt;&lt;/code&gt;_ available on google&amp;nbsp;code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[of course, these represent one person&amp;#8217;s usage and are not the only possible implementations, but I think they are a good example of each&amp;nbsp;library]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Anyway, here are the stats: &lt;code&gt;[live online graph] &amp;lt;http://jaredforsyth.com/media/uploads/parsing_json.html&amp;gt;&lt;/code&gt;_&lt;/p&gt;
&lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/parsers_json_graph.jpeg&lt;/p&gt;
&lt;p&gt;If it&amp;#8217;s not clear, &lt;em&gt;lower is better&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And in addition to the raw stats, I think codetalker&amp;#8217;s way of defining grammars if more intuitive &lt;span class=&#34;amp&#34;&gt;&amp;amp;&lt;/span&gt; has a better correlation to the traditional &lt;span class=&#34;caps&#34;&gt;BNF&lt;/span&gt;&amp;nbsp;style.&lt;/p&gt;
&lt;p&gt;Of course, to each their own &amp;#8212; just because codetalker is more intuitive to me doesn&amp;#8217;t mean it will be for you &amp;#8212; take a look at the code, and take your&amp;nbsp;pick.&lt;/p&gt;
&lt;p&gt;What experience do you have with parser generators? Is there some killer library I left out? Feel free to tell me in the&amp;nbsp;comments.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Easy python dependency graphs</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-16-easy-python-dependency-graphs.html"/>
            <updated>2010-07-16T13:41:53Z</updated>
            <published>2010-07-16T13:41:53Z</published>
            <id>/blog/2010-Jul-16-easy-python-dependency-graphs.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image::&amp;nbsp;http://upload.wikimedia.org/wikipedia/commons/thumb/a/a2/Directed.svg/200px-Directed.svg.png&lt;/p&gt;
&lt;p&gt;I was looking around for ways to get a look at a python dependency graph, and found &lt;code&gt;this site &amp;lt;http://www.tarind.com/depgraph.html&amp;gt;&lt;/code&gt;_ which actually does a pretty good job. The only gripe I have regards the command you must&amp;nbsp;use:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;bash&lt;/p&gt;
&lt;p&gt;python py2depgraph.py path/to/my/script.py | python depgraph2dot.py | dot -T png -o&amp;nbsp;depgraph.png&lt;/p&gt;
&lt;p&gt;Couldn&amp;#8217;t be easier, right?&amp;nbsp;&amp;#8230;&lt;/p&gt;
&lt;p&gt;Anyway, I added a bit of sugar on top of&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;First I put the two files they provided in&amp;nbsp;~/clone/modgraph&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;bash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir ~/clone/modgraph
cd ~/clone/modgraph
wget http://www.tarind.com/py2depgraph.py
wget http://www.tarind.com/depgraph2dot.py
touch ~/bin/modgraph
chmod +x ~/bin/modgraph
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then in&amp;nbsp;~/bin/modgraph&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;bash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if [ -z &#34;$2&#34; ]
then
    echo &#34;usage: modgraph somepythonfile.py out.png&#34;
    exit
fi
python ~/clone/modgraph/py2depgraph.py $1 | python ~/clone/modgraph/depgraph2dot.py | dot -T png -o $2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course to use&amp;nbsp;it:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;bash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;modgraph myfile.py outfile.png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Is there another module that does this better? Should I package this up and throw it on&amp;nbsp;pypi?&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Installing Vim Debug</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-16-installing-vim-debug.html"/>
            <updated>2010-07-16T13:13:07Z</updated>
            <published>2010-07-16T13:13:07Z</published>
            <id>/blog/2010-Jul-16-installing-vim-debug.html</id>
            
            <content type="html">
                                &lt;p&gt;I&amp;#8217;ve had a few people ask me for installations for &lt;code&gt;vim-debug &amp;lt;http://jaredforsyth.com/projects/vim-debug/&amp;gt;&lt;/code&gt;_, which I guess is natural&amp;#8230;I&amp;#8217;m just not used to the whole &amp;#8220;package maintainer&amp;#8221; persona yet. Anyway, here it&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/images/install.png&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;bash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pip install dbgp
sudo pip install vim-debug
install-vim-debug.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;..&amp;nbsp;note::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;To start your debugging session, you need a *capital* D. ``:Dbg``. While you are in the session, you can use a lowercase, ex: ``:dbg break``
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those three commands should do it for&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;I tested it on a completely fresh fedora 13 install, and devved on Ubuntu&amp;nbsp;Karmic&lt;/p&gt;
&lt;p&gt;I have no idea whether this will work on windows &amp;#8212; if you try it, be sure to tell&amp;nbsp;me!&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Vim Debug 1.5: Agyrtidae</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-14-vim-debug-15-agyrtidae.html"/>
            <updated>2010-07-14T08:59:12Z</updated>
            <published>2010-07-14T08:59:12Z</published>
            <id>/blog/2010-Jul-14-vim-debug-15-agyrtidae.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/images/agyrtidae.png&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Agyrtidae&lt;/code&gt; is the name of a &lt;code&gt;family of Beetles &amp;lt;http://www.zin.ru/animalia/Coleoptera/eng/agyrt_fm.htm&amp;gt;&lt;/code&gt;&lt;em&gt; (found in Russia), and the codename for the &lt;code&gt;1.5 release &amp;lt;http://github.com/jabapyth/vim-debug/tree/1.5&amp;gt;&lt;/code&gt;&lt;/em&gt; of &lt;code&gt;Vim Debug &amp;lt;http://github.com/jabapyth/vim-debug&amp;gt;&lt;/code&gt;_.&lt;/p&gt;
&lt;h2&gt;Features of this&amp;nbsp;release&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;python&amp;nbsp;support!!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;really simple&amp;nbsp;startup&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;no more &lt;em&gt;quickly switch over to start your debug server within the 5&amp;nbsp;seconds&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;auto-start current&amp;nbsp;file&lt;/li&gt;
&lt;li&gt;auto-start a url (for&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;PHP&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;remember the last 5 urls&amp;nbsp;started&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;huge code&amp;nbsp;redesign&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;better help for&amp;nbsp;commands&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;live stack&amp;nbsp;view&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;watch&amp;nbsp;expressions&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Screencast!&lt;/h2&gt;
&lt;p&gt;.. youtube::&amp;nbsp;kairdgZCD1U&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Why it would be hard for me to give up git for mercurial</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-13-why-it-would-be-hard-me-give-git-mercurial.html"/>
            <updated>2010-07-13T21:50:54Z</updated>
            <published>2010-07-13T21:50:54Z</published>
            <id>/blog/2010-Jul-13-why-it-would-be-hard-me-give-git-mercurial.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/images/git-hgm.png&lt;/p&gt;
&lt;p&gt;I discovered &lt;code&gt;git&lt;/code&gt; fairly recently, actually (near the end of last year), but already it has become an integral player in my arsenal of powertools. That said, I have also become intrigued by &lt;code&gt;mercurial&lt;/code&gt; over the past month or so, but not quite enough to&amp;nbsp;switch.&lt;/p&gt;
&lt;p&gt;I think I&amp;#8217;ve narrowed down the benefits I can&amp;nbsp;see:&lt;/p&gt;
&lt;p&gt;Git:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;staging area (&lt;strong&gt;big one&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;greater merge&amp;nbsp;flexibility&lt;/li&gt;
&lt;li&gt;great local&amp;nbsp;branching&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mercurial:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;written in&amp;nbsp;python&lt;/li&gt;
&lt;li&gt;good plugin&amp;nbsp;system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mercurial things that I don&amp;#8217;t really care about but that others have&amp;nbsp;said:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nice Windows&amp;nbsp;client&lt;/li&gt;
&lt;li&gt;eclipse&amp;nbsp;integration&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;simpler&amp;#8221;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From that list, it looks like Git&amp;#8217;s benefits are all infrastructure related, where as Mercurial&amp;#8217;s advantages are derived from implementation&amp;nbsp;specifics.&lt;/p&gt;
&lt;p&gt;Do you suppose we could have a port of Git to python, w/ a good plugin system? That would seriously be my &amp;#8220;best of both&amp;nbsp;worlds&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Are there any killer arguments against a staging area? Or key structural benefits of mercurial that I&amp;nbsp;overlooked?&lt;/p&gt;
&lt;p&gt;Mercurial has a pretty sweet logo&amp;nbsp;though&amp;#8230;&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Integrated python debugging in VIM</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-12-integrated-python-debugging-vim.html"/>
            <updated>2010-07-12T17:19:19Z</updated>
            <published>2010-07-12T17:19:19Z</published>
            <id>/blog/2010-Jul-12-integrated-python-debugging-vim.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/projects/logo__.png&lt;/p&gt;
&lt;p&gt;A few days ago, I posted that I was taking over &lt;code&gt;a project &amp;lt;http://jaredforsyth.com/projects/vim-debug/&amp;gt;&lt;/code&gt;_ which provides a debugging environment in &lt;span class=&#34;caps&#34;&gt;VIM&lt;/span&gt;, specifically geared toward &lt;span class=&#34;caps&#34;&gt;PHP&lt;/span&gt;. Soon after a guy w/ the handle Epeli asked (perhaps not very grammatically), &amp;#8220;I can we debug Python like this with&amp;nbsp;Vim?&amp;#8221;&lt;/p&gt;
&lt;p&gt;but we&amp;#8217;ll forgive the grammar because he&amp;#8217;s from Finland, and I can&amp;#8217;t pronounce &lt;code&gt;the name of his home town &amp;lt;http://esa-matti.suuronen.org/&amp;gt;&lt;/code&gt;_&amp;#8230;&lt;/p&gt;
&lt;p&gt;But it was an awesome question! I thought, well why not? The debugger is really just interfacing with a server which conforms to the &lt;code&gt;DBGp specification &amp;lt;http://www.xdebug.org/docs-dbgp.php&amp;gt;&lt;/code&gt;&lt;em&gt;, and after looking around I was happy to find that &lt;code&gt;ActiveState had done most of the legwork for me &amp;lt;http://downloads.activestate.com/Komodo/releases/6.0.0b1/remotedebugging/&amp;gt;&lt;/code&gt;&lt;/em&gt;. Unfortunately, there were a few show-stopping bugs in their code, and I couldn&amp;#8217;t find it anywhere on version control (though it is open source), so I took the liberty of throwing it &lt;code&gt;up on github &amp;lt;http://github.com/jabapyth/pydbgp&amp;gt;&lt;/code&gt;_ and added my patches &amp;#8212; so now it&amp;#8217;s ready to&amp;nbsp;use!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[btw if it is on a &lt;span class=&#34;caps&#34;&gt;VCS&lt;/span&gt; somewhere and I missed it, let me know so I can send my fixes&amp;nbsp;upstream]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s right; we now have integrated debugging in your favorite power tool (well, mine anyway):&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;VIM&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s an &lt;code&gt;annotated screenshot &amp;lt;http://jaredforsyth.com/media/uploads/images/vim_debug.jpeg&amp;gt;&lt;/code&gt;_ of an active session,&amp;nbsp;showcasing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;breakpoints&lt;/li&gt;
&lt;li&gt;watch&amp;nbsp;expressions&lt;/li&gt;
&lt;li&gt;execution stack&amp;nbsp;view&lt;/li&gt;
&lt;li&gt;current&amp;nbsp;scope&lt;/li&gt;
&lt;li&gt;output stream&amp;nbsp;copying&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the &lt;code&gt;github project page &amp;lt;http://jabapyth.github.com/pydbgp/&amp;gt;&lt;/code&gt;_, you can find &lt;strong&gt;install instructions&lt;/strong&gt; for the python server. I&amp;#8217;ll soon put together install instructions for&amp;nbsp;vim-debug.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Python Registrar</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-10-python-registrar.html"/>
            <updated>2010-07-10T15:49:25Z</updated>
            <published>2010-07-10T15:49:25Z</published>
            <id>/blog/2010-Jul-10-python-registrar.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/projects/logo_.png&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a small library I&amp;#8217;ve been playing around with: registrar. I often find myself writing meta&amp;nbsp;decorators:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_reg = {}
def register(name):
     def meta(func):
          _reg[name] = func
          return func
     return meta
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or some such thing. And that solution is very often enough. But, for the times when you need a bit more control, I&amp;#8217;ve created &lt;code&gt;Registrar &amp;lt;http://jaredforsyth.com/projects/registrar/&amp;gt;&lt;/code&gt;_. The situation that prompted me to write this was within the confines of a class &amp;#8212; and the functions were being &amp;#8220;registered&amp;#8221; before they became&amp;nbsp;bound&amp;#8230;&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the&amp;nbsp;registrar:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import types
class Registrar:
    def __init__(self, swallow=False):
        self.reg = {}
        self.swallow = swallow

    def register(self, *args, **kwds):
        def meta(func):
            self.add(func, args, kwds)
            if not self.swallow:
                return func
        return meta   
    __call__ = register

    def add(self, func, args, kwds):
        self.reg[func] = (args, kwds)

    def bind(self, inst):
        res = {}
        for func, value in self.reg.iteritems():
            if callable(func):
                func = types.MethodType(func, inst, inst.__class__)
            res[func] = value
        return res
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And a subclass, if you want a name (or other id) associated w/ your&amp;nbsp;function&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class NamedRegistrar(Registrar):
    def add(self, func, args, kwds):
        if not args:
            raise TypeError(&#39;at least one positional argument required (0 given)&#39;)
        self.reg[args[0]] = (func, args[1:], kwds)
        return func

    def bind(self, inst):
        res = {}
        for name, value in self.reg.iteritems():
            value = list(value)
            if callable(value[0]):
                value[0] = types.MethodType(value[0], inst, inst.__class__)
            res[name] = list(value)
        return res
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But of course all you want is an honest application. So here&amp;#8217;s an example using event&amp;nbsp;handling:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Spam:
    def __init__(self):
        self.events = self._events.bind(self)

        # or
        self.shop = Shoppe()
        for event, value in self._events.bind(self):
            self.show.addEventHandler(event, value[0], **value[2])

    ## setup events
    _events = NamedRegistrar()

    @_events(&#39;cheese&#39;, bubble=False)
    def onCheese(self, baz):
        pass

    @_events(&#39;eggs&#39;)
    def onEggs(self, baz):
        return &#39;no eggs. cheese.&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Has anyone done this before? Am a solving a problem that doesn&amp;#8217;t exist? Tell me in the&amp;nbsp;comments.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Tabbify your vim</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-09-tabbify-your-vim.html"/>
            <updated>2010-07-09T20:00:00Z</updated>
            <published>2010-07-09T20:00:00Z</published>
            <id>/blog/2010-Jul-09-tabbify-your-vim.html</id>
            
            <content type="html">
                                &lt;p&gt;I&amp;#8217;ve just [re]discovered Vim&amp;#8217;s tabs. Which are awesome. What isn&amp;#8217;t so awesome is the movement between tabs&amp;#8230; &lt;code&gt;:tabnew&lt;/code&gt; &lt;code&gt;:tabn&lt;/code&gt; &lt;code&gt;:tabp&lt;/code&gt;. Of course, the beauty of vim is customization &amp;#8212; it&amp;#8217;s trivial to make your own&amp;nbsp;keybindings.&lt;/p&gt;
&lt;p&gt;I&amp;nbsp;chose:&lt;/p&gt;
&lt;p&gt;:new: \tn
  :prev: &lt;Control&gt; Left
  :next: &lt;Control&gt; Right&lt;/p&gt;
&lt;p&gt;Unfortunately, the normal &lt;C-%&gt; notation doesn&amp;#8217;t work for &amp;#8220;left&amp;#8221; and &amp;#8220;right&amp;#8221; (maybe it&amp;#8217;s just my keyboard; idk) Anyway, here&amp;#8217;s what I had to enter (in my&amp;nbsp;.vimrc)::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map ^[[1;5D :tabp&amp;lt;cr&amp;gt;
map ^[[1;5C :tabn&amp;lt;cr&amp;gt;
map &amp;lt;Leader&amp;gt;tn :tabnew&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yeah; &lt;code&gt;^[[1;5D&lt;/code&gt; = &lt;C-Left&gt;. Don&amp;#8217;t ask me&amp;nbsp;why.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Announcing: vim-phpdebug</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-09-announcing-vim-phpdebug.html"/>
            <updated>2010-07-09T09:49:05Z</updated>
            <published>2010-07-09T09:49:05Z</published>
            <id>/blog/2010-Jul-09-announcing-vim-phpdebug.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/projects/logo.png&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve just taken over maintenance of a &lt;code&gt;really sweet plugin &amp;lt;http://jaredforsyth.com/projects/vim-phpdebug/&amp;gt;&lt;/code&gt;&lt;em&gt; for integrated &lt;span class=&#34;caps&#34;&gt;PHP&lt;/span&gt; debugging in &lt;span class=&#34;caps&#34;&gt;VIM&lt;/span&gt; (written in python!). It&amp;#8217;s &lt;code&gt;been dead for 3 years &amp;lt;http://www.vim.org/scripts/script.php?script_id=1929&amp;gt;&lt;/code&gt;&lt;/em&gt;, so I figure the air is&amp;nbsp;clear&amp;#8230;&lt;/p&gt;
&lt;p&gt;anyway, the code is &lt;code&gt;up on github &amp;lt;http://github.com/jabapyth/vim-phpdebug&amp;gt;&lt;/code&gt;&lt;em&gt;, and I&amp;#8217;ve got some features I know I want to add, but even more I&amp;#8217;d like to hear what the community wants. [the plugin is really an interface with &lt;code&gt;xdebug &amp;lt;http://www.xdebug.org/&amp;gt;&lt;/code&gt;&lt;/em&gt;, but the most common usage of this that I&amp;#8217;ve seen is&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;PHP&lt;/span&gt;.]&lt;/p&gt;
&lt;p&gt;Features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;integration with&amp;nbsp;xdebug&lt;/li&gt;
&lt;li&gt;step&amp;nbsp;(into/over/out)&lt;/li&gt;
&lt;li&gt;live stack&amp;nbsp;view&lt;/li&gt;
&lt;li&gt;breakpoint&amp;nbsp;set/remove&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Planned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;live interaction&amp;nbsp;console&lt;/li&gt;
&lt;li&gt;conditional&amp;nbsp;breakpoints&lt;/li&gt;
&lt;li&gt;watch&amp;nbsp;expressions&lt;/li&gt;
&lt;li&gt;live scope&amp;nbsp;view&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here&amp;#8217;s a screenshot: &lt;code&gt;[full size] &amp;lt;http://jaredforsyth.com/media/uploads/Terminal_019.jpeg&amp;gt;&lt;/code&gt;_&lt;/p&gt;
&lt;p&gt;.. image:: http://jaredforsyth.com/media/uploads/Terminal_019.jpeg
    :width:&amp;nbsp;450&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">JSON parsing in python</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-08-json-parsing-python.html"/>
            <updated>2010-07-08T12:00:00Z</updated>
            <published>2010-07-08T12:00:00Z</published>
            <id>/blog/2010-Jul-08-json-parsing-python.html</id>
            
            <content type="html">
                                &lt;p&gt;I&amp;#8217;ve done some benchmarks on &lt;span class=&#34;caps&#34;&gt;JSON&lt;/span&gt; parsing, and I thought I&amp;#8217;d share the&amp;nbsp;results.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[click here for a live graph] &amp;lt;http://jaredforsyth.com/media/uploads/json_display/view.html&amp;gt;&lt;/code&gt;_&lt;/p&gt;
&lt;p&gt;.. image:: http://jaredforsyth.com/media/uploads/Selection_018.jpeg
   :align:&amp;nbsp;left&lt;/p&gt;
&lt;p&gt;(note: simplejson, jsonlib and cjson all finished ~.02 seconds, so you can&amp;#8217;t really see the&amp;nbsp;bars)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[here&#39;s the code I used, if you want it -- run &#34;runner.py&#34;] &amp;lt;http://jaredforsyth.com/media/uploads/json_tests.tgz&amp;gt;&lt;/code&gt;_&lt;/p&gt;
&lt;p&gt;The main reason for testing several different parsing solutions was to compare them to my own json library, which is &lt;strong&gt;only 66 lines long&lt;/strong&gt;. And it has comparable performance to other pure-python json libraries. How is this done? &lt;code&gt;Codetalker &amp;lt;http://jaredforsyth.com/projects/codetalker/&amp;gt;&lt;/code&gt;_&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Codetalker&lt;/strong&gt; is a parsing library that I&amp;#8217;ve been developing on and off for the past few months, which aims to facilitate easy and intuitive declaration of grammars, in a pythonic fashion that is influenced by the tradition of &lt;span class=&#34;caps&#34;&gt;BNF&lt;/span&gt;, without compromising speed or&amp;nbsp;flexibility.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be writing much more about Codetalker in the near future (if I can find the time), but for now feel free to see for yourself just how easy using codetalker is, with my 66 line &lt;code&gt;example json parser &amp;lt;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/json.py&amp;gt;&lt;/code&gt;_&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Announcing: Codetalker</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-08-announcing-codetalker.html"/>
            <updated>2010-07-08T01:38:08Z</updated>
            <published>2010-07-08T01:38:08Z</published>
            <id>/blog/2010-Jul-08-announcing-codetalker.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/projects/navajo.gif&lt;/p&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Well, I&amp;#8217;ve done it again. I&amp;#8217;ve put off blogging about a project for so long that it is impossible for me to do justice to all the cool things that have been going on; so I&amp;#8217;ll skip most of&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Codetalker&lt;/strong&gt; is a project that has actually been bubbling away on my back burner for probably over a year now, and which has seen its share of complete overhauls, but which I think is now ready to come into the&amp;nbsp;light.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Codetalker &amp;lt;http://jaredforsyth.com/projects/codetalker/&amp;gt;&lt;/code&gt;&lt;em&gt; takes much of its design inspiration from the excellent documentation python has of its &lt;code&gt;Official Grammar &amp;lt;http://docs.python.org/reference/grammar.html&amp;gt;&lt;/code&gt;&lt;/em&gt; and the &lt;code&gt;&#34;Abstract Grammar&#34; &amp;lt;http://docs.python.org/library/ast.html#abstract-grammar&amp;gt;&lt;/code&gt;_ defined in the &lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt; module. While creating Codetalker, I looked at those two documents and thought &amp;#8220;there&amp;#8217;s no reason why defining a parser should be any harder than&amp;nbsp;this.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Of course, I am well aware that This Has Been Done Before. I&amp;#8217;ve looked at many solutions, and been unsatisfied with all (obviously, as I&amp;#8217;ve decided to make my&amp;nbsp;own).&lt;/p&gt;
&lt;p&gt;One problem with many existing solutions is that they are limited in power and flexibility by a reliance on a &lt;code&gt;DSL &amp;lt;http://en.wikipedia.org/wiki/Domain-specific_language&amp;gt;&lt;/code&gt;&lt;em&gt; (often &lt;code&gt;BNF-like &amp;lt;http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form&amp;gt;&lt;/code&gt;&lt;/em&gt;) for grammar definition. This is where codetalker started as well, but one of the chief things that bugged me was the fact that whichever system I used, it was both rigid and arbitrary. I wrote grammar-parsers for several different forms before deciding that &lt;em&gt;there had to be a better way&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And there was. &amp;#8220;Who am I to reinvent the wheel?&amp;#8221; I asked (conveniently forgetting that I have, on many occasions, done just that). So I went back to python. Flexible? Totally. Powerful? Definitely. Capable? Of course. And doing everything in python allowed me to avoid the kind of frankinsteined mashups that are &lt;span class=&#34;caps&#34;&gt;ANTLR&lt;/span&gt; grammar&amp;nbsp;definitions.&lt;/p&gt;
&lt;h1&gt;Parsing&lt;/h1&gt;
&lt;p&gt;To whet your palate, here&amp;#8217;s what a &lt;span class=&#34;caps&#34;&gt;JSON&lt;/span&gt; parser looks&amp;nbsp;like:&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# rules (value is the start rule)
def value(rule):
    rule | dict_ | list_ | STRING | TFN | NUMBER
    rule.pass_single = True

def dict_(rule):
    rule | (&#39;{&#39;, [commas((STRING, &#39;:&#39;, value))], &#39;}&#39;)
    rule.astAttrs = {&#39;keys&#39;: STRING, &#39;values&#39;: value}
dict_.astName = &#39;Dict&#39;

def list_(rule):
    rule | (&#39;[&#39;, [commas(value)], &#39;]&#39;)
    rule.astAttrs = {&#39;values&#39;: value}
list_.astName = &#39;List&#39;

grammar = Grammar(start=value,
         tokens=[STRING, NUMBER, NEWLINE, WHITE, SYMBOL, TFN],
         ignore=[WHITE, NEWLINE],
         ast_tokens=[STRING, TFN, NUMBER])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And yes, that is a complete parser in 12 lines of code. [for the full json parser + translator, &lt;code&gt;check this out &amp;lt;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/json.py&amp;gt;&lt;/code&gt;_]&lt;/p&gt;
&lt;p&gt;First off, the one possibly evil thing that codetalker does is modification through the bitwise &lt;span class=&#34;caps&#34;&gt;OR&lt;/span&gt; operator&amp;#8230; Yes, traditionally one should not modify an object using infix operators, but I considered many other options and this seemed the most intuitive while mainatining brevity. [You can still do rule.add_option(&amp;#8230;) if you&amp;nbsp;like].&lt;/p&gt;
&lt;h2&gt;Grammar&amp;nbsp;sugar&lt;/h2&gt;
&lt;p&gt;Some of the sugar in there is the fact that a list &lt;code&gt;[stuff]&lt;/code&gt; denotes &lt;em&gt;optional&lt;/em&gt; (for similarity with some &lt;span class=&#34;caps&#34;&gt;BNF&lt;/span&gt; styles). For other fancy regular expression sugar, you have the special functions &lt;code&gt;_or(...)&lt;/code&gt;, &lt;code&gt;star(...)&lt;/code&gt;, and &lt;code&gt;plus(...)&lt;/code&gt; which apply to &lt;code&gt;foo | baz&lt;/code&gt;, &lt;code&gt;foo*&lt;/code&gt; and &lt;code&gt;foo+&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The final piece of the definition that might look a bit strange is the &lt;code&gt;commas&lt;/code&gt; function calls. Is this special? Not really. It&amp;#8217;s actually just a factory function &amp;#8212; very&amp;nbsp;straightforward:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def commas(item):
    return (item, star(&#39;,&#39;, item), [&#39;,&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;#8217;s where you can see the real power of skipping the &lt;span class=&#34;caps&#34;&gt;BNF&lt;/span&gt; and defining the grammar straight in python. Another, more complex factory function is &lt;code&gt;binop&lt;/code&gt;, used in the &lt;code&gt;math.py example grammar &amp;lt;http://github.com/jabapyth/codetalker/blob/master/codetalker/contrib/math.py&amp;gt;&lt;/code&gt;&lt;em&gt;. (both &lt;code&gt;binop&lt;/code&gt; and &lt;code&gt;commas&lt;/code&gt; are defined in &lt;code&gt;codetalker/pgm/special.py &amp;lt;http://github.com/jabapyth/codetalker/blob/master/codetalker/pgm/special.py&amp;gt;&lt;/code&gt;&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;entire parser&lt;/strong&gt; for mathematical expressions is 2 lines long, thanks to &lt;code&gt;binop&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;expression = binop(list(&#39;-+&#39;), list(&#39;*/%&#39;),
          [&#39;**&#39;], value=NUMBER, ops_token=OP,
          name=&#39;BinOp&#39;, paren=True)
grammar = pgm.Grammar(start=expression,
          tokens = [OP, NUMBER, SYMBOL, WHITE, NEWLINE],
          ignore = [WHITE, NEWLINE], ast_tokens=[NUMBER])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;binop&lt;/code&gt; function actually generates a grammar function as opposed to just a grammar tuple, which function is&amp;nbsp;essentially:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def meta(rule):
    rule | (value, star(_or(*ops), value))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where &lt;code&gt;value&lt;/code&gt; is the next rule down the precedence line, and &lt;code&gt;ops&lt;/code&gt; is the list of operators at that precedence level (&lt;code&gt;[&#39;+&#39;,&#39;-&#39;]&lt;/code&gt; for the topmost&amp;nbsp;rule).&lt;/p&gt;
&lt;h1&gt;Abstract Syntax&amp;nbsp;Tree&lt;/h1&gt;
&lt;p&gt;As any good compiler knows, parsing is nice, but not nice enough &amp;#8212; one must take the raw parse tree (which retains all the non-essential things like spaces and comments) and generate an &lt;code&gt;Abstract Syntax Tree &amp;lt;http://en.wikipedia.org/wiki/Abstract_syntax_tree&amp;gt;&lt;/code&gt;_.&lt;/p&gt;
&lt;p&gt;With Codetalker, you get this almost for free (along with&amp;#8230;most everything else). For an example, let&amp;#8217;s take the &lt;code&gt;Dict&lt;/code&gt; ast node from the above json&amp;nbsp;parser.&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def dict_(rule):
    rule | (&#39;{&#39;, [commas((STRING, &#39;:&#39;, value))], &#39;}&#39;)
    rule.astAttrs = {&#39;keys&#39;: STRING, &#39;values&#39;: value}
dict_.astName = &#39;Dict&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;astAttrs&lt;/code&gt; attribute defines&amp;#8230;the attributes you want collected in the &lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt;. &lt;code&gt;func.astName&lt;/code&gt; defaults to the function name, and is used as the name for the resulting &lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt; Class&amp;nbsp;name.&lt;/p&gt;
&lt;p&gt;As far as &lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt; attributes go, this is about as simple as it gets: if you put a function or token as the value, it automatically collects all children matching that type for you. Otherwise, it looks for a dictionary on the other side, with the following&amp;nbsp;keys:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:type: rule or token *this is the only required parameter*
:single: bool; *grab only the first child of that type (default:* ``False`` *)*
:start: int 
:end: int; *start and end are for slicing -- e.g. only grab the first three IDs. start can also be used in conjunction with* ``single:True`` *to get a child other than the first.*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And&amp;#8230; that&amp;#8217;s all I&amp;#8217;ll put down. Be back soon to preview the actual translation&amp;nbsp;process.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">String concatenation kills babies</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jun-26-string-concatenation-kills-babies.html"/>
            <updated>2010-06-26T18:16:03Z</updated>
            <published>2010-06-26T18:16:03Z</published>
            <id>/blog/2010-Jun-26-string-concatenation-kills-babies.html</id>
            
            <content type="html">
                                &lt;p&gt;Or at least your performance. I know I&amp;#8217;ve heard a couple of times about the inefficiencies of CPython&amp;#8217;s string concatenation, but now I have real-world&amp;nbsp;experience&amp;#8230;&lt;/p&gt;
&lt;p&gt;I just boosted my performance 20x, just by switching to a join() in &lt;code&gt;a project I&#39;m developing &amp;lt;http://github.com/jabapyth/codetalker&amp;gt;&lt;/code&gt;_&amp;#8230;&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Exceptions for failure reporting [performance]</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jun-22-exceptions-for-failure-reporting.html"/>
            <updated>2010-06-22T11:13:57Z</updated>
            <published>2010-06-22T11:13:57Z</published>
            <id>/blog/2010-Jun-22-exceptions-for-failure-reporting.html</id>
            
            <content type="html">
                                &lt;p&gt;I was wondering how much (if any) of a hit performance would take were I to make excessive use of exceptions, not merely for error reporting, but also for reporting failure (in place of, say, returning None to indicate&amp;nbsp;failure).&lt;/p&gt;
&lt;p&gt;The results were pretty&amp;nbsp;conclusive.&lt;/p&gt;
&lt;p&gt;::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;excepting x 1000        0.0023729801178
returning x 1000         0.000326871871948
returning is 7.259664x faster

excepting x 10000       0.0235891342163
returning x 10000        0.00333189964294
returning is 7.079785x faster

excepting x 100000      0.232646942139
returning x 100000      0.0326859951019
returning is 7.117634x faster

excepting x 1000000     2.29647302628
returning x 1000000     0.318130016327
returning is 7.218662x faster
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here&amp;#8217;s the&amp;nbsp;code:&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">CleverCSS reloaded</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jun-17-clevercss-reloaded.html"/>
            <updated>2010-06-17T07:32:47Z</updated>
            <published>2010-06-17T07:32:47Z</published>
            <id>/blog/2010-Jun-17-clevercss-reloaded.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image::&amp;nbsp;/media/uploads/ccss.png&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been meaning to jump into the wonderful world of &lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; meta-languages, but I was turned off by their propensity to be &lt;code&gt;in &amp;lt;http://sass-lang.com/&amp;gt;&lt;/code&gt;&lt;em&gt; &lt;code&gt;ruby &amp;lt;http://lesscss.org/&amp;gt;&lt;/code&gt;&lt;/em&gt; (into which I don&amp;#8217;t particularly want to jump); then I found &lt;code&gt;CleverCSS &amp;lt;http://sandbox.pocoo.org/clevercss/&amp;gt;&lt;/code&gt;_.&lt;/p&gt;
&lt;p&gt;Diving into the code I was a little put off by the &lt;code&gt;1600+ line(!) monolithic approach &amp;lt;http://github.com/dziegler/clevercss/blob/master/clevercss.py&amp;gt;&lt;/code&gt;&lt;em&gt; — fortunately, it&amp;#8217;s hosted on github and open source :) so I &lt;code&gt;forked it &amp;lt;http://github.com/jabapyth/clevercss&amp;gt;&lt;/code&gt;&lt;/em&gt;, split it into (primarily) seven different files, and generally reorganized&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Other than that, I didn&amp;#8217;t really do much, but now that it&amp;#8217;s in a more digestible format, I expect to do some more hacking away in the&amp;nbsp;future.&lt;/p&gt;
&lt;p&gt;here&amp;#8217;s &lt;code&gt;my fork &amp;lt;http://github.com/jabapyth/clevercss&amp;gt;&lt;/code&gt;_ of the&amp;nbsp;repo.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">What does setuptools &#34;test&#34; do?</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jun-16-what-does-setuptools-test-do.html"/>
            <updated>2010-06-16T18:28:44Z</updated>
            <published>2010-06-16T18:28:44Z</published>
            <id>/blog/2010-Jun-16-what-does-setuptools-test-do.html</id>
            
            <content type="html">
                                &lt;p&gt;I remember reading a post on planet python about package testing, and that many people use &amp;#8220;setup.py test&amp;#8221;. The thing is, I can&amp;#8217;t seem to find anywhere that documents just what &amp;#8220;setup.py test&amp;#8221; does &amp;#8212; it&amp;#8217;s some setuptools&amp;nbsp;magic.&lt;/p&gt;
&lt;p&gt;Can anyone point me in the right&amp;nbsp;direction?&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Announcing: Django-RESTive</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jun-02-announcing-django-restive.html"/>
            <updated>2010-06-02T09:29:59Z</updated>
            <published>2010-06-02T09:29:59Z</published>
            <id>/blog/2010-Jun-02-announcing-django-restive.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/projects/djanfo-restive.png&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;res·tive&lt;/strong&gt;: &lt;em&gt;marked by impatience or&amp;nbsp;uneasiness&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;django-restive &amp;lt;http://jaredforsyth.com/projects/django-restive/&amp;gt;&lt;/code&gt;_ is a
short and sweet library for setting up RESTful services in django - both the
django backend and, if you want the javascript&amp;nbsp;frontend.&lt;/p&gt;
&lt;p&gt;It was created for the &lt;span class=&#34;caps&#34;&gt;AJAX&lt;/span&gt; webapp I&amp;#8217;m currently devving &amp;#8212; or rather, spun
off of it. As with many apps, restive was originally built into another project (&lt;code&gt;GameCC &amp;lt;http://github.com/jabapyth/GameCC&amp;gt;&lt;/code&gt;_) until I realized it deserved an
app of its&amp;nbsp;own.&lt;/p&gt;
&lt;p&gt;A few items of&amp;nbsp;interest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;all communication is in&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;JSON&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;on the client side, &lt;span class=&#34;caps&#34;&gt;POST&lt;/span&gt; to the url with the &lt;code&gt;data&lt;/code&gt; keyword holding a &lt;span class=&#34;caps&#34;&gt;JSON&lt;/span&gt;
    serialized dictionary of &lt;code&gt;key, value&lt;/code&gt; pairs which will be passed to the
    function as keyword&amp;nbsp;arguments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;on the server side, return a dictionary which will be &lt;span class=&#34;caps&#34;&gt;JSON&lt;/span&gt; serialized and
    output as&amp;nbsp;text.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;passing Django models is also supported. From the server side, if the
  returned dictionary has_key &lt;code&gt;_models&lt;/code&gt;, they will be serialized using
  Django&amp;#8217;s built-in &lt;span class=&#34;caps&#34;&gt;JSON&lt;/span&gt;&amp;nbsp;serializer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;I plan to support &lt;span class=&#34;caps&#34;&gt;CSRF&lt;/span&gt; token&amp;nbsp;checking.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The aim of &lt;em&gt;restive&lt;/em&gt; is to get in the way as little as possible&amp;nbsp;=).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here&amp;#8217;s a short sample:&lt;/strong&gt; &lt;code&gt;my_app/rest.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from restive import Service

service = Service()

@service.add
def hello(request, name=&#39;Jimmy&#39;):
    return {&#39;message&#39;: &#39;Hello %s!&#39; % name}

urlpatterns = service.urls()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and in &lt;code&gt;my_project/urls.py&lt;/code&gt; just&amp;nbsp;do&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;urlpatterns = patterns(&#39;&#39;,
    (&#39;^myapp/&#39;, include(&#39;my_app.rest&#39;))
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;#8217;s as simple as that! Now &lt;code&gt;http://example.com/myapp/hello/&lt;/code&gt; is live and&amp;nbsp;kicking.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;django-restive &lt;span class=&#34;caps&#34;&gt;II&lt;/span&gt;: return of the client-side&lt;/em&gt; coming&amp;nbsp;soon.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Pyjamas and PJS in depth</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-31-pyjamas-and-pjs-depth.html"/>
            <updated>2010-05-31T18:13:10Z</updated>
            <published>2010-05-31T18:13:10Z</published>
            <id>/blog/2010-May-31-pyjamas-and-pjs-depth.html</id>
            
            <content type="html">
                                &lt;p&gt;So there hasn&amp;#8217;t been too much going on here for about the past month&amp;nbsp;:)&lt;/p&gt;
&lt;p&gt;At the beginning of may, I started working on the front-end for the GameCC Editor, and Pyjamas caught my eye &amp;#8212; my experiences with javascript are often fraught with frustration at the inheritance system there, so I though PyJamas would be the perfect fit &amp;#8212; python input, javascript output, everyone&amp;#8217;s&amp;nbsp;happy!&lt;/p&gt;
&lt;p&gt;Unfortunately my initial experiences playing around with pyjamas were less than enjoyable. In &lt;em&gt;running one of there examples&lt;/em&gt;, the build worked, but the output javascript was broken. To compound the problem, as I traced through the javascript, I discovered &lt;strong&gt;minimal error/sanity checking on the javascript side&lt;/strong&gt;; things like passing undefined around as arguments weren&amp;#8217;t even&amp;nbsp;checked.&lt;/p&gt;
&lt;p&gt;When I finally tracked down the bug, (which was actually in their compiler) I wasn&amp;#8217;t completely put off; in fact I was all ready to jump in for some core development, fix the problems I&amp;#8217;d seen and generally make the world a better place&amp;nbsp;;).&lt;/p&gt;
&lt;p&gt;Jumping into the code wasn&amp;#8217;t as straightforward as I had imagined, and I soon decided that what was needed (or at least what I wanted) was a ground-up rewrite. Perhaps I was premature in this decision, but the damage is done&amp;#8230;and PJs was what I came up with! Over the past month I&amp;#8217;ve been busy bringing PJs from a twinkle in my eye to a full-fledged conversion solution. For a quick look at what It can currently do, take a look at &lt;code&gt;the tests directory &amp;lt;http://github.com/jabapyth/PJs/tree/master/test/py/&amp;gt;&lt;/code&gt;_&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Easy zsh auto completion</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-30-easy-zsh-auto-completion.html"/>
            <updated>2010-05-30T00:39:05Z</updated>
            <published>2010-05-30T00:39:05Z</published>
            <id>/blog/2010-May-30-easy-zsh-auto-completion.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/zsh-completion.png&lt;/p&gt;
&lt;p&gt;It took a surprising amount of looking to figure out how to create a custom zsh completion rule&amp;#8230;so I&amp;#8217;ll share my&amp;nbsp;findings.&lt;/p&gt;
&lt;p&gt;For a static&amp;nbsp;list:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;bash&lt;/p&gt;
&lt;p&gt;compctl -k &amp;#8220;(one two other possibility)&amp;#8221;&amp;nbsp;command-name&lt;/p&gt;
&lt;p&gt;those are space separated, surrounded first by parenthesis and then by&amp;nbsp;quotes.&lt;/p&gt;
&lt;p&gt;For some dynamic completion, you specify a&amp;nbsp;function:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;bash&lt;/p&gt;
&lt;p&gt;_my_cpl() {
       reply=(one two other possibility)
   }
   compctl -K _my_cpl&amp;nbsp;command-name&lt;/p&gt;
&lt;p&gt;..&amp;nbsp;note::&lt;/p&gt;
&lt;p&gt;the option is &lt;code&gt;-K&lt;/code&gt; (capital)&lt;/p&gt;
&lt;p&gt;Ok, so my example doesn&amp;#8217;t do anything cool and dynamic =) but that was&amp;nbsp;bare-bones. &lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s an example of what I&amp;#8217;m doing for my &lt;code&gt;PBJ &amp;lt;http://jaredforsyth.com/projects/pbj/&amp;gt;&lt;/code&gt;_&amp;nbsp;completion:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;bash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_make_pbj() {                     
    local a
    read -l a
    reply=(`./make.pbj --list &#34;$a&#34;`)
}
compctl -K _make_pbj ./make.pbj
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;..&amp;nbsp;note::&lt;/p&gt;
&lt;p&gt;The command name this time is &lt;code&gt;./make.pbj&lt;/code&gt; &amp;#8212; that&amp;#8217;s totally&amp;nbsp;legal. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;read -l&lt;/code&gt; returns the text currently being typed in (e.g. &lt;code&gt;./make.pbj some_arg&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Anyway, the zshell function is pretty simple here, too, but it runs a command to get completion options. The &amp;#8220;./make.pbj&amp;#8221; file outputs a space-separated list of build targets (&lt;code&gt;PBJ is a build framework &amp;lt;http://jaredforsyth.com/projects/pbj/&amp;gt;&lt;/code&gt;_) which are then interpreted by zsh for&amp;nbsp;you!&lt;/p&gt;
&lt;p&gt;Some helpful&amp;nbsp;references:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://zshwiki.org/home/examples/compctl&lt;/li&gt;
&lt;li&gt;http://linux.die.net/man/1/zshcompctl&lt;/li&gt;
&lt;li&gt;http://www.ibm.com/developerworks/aix/library/au-satzsh.html#&lt;span class=&#34;caps&#34;&gt;N102BD&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;            </content>
        </entry>
            <entry>
            <title type="html">My latest IE annoyance</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-26-my-latest-ie-annoyance.html"/>
            <updated>2010-05-26T13:40:24Z</updated>
            <published>2010-05-26T13:40:24Z</published>
            <id>/blog/2010-May-26-my-latest-ie-annoyance.html</id>
            
            <content type="html">
                                &lt;p&gt;Wow. I really hate Internet Explorer. There are so many &lt;em&gt;bugs&lt;/em&gt;! It&amp;#8217;s a nightmare to program for, even&amp;nbsp;now!&lt;/p&gt;
&lt;p&gt;anyway; consider the&amp;nbsp;following.&lt;/p&gt;
&lt;p&gt;var b = 3;
var a = function b(){};&amp;nbsp;alert(b);&lt;/p&gt;
&lt;p&gt;any standards-sompliant browser would alert &amp;#8220;3&amp;#8221;; but no &amp;#8212; &lt;span class=&#34;caps&#34;&gt;IE&lt;/span&gt; leaks the function name into the surrounding namespace, and in fact creates &lt;em&gt;two different functions&lt;/em&gt;. Really,&amp;nbsp;microsoft?&lt;/p&gt;
&lt;p&gt;http://yura.thinkweb2.com/named-function-expressions/&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Just wasted an hour; thanks, Rhino</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-26-just-wasted-hour-thanks-rhino.html"/>
            <updated>2010-05-26T10:19:35Z</updated>
            <published>2010-05-26T10:19:35Z</published>
            <id>/blog/2010-May-26-just-wasted-hour-thanks-rhino.html</id>
            
            <content type="html">
                                &lt;p&gt;Was running the tests for PJs, when I suddenly got hit w/ a total meltdown on the Rhino end &amp;#8212; Java exceptions and&amp;nbsp;all. &lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;java&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Exception in thread &#34;main&#34; java.lang.RuntimeException: Token: 159
    at org.mozilla.javascript.Decompiler.decompile(Decompiler.java:821)
    at org.mozilla.javascript.NativeFunction.decompile(NativeFunction.java:74)
    at org.mozilla.javascript.BaseFunction.execIdCall(BaseFunction.java:262)
    at org.mozilla.javascript.IdFunctionObject.call(IdFunctionObject.java:129)
    at org.mozilla.javascript.Interpreter.interpretLoop(Interpreter.java:3330)
    at org.mozilla.javascript.Interpreter.interpret(Interpreter.java:2487)
    at org.mozilla.javascript.InterpretedFunction.call(InterpretedFunction.java:164)
    at org.mozilla.javascript.ContextFactory.doTopCall(ContextFactory.java:398)
    at org.mozilla.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3065)
    at org.mozilla.javascript.InterpretedFunction.exec(InterpretedFunction.java:175)
    at org.mozilla.javascript.tools.shell.Main.evaluateScript(Main.java:564)
    at org.mozilla.javascript.tools.shell.Main.processSource(Main.java:424)
    at org.mozilla.javascript.tools.shell.Main.processFiles(Main.java:196)
    at org.mozilla.javascript.tools.shell.Main$IProxy.run(Main.java:117)
    at org.mozilla.javascript.Context.call(Context.java:515)
    at org.mozilla.javascript.ContextFactory.call(ContextFactory.java:507)
    at org.mozilla.javascript.tools.shell.Main.exec(Main.java:179)
    at org.mozilla.javascript.tools.shell.Main.main(Main.java:157)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I finally discovered the problem, it was a &amp;#8220;debugger&amp;#8221; statement in one of the functions. Here&amp;#8217;s a trivial example that also kills&amp;nbsp;rhino:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;javascript&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function a(){debugger;}
var b = a.toString();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What?? That crashes rhino? Gosh, I kinda hoped it would be a bit more&amp;nbsp;robust&amp;#8230;&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Python Deepsort</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-25-python-deepsort.html"/>
            <updated>2010-05-25T07:38:08Z</updated>
            <published>2010-05-25T07:38:08Z</published>
            <id>/blog/2010-May-25-python-deepsort.html</id>
            
            <content type="html">
                                &lt;p&gt;There are times when you want a sequence of items sorted, but regular
&lt;code&gt;sort()&lt;/code&gt; doesn&amp;#8217;t cut it; in normal sorting algorithms, it is assumed that if
&lt;code&gt;cmp(a, b) == 0&lt;/code&gt; and &lt;code&gt;cmp(b, c) == 0&lt;/code&gt;, then &lt;code&gt;cmp(a, c) == 0&lt;/code&gt;. I ran into
a problem here when trying to sort classes by inheritance; sort order is not
necessarily&amp;nbsp;commutative.&lt;/p&gt;
&lt;p&gt;I needed to sort a list of classes (the Standard Exceptions) such that they
were declared in the right order; a class must be declared after all of its
base&amp;nbsp;classes.&lt;/p&gt;
&lt;p&gt;Consider the&amp;nbsp;following:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class A:pass
class C:pass
class D:pass
class B(A):pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Clearly, A should come before B, but the relative orders of A, C, and D
doesn&amp;#8217;t really matter. The reason &lt;code&gt;sort()&lt;/code&gt; won&amp;#8217;t work here is &lt;code&gt;cmp(A, C) ==
0&lt;/code&gt; and &lt;code&gt;cmp(C, B) == 0&lt;/code&gt; but &lt;code&gt;cmp(A, B) != 0&lt;/code&gt;. (I tried doing a sort and
was at first confused by the apparently random results I was&amp;nbsp;getting.)&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the code I came up&amp;nbsp;with:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def deepsort(lst, cmp=cmp, max=1000):
    for counter in xrange(max):
        for x in range(len(lst)):
            for y in range(x+1, len(lst)):
                res = cmp(lst[x], lst[y])
                if res == 1:
                    lst[x], lst[y] = lst[y], lst[x]
                    break
            else:
                continue
            break
        else:
            break
    else:
        raise Exception(&#39;couldn\&#39;t resolve after %d iterations. possible circular comparisons.&#39; % max)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, I can&amp;#8217;t claim that it&amp;#8217;s all that fast or efficient, but as this was a
one-off operation, I didn&amp;#8217;t much&amp;nbsp;care.&lt;/p&gt;
&lt;p&gt;Essentially, it&amp;#8217;s a least-fixed-point algorithm, going down the list,
comparing two items, and switching them if one should come before the other. I
put in a max iterations vbl because it&amp;#8217;s possible for such a sorting to be
cyclic, and therefor never resolvable (not with python classes+bases, but with
other &lt;code&gt;cmp&lt;/code&gt; methods).&lt;/p&gt;
&lt;p&gt;For those who are interested, this is the &lt;code&gt;cmp&lt;/code&gt; function I&amp;nbsp;used.&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def classcmp(a, b):
    if issubclass(a,b) and not issubclass(b,a):
        return 1
    if issubclass(b,a) and not issubclass(a,b):
        return -1
    return 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Have you run into this before? Is there a std lib function I was stupidly
ignoring? &lt;code&gt;Tell me in the comments
&amp;lt;http://jaredforsyth.com/blog/2010/may/25/python-deepsort/#comments&amp;gt;&lt;/code&gt;_.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Python operator magic</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-21-python-operator-magic.html"/>
            <updated>2010-05-21T07:20:45Z</updated>
            <published>2010-05-21T07:20:45Z</published>
            <id>/blog/2010-May-21-python-operator-magic.html</id>
            
            <content type="html">
                                &lt;p&gt;Take a look at the following boolean&amp;nbsp;expression:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;100 &amp;lt; x &amp;lt; 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;never gonna happen, right? math is pretty unequivocal on these&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;but you forget; with &lt;code&gt;python &amp;lt;http://python.org&amp;gt;&lt;/code&gt;_, anything is possible&amp;nbsp;;)&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Faker:
    def __lt__(self, other):
        return True
    def __gt__(self, other):
        return True

x = Faker()

if 100 &amp;lt; x &amp;lt; 0:
    print &#34;Universal laws successfully violated!&#34;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cheers.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Javascript type madness</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-20-javascript-type-maddness.html"/>
            <updated>2010-05-20T22:20:09Z</updated>
            <published>2010-05-20T22:20:09Z</published>
            <id>/blog/2010-May-20-javascript-type-maddness.html</id>
            
            <content type="html">
                                &lt;p&gt;It truly amazes me the extent to which the javascript interpreter &lt;em&gt;inhibits&lt;/em&gt;
productivity. It seems extraordinary that the language could have gotten this
far while still &lt;em&gt;by design&lt;/em&gt; causing no end of headaches for&amp;nbsp;developers.&lt;/p&gt;
&lt;h2&gt;Example&amp;nbsp;1&lt;/h2&gt;
&lt;p&gt;When my code has a bug, &lt;em&gt;please&lt;/em&gt; tell me. Preferably with an error. Even
better, with an informative error and a full stack trace! (ok, maybe that&amp;#8217;s a
little greedy). But &lt;em&gt;anything&lt;/em&gt; would be better than passing around
for-goodness&amp;#8217;-sake &lt;strong&gt;undefined&lt;/strong&gt; variables. I mean seriously? So unhelpful.
Especially when variable types are just converted on the fly with abandon &amp;#8212;
you might &lt;em&gt;not even notice&lt;/em&gt; that there are a number of undefined variables
flying around unless you specifically check for&amp;nbsp;them.&lt;/p&gt;
&lt;h2&gt;Example&amp;nbsp;2&lt;/h2&gt;
&lt;p&gt;Here&amp;#8217;s some code copied right from the&amp;nbsp;interpreter:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;js&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; var a = {}
&amp;gt; var b = {3:4}
&amp;gt; var c = {5:5}
&amp;gt; a[b] = 4
4
&amp;gt; a[c] = 5
5
&amp;gt; a[b]
5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Woah.&lt;/strong&gt; Now maybe some of you look at that and think, &lt;em&gt;well, duh&lt;/em&gt;, but this
really threw me for a loop the first time I saw it. Coming from a largely
python background, I thought, hmm, objects seem pretty much like dictionaries
[hashtables]; I can deal with that. But the above code seems to contradict
that. &lt;em&gt;What is going on?&lt;/em&gt; Well, here&amp;#8217;s something to&amp;nbsp;demonstrate:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;js&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; var a = {}
&amp;gt; var b = {4:5}
&amp;gt; a[b] = 12
&amp;gt; a[&#39;[object Object]&#39;]
12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Javascript you sly dog! This is just one of uncountable occasions where
javascript pulls the rug from under you by silently coercing variables to
whatever it wants.&amp;nbsp;Bah.&lt;/p&gt;
&lt;p&gt;The main reason I ran into this problem is my &lt;code&gt;PJs library/tool
&amp;lt;http://jaredforsyth.com/projects/pjs/&amp;gt;&lt;/code&gt;_, which converts python code
into readable, maintainable, and best of all &lt;em&gt;sane&lt;/em&gt; javascript. This includes
but is not limited&amp;nbsp;to:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[edit] thanks to Adriano for pointing this out. &lt;span class=&#34;caps&#34;&gt;JS&lt;/span&gt; does have &lt;span class=&#34;caps&#34;&gt;OO&lt;/span&gt;, but&amp;#8230;class-based inheritance makes much more sense to&amp;nbsp;me.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;class-based&lt;/em&gt;&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;OO&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;module&amp;nbsp;goodness&lt;/li&gt;
&lt;li&gt;function magic *args, **kwargs, default values and&amp;nbsp;more&lt;/li&gt;
&lt;li&gt;&lt;em&gt;strict function argument&amp;nbsp;checking&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;python-style exceptions + &lt;strong&gt;stack&amp;nbsp;traces&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;python basic types (list, tuple, str,&amp;nbsp;dict)&lt;/li&gt;
&lt;li&gt;iterators&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;m still working on &amp;#8216;yield&amp;#8217; though. Generators are &lt;em&gt;hard&lt;/em&gt;.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Manually enable clean urls in drupal</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-14-manually-enable-clean-urls-drupal.html"/>
            <updated>2010-05-14T13:37:17Z</updated>
            <published>2010-05-14T13:37:17Z</published>
            <id>/blog/2010-May-14-manually-enable-clean-urls-drupal.html</id>
            
            <content type="html">
                                &lt;p&gt;For various reasons I wasn&amp;#8217;t able to use the regular interface for checking for clean urls, and at the time I installed drupal I hadn&amp;#8217;t configured apache correctly, so drupal thought (rightly) that clean urls were not&amp;nbsp;supported.&lt;/p&gt;
&lt;p&gt;I just fixed my apache config, and wanted to tell drupal that clean urls were now usable. Here&amp;#8217;s the &lt;span class=&#34;caps&#34;&gt;SQL&lt;/span&gt; command to&amp;nbsp;run:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;sql&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;update variable set value=&#39;s:1:&#34;1&#34;;&#39; where name=&#39;clean_url&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;that&amp;#8217;s assuming you ran &lt;code&gt;mysql mydbname -u[username] -p&lt;/code&gt; and are in the mysql&amp;nbsp;shell.&lt;/p&gt;
&lt;p&gt;cheers&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Birthday release: PJs 0.19</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-06-birthday-release-pjs-019.html"/>
            <updated>2010-05-06T11:30:31Z</updated>
            <published>2010-05-06T11:30:31Z</published>
            <id>/blog/2010-May-06-birthday-release-pjs-019.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image:: http://jaredforsyth.com/media/projects/pjs_logo125x125.png
   :align: left
   :class:&amp;nbsp;first&lt;/p&gt;
&lt;p&gt;So today&amp;#8217;s my birthday, and I thought I&amp;#8217;d celebrate by releasing the first
version of PJs_&amp;#8230;actually, it&amp;#8217;s pretty much a coincidence, but i just got PJs
into a state that I&amp;#8217;m comfortable letting other people hack away at it, and
it&amp;#8217;s my birthday. Why 0.19? Because today, in 1991, I was born. So I am now
19. I think the number-play is&amp;nbsp;interesting.&lt;/p&gt;
&lt;p&gt;.. _PJs:&amp;nbsp;http://jaredforsyth.com/projects/pjs/&lt;/p&gt;
&lt;p&gt;Anyway, if you missed &lt;code&gt;my announcement
&amp;lt;http://jaredforsyth.com/blog/2010/may/4/announcing-pjs/&amp;gt;&lt;/code&gt;_, PJs is a library
similar in nature to Pyjamas, that is it provides Python to Javascript
translation, with added libraries for easing the development of UIs on the
web. Here are some of the current&amp;nbsp;features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;true pythonic &lt;strong&gt;object-oriented programming&lt;/strong&gt;, visible on the javascript side as&amp;nbsp;well&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;function argument checking&lt;/strong&gt;: this is important. One of the reasons I
  got frustrated with pyjamas while trying to use it was the lack of robust
  error management. PJs provides optional method argument enforcing, and also
  provides a method of specifying default argument&amp;nbsp;values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*args and **kwargs&lt;/strong&gt;: this is a really useful one. Javascript doesn&amp;#8217;t
  normally support argument-magic such as this, but PJs&amp;nbsp;does.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modules&lt;/strong&gt;: yes, importing works; as nearly to python as is possible; this
  includes things like reload(), sub-modules, and other such wonderful
  goodness. &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;file&lt;/strong&gt;, and &lt;strong&gt;doc&lt;/strong&gt; variables work too&amp;nbsp;=)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the things that I am really proud of with PJs is the care taken to make
the produced javascript &lt;em&gt;actually readable and usable&lt;/em&gt;. The modules that deal
with pythonic functions and classes &lt;em&gt;can realistically be used in javascript
hacking&lt;/em&gt;, as they use a reasonable syntax and strive to make sense to humans&amp;nbsp;=).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pjs/js/classy.js
  &amp;lt;http://github.com/jabapyth/PJs/blob/v0.19/pjs/js/classy.js&amp;gt;&lt;/code&gt;_: provides the
  Class function, which handles the creation of&amp;nbsp;classes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pjs/js/functions.js
  &amp;lt;http://github.com/jabapyth/PJs/blob/v0.19/pjs/js/functions.js&amp;gt;&lt;/code&gt;_: provides
  the $m function, which can add strict argument checking, default values,
  *args and&amp;nbsp;**kargs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pjs/js/modules.js
  &amp;lt;http://github.com/jabapyth/PJs/blob/v0.19/pjs/js/modules.js&amp;gt;&lt;/code&gt;&lt;em&gt; isn&amp;#8217;t
  terribly useful without &lt;code&gt;__builtin__.js
  &amp;lt;http://github.com/jabapyth/PJs/blob/v0.19/pjs/js/__builtin__.js&amp;gt;&lt;/code&gt;&lt;/em&gt;, which
  provides the &lt;strong&gt;import&lt;/strong&gt; function, but the two together can concievably be
  used in any javascript&amp;nbsp;project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;m now working on making tests for everything =) There&amp;#8217;s a file
test/example.py which contains just about everything that PJs currently
handles. To try the translation yourself, just&amp;nbsp;run:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;bash&lt;/p&gt;
&lt;p&gt;./build.py test/example.py &amp;gt;&amp;nbsp;test/example.js&lt;/p&gt;
&lt;p&gt;Then, if you have rhino_ installed, you can&amp;nbsp;run:&lt;/p&gt;
&lt;p&gt;.. _rhino:&amp;nbsp;http://www.mozilla.org/rhino/&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;bash&lt;/p&gt;
&lt;p&gt;rhino&amp;nbsp;test/example.js&lt;/p&gt;
&lt;p&gt;to see the&amp;nbsp;output.&lt;/p&gt;
&lt;p&gt;For this release, I have tried to focus on the things which would be most
difficult/interesting, with the exception of two&amp;nbsp;things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;add&lt;/strong&gt;, &lt;strong&gt;call&lt;/strong&gt; and other python operator&amp;nbsp;magic.&lt;/li&gt;
&lt;li&gt;generators&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With the first, I don&amp;#8217;t know if I&amp;#8217;ll ever implement it &amp;#8212; there would be too
much of a performance hit to implement this globally (requiring simple things
like &lt;code&gt;2 + 3&lt;/code&gt; to turn into &lt;code&gt;Number(2).__add__(Number(3))&lt;/code&gt; worst case), and
I&amp;#8217;m wary of trying any compile-time type/attr&amp;nbsp;checking&amp;#8230;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve had a few ideas today about how to do generators &amp;#8212; it won&amp;#8217;t be pretty,
but they might&amp;nbsp;come&amp;#8230;&lt;/p&gt;
&lt;p&gt;Some easy things that remain, and will probably be taken care of in the next
two&amp;nbsp;days:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;while&amp;nbsp;loops&lt;/li&gt;
&lt;li&gt;for&amp;nbsp;loops&lt;/li&gt;
&lt;li&gt;tuples, lists, and&amp;nbsp;dictionaries&lt;/li&gt;
&lt;li&gt;string&amp;nbsp;functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I invite you to clone the repo (&lt;code&gt;git clone git://github.com/jabapyth/PJs.git&lt;/code&gt;)
start playing around with&amp;nbsp;it!&lt;/p&gt;
&lt;p&gt;Not bad for one guy in two days,&amp;nbsp;eh?&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Disqus comments in Django</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-04-disqus-comments-django.html"/>
            <updated>2010-05-04T21:41:29Z</updated>
            <published>2010-05-04T21:41:29Z</published>
            <id>/blog/2010-May-04-disqus-comments-django.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image:: http://www.clickonf5.org/wp-content/uploads/2009/08/disqus.jpg
   :class: first
   :width:&amp;nbsp;190px&lt;/p&gt;
&lt;p&gt;Recently I finally got around to adding comments to this blog; &lt;code&gt;disqus
&amp;lt;http://disqus.com&amp;gt;&lt;/code&gt;_ made it so easy that I didn&amp;#8217;t really have an excuse to
keep putting it off&amp;nbsp;;)&lt;/p&gt;
&lt;p&gt;When I first made this blog&amp;#8230;a few months ago, I was simultaneously
discovering &lt;code&gt;django &amp;lt;http://djangoproject.com&amp;gt;&lt;/code&gt;_ (they say the way to learn
the ropes in django is to create a blogging engine) and wasn&amp;#8217;t quite satisfied
with the readily available comments&amp;nbsp;solutions. &lt;/p&gt;
&lt;p&gt;I heard from several places that django.contrib.comments has a problem with
taking you out of context if the form needs errors corrected, which really
isn&amp;#8217;t acceptible. Looking around further, I saw a presentation at djangocon 08
(iirc) about pluggable apps, which looked like a solution, but I really didn&amp;#8217;t
want to go to the trouble; it was easier to just postpone the comments
question, at least for a&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;As I looked around at the blogs of people talking about django, I kept seeing
&amp;#8220;powered by disqus&amp;#8221; at the bottom, so I went &lt;code&gt;over to investigate
&amp;lt;http://disqus.com&amp;gt;&lt;/code&gt;_, and was very satisfied by their offering. Of course, it
helps that it&amp;#8217;s free, and that &lt;strong&gt;the only installation was adding 10 lines of
&lt;span class=&#34;caps&#34;&gt;HTML&lt;/span&gt; to the bottom of my blog_post template&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The real clincher for me though was integration; disqus enables people reading
my blog to use OpenID, facebook, twitter, or general disqus authorization.
People who might not have commented had they been required to sign up for my
site alone would have far fewer&amp;nbsp;qualms.&lt;/p&gt;
&lt;p&gt;Cheers&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Announcing: PJs</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-04-announcing-pjs.html"/>
            <updated>2010-05-04T20:38:37Z</updated>
            <published>2010-05-04T20:38:37Z</published>
            <id>/blog/2010-May-04-announcing-pjs.html</id>
            
            <content type="html">
                                &lt;p&gt;My new project: &lt;code&gt;PJs &amp;lt;http://jaredforsyth.com/projects/pjs/&amp;gt;&lt;/code&gt;_&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been keeping an eye on the &lt;code&gt;pyjamas project &amp;lt;http://pyjs.org&amp;gt;&lt;/code&gt;_ for some
time now (it&amp;#8217;s been around for a few years at least), but unfortunately It has
never from what I can see lived up to it&amp;#8217;s&amp;nbsp;potential.&lt;/p&gt;
&lt;p&gt;In the mean time, I&amp;#8217;ve been doing a good deal of javascript programming (it&amp;#8217;s
one of my favorite languages), and been looking for ways to  make that more
friendly &amp;#8212; one issue I have with javascript is the way it tries to handle
Object Oriented design; &lt;span class=&#34;caps&#34;&gt;IMO&lt;/span&gt; javascript&amp;#8217;s solution is a very poor&amp;nbsp;one&amp;#8230;&lt;/p&gt;
&lt;p&gt;So I wrote a library, which I called &lt;em&gt;classy.js&lt;/em&gt; to &lt;strong&gt;help javascript be a
little more pythonic&lt;/strong&gt;. This worked well, and allowed me to organize classes
like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;javascript&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Foo = Class([Bar], {
    somevar:&#39;val&#39;,
    __init__: function(self, a, b){
        alert(a);
    },
    baz: function(self, boo){
        return boo + 3;
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This of course corresponds to the following python&amp;nbsp;code:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Foo(Bar):
    somevar = &#39;val&#39;
    def __init__(self, a, b):
        alert(a)
    def baz(self, boo):
        return boo + 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not perfect of course, but it follows so much more naturally than the
&lt;code&gt;prototype&lt;/code&gt; syntax (note the &lt;code&gt;self&lt;/code&gt; argument &amp;#8212; it&amp;#8217;s &lt;em&gt;automagically&lt;/em&gt;&amp;nbsp;populated!)&lt;/p&gt;
&lt;p&gt;But my frustration at pyjamas (it is far too much a port of &lt;span class=&#34;caps&#34;&gt;GWT&lt;/span&gt;, but fails at
error handling) has encouraged me to expand upon my pythonic&amp;nbsp;javascript. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thus was PJs born&lt;/strong&gt; =) It&amp;#8217;s like Pyjamas, but shorter, quicker, and more
robust. &lt;code&gt;PJs &amp;lt;http://jaredforsyth.com/projects/pjs/&amp;gt;&lt;/code&gt;_ is built from the ground up to produce &lt;em&gt;readable&lt;/em&gt; javascript from
python&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;At the moment I&amp;#8217;ve completed the javascript libraries required to
have pythonic contructs in javascript, including: classes, functions (with
positional, default, and dictionary arguments, as well as strict argument
validation), and&amp;nbsp;modules.&lt;/p&gt;
&lt;p&gt;What remains is to make the actual code converter; this should not be too
difficult, as my pjs library as brigded most of the few differences between
python and&amp;nbsp;javascript.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Embed youtube videos in RestructuredText</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Apr-30-embed-youtube-videos-restructuredtext.html"/>
            <updated>2010-04-30T06:30:26Z</updated>
            <published>2010-04-30T06:30:26Z</published>
            <id>/blog/2010-Apr-30-embed-youtube-videos-restructuredtext.html</id>
            
            <content type="html">
                                &lt;p&gt;I write this blog almost exclusively in &lt;code&gt;RestructuredText &amp;lt;http://docutils.sourceforge.net/docs/user/rst/quickstart.html&amp;gt;&lt;/code&gt;&lt;em&gt; and I recently wanted to embed a youtube video on the &lt;code&gt;Baby Tux project page &amp;lt;http://jaredforsyth.com/projects/baby-tux/&amp;gt;&lt;/code&gt;&lt;/em&gt;. Fortunately someone&amp;#8217;s already done the work of making a directive, so you can just save the code &lt;code&gt;here &amp;lt;http://countergram.com/articles/youtube-in-rst/&amp;gt;&lt;/code&gt;_ to &lt;code&gt;youtube_rst.py&lt;/code&gt; and&amp;nbsp;put&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import youtube_rst
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in the &lt;code&gt;__init__.py&lt;/code&gt; of your django project. Using the directive is dead&amp;nbsp;simple:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;rst&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.. youtube:: 9ZWyv9icIfI
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cheers.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Django to UML</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Apr-29-django-uml.html"/>
            <updated>2010-04-29T16:49:12Z</updated>
            <published>2010-04-29T16:49:12Z</published>
            <id>/blog/2010-Apr-29-django-uml.html</id>
            
            <content type="html">
                                &lt;p&gt;I was looking around for a django models to &lt;span class=&#34;caps&#34;&gt;UML&lt;/span&gt; converter and took a bit of doing, but I found one nestled in the app &lt;code&gt;django-extensions &amp;lt;http://code.google.com/p/django-command-extensions/&amp;gt;&lt;/code&gt;_. As it took a while, I thought I&amp;#8217;d spare the next guy a&amp;nbsp;search.&lt;/p&gt;
&lt;p&gt;To use, grab the &lt;code&gt;latest version &amp;lt;http://django-command-extensions.googlecode.com/files/django-extensions-0.4.1.tar.gz&amp;gt;&lt;/code&gt;_, and install pygraphviz. Here are the commands I&amp;nbsp;used:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;bash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget http://django-command-extensions.googlecode.com/files/django-extensions-0.4.1.tar.gz
tar zxf django-extensions-0.4.1.tar.gz
cd django-extensions-0.4.1
sudo setup.py install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;..&amp;nbsp;note::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Make sure to add django_extensions to INSTALLED_APPS in your project&#39;s settings module (thanks Stephen!)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;bash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install python-pygraphviz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then in your project&amp;nbsp;directory:&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">AccessInit: hash collision: 3 for both 1 and 1</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Apr-28-accessinit-hash-collision-3-both-1-and-1.html"/>
            <updated>2010-04-28T11:43:54Z</updated>
            <published>2010-04-28T11:43:54Z</published>
            <id>/blog/2010-Apr-28-accessinit-hash-collision-3-both-1-and-1.html</id>
            
            <content type="html">
                                &lt;p&gt;I recently ran into a problem, which didn&amp;#8217;t immediately make itself clear (this is one of the troubles that django causes me &amp;#8212; too often the error reporting is just &lt;em&gt;not there&lt;/em&gt;, and forces me to do a good deal of debugging to even determine where the error is&amp;nbsp;occurring).&lt;/p&gt;
&lt;p&gt;After facing several unpromising &amp;#8220;500&amp;#8221; errors (well, they were really 404&amp;#8217;s &amp;#8220;page 500.shtml not found&amp;#8230;&amp;#8221;), I broke down, tunneled in and started the devel server. At this point, the error was made plain; python was all-out &lt;em&gt;dying&lt;/em&gt;, with the cryptic message &lt;code&gt;AccessInit: hash collision: 3 for both 1 and 1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;[for the impatient, you can jump down to &lt;code&gt;The Solution&lt;/code&gt;_&amp;nbsp;]&lt;/p&gt;
&lt;p&gt;A good deal of googling later found no satisfactory answers, but &lt;code&gt;several &amp;lt;http://aspn.activestate.com/ASPN/Mail/Message/image-sig/3841039&amp;gt;&lt;/code&gt;&lt;em&gt; &lt;code&gt;unanswered &amp;lt;http://groups.google.com/group/satchmo-users/browse_thread/thread/b763986876a131cf/f0d9759524270000?hl=en&amp;amp;lnk=gst&amp;amp;q=Daniel+Hirsch#f0d9759524270000&amp;gt;&lt;/code&gt;&lt;/em&gt; &lt;code&gt;questions &amp;lt;http://www.mail-archive.com/image-sig@python.org/msg03083.html&amp;gt;&lt;/code&gt;_ (hence this&amp;nbsp;post).&lt;/p&gt;
&lt;p&gt;What I got from these posts was that &lt;strong&gt;somehow, &lt;span class=&#34;caps&#34;&gt;PIL&lt;/span&gt; was getting imported twice&lt;/strong&gt;, or something, and was &lt;strong&gt;choking because of it&lt;/strong&gt;. But the question remained as to &lt;em&gt;how&lt;/em&gt; this could&amp;nbsp;happen.&lt;/p&gt;
&lt;p&gt;So, I dove into the source code, and several unscrupulous &lt;code&gt;print statements &amp;lt;http://en.wikipedia.org/wiki/Debugging#Various_debugging_techniques&amp;gt;&lt;/code&gt;_ later, I traced the problem down to my use of the &amp;#8220;Pygments&amp;#8221; module, which in turn uses&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;PIL&lt;/span&gt;.&lt;/p&gt;
&lt;h2&gt;The&amp;nbsp;Problem&lt;/h2&gt;
&lt;p&gt;The offending statement is in pygments/formatters/img.py, line&amp;nbsp;21&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Import this carefully
try:
    import Image, ImageDraw, ImageFont
    pil_available = True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem is, that in Django, &lt;span class=&#34;caps&#34;&gt;PIL&lt;/span&gt; is imported&amp;nbsp;thus&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from PIL import Image, ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;The&amp;nbsp;Solution&lt;/h2&gt;
&lt;p&gt;This is confusing to python, which thinks that these two &amp;#8220;Image&amp;#8221; modules are different, when they are in fact the same. (I found several people on the internet bemoaning this double-standard of &lt;span class=&#34;caps&#34;&gt;PIL&lt;/span&gt; usage). I fixed this by changing the Pygments module to use the &lt;code&gt;from PIL import&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;Unfortunately, this wasn&amp;#8217;t the end of my problems; I also use the docutils module, which again tries to &amp;#8220;import Image&amp;#8221;, causing the hash collision. Luckily, it wasn&amp;#8217;t to difficult to track those instances down and kill them&amp;#8230;I mean fix them. Anyway, I ended up with the following two patches, which restored my system to working&amp;nbsp;order.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pygments patch &amp;lt;http://jaredforsyth.com/media/uploads/PIL_fix.pygments.patch&amp;gt;&lt;/code&gt;_&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docutils patch &amp;lt;http://jaredforsyth.com/media/uploads/PIL_fix.docutils.patch&amp;gt;&lt;/code&gt;_&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Vim tip of the day: copy current file name</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Apr-17-vim-tip-day-copy-current-file-name.html"/>
            <updated>2010-04-17T13:05:07Z</updated>
            <published>2010-04-17T13:05:07Z</published>
            <id>/blog/2010-Apr-17-vim-tip-day-copy-current-file-name.html</id>
            
            <content type="html">
                                &lt;p&gt;If you want to copy/paste the current filename, the magic register &amp;#8220;%&amp;#8221; is just what you&amp;nbsp;need.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s as simple as &amp;#8220;%p (which means p[aste] from the register %)&amp;nbsp;::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#34;%p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or if you&amp;#8217;re in insert mode, &lt;C-r&gt;% will do the&amp;nbsp;same.&lt;/p&gt;
&lt;p&gt;Note: this will always be the filename of the current window/buffer. To save this in a regular register (for later use), try:&amp;nbsp;::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;O&amp;lt;C-r&amp;gt;%&amp;lt;Esc&amp;gt;&#34;fdd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;that transfers it to the f&amp;nbsp;register.&lt;/p&gt;
&lt;p&gt;roughly&amp;nbsp;translated::&lt;/p&gt;
&lt;p&gt;O      on a new line (go into insert mode)
   &lt;C-r&gt;% paste the contents of %
   &lt;Esc&gt;  exit insert mode
   &amp;#8220;fdd   then delete that line and put it into&amp;nbsp;f&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Vim crash recovery</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Apr-09-vim-crash-recovery.html"/>
            <updated>2010-04-09T12:02:01Z</updated>
            <published>2010-04-09T12:02:01Z</published>
            <id>/blog/2010-Apr-09-vim-crash-recovery.html</id>
            
            <content type="html">
                                &lt;p&gt;Currently the host I use (bluehost) likes to &lt;span class=&#34;caps&#34;&gt;SIGKILL&lt;/span&gt; my processes if they run too long (in an ssh session). This makes perfect sense from their point of view &amp;#8212; it&amp;#8217;s a shared hosting situation, so they don&amp;#8217;t want processes hogging resources &amp;#8212; but it can get pretty annoying, especially as I usually have several buffers open in split&amp;nbsp;windows.&lt;/p&gt;
&lt;p&gt;Solution! I now have vim automatically save my session on exit. I put the following line in my .vimrc&amp;nbsp;::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;autocmd VimLeavePre * mksession! .vim.sess
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vim docs for autocmd &amp;lt;http://vimdoc.sourceforge.net/htmldoc/autocmd.html&amp;gt;&lt;/code&gt;_&lt;/li&gt;
&lt;li&gt;VimLeavePre means &amp;#8220;exec just before vim&amp;nbsp;exits&amp;#8221;&lt;/li&gt;
&lt;li&gt;the &amp;#8220;*&amp;#8221; says &amp;#8212; do this for every file type. You could just do &amp;#8220;*.html&amp;#8221; or&amp;nbsp;&amp;#8221;*.c&amp;#8221;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mksession &amp;lt;http://vimdoc.sourceforge.net/htmldoc/starting.html#:mksession&amp;gt;&lt;/code&gt;_ saves vim&amp;#8217;s&amp;nbsp;state&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now whenever you exit, or vim is killed, vim will auto-create a &amp;#8220;.vim.sess&amp;#8221; file in the current directory. To resume that session, run vim&amp;nbsp;thus::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim -S .vim.sess
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;note the -S is&amp;nbsp;capital&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Todo Post and Project</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Apr-08-todo.html"/>
            <updated>2010-04-08T16:19:06Z</updated>
            <published>2010-04-08T16:19:06Z</published>
            <id>/blog/2010-Apr-08-todo.html</id>
            
            <content type="html">
                                &lt;h2&gt;Blog&amp;nbsp;posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Django command-line&amp;nbsp;admin&lt;/li&gt;
&lt;li&gt;django&amp;nbsp;reversion&lt;/li&gt;
&lt;li&gt;django-basic-apps : markup&amp;nbsp;tag&lt;/li&gt;
&lt;li&gt;jaredforsyth.com &amp;#8212; open&amp;nbsp;source&lt;/li&gt;
&lt;li&gt;codetalker&lt;/li&gt;
&lt;li&gt;appsettings&lt;/li&gt;
&lt;li&gt;drupal to django&amp;nbsp;conversion&lt;/li&gt;
&lt;li&gt;html2rst&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;recent&amp;#8230;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu Screencast software +&amp;nbsp;PiTiVi&lt;/li&gt;
&lt;li&gt;announcing&amp;nbsp;GameCC&lt;/li&gt;
&lt;li&gt;django apps I&amp;nbsp;like&lt;/li&gt;
&lt;li&gt;navbar&lt;/li&gt;
&lt;li&gt;dependency&lt;/li&gt;
&lt;li&gt;basic-apps&lt;/li&gt;
&lt;li&gt;rabidratings&lt;/li&gt;
&lt;li&gt;hitcount&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;editing&amp;nbsp;here&lt;/p&gt;
&lt;h2&gt;Projects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JsSnake&lt;/li&gt;
&lt;li&gt;CodeTalker&lt;/li&gt;
&lt;li&gt;Django-Appsettings&lt;/li&gt;
&lt;li&gt;html2rst&lt;/li&gt;
&lt;li&gt;jfcom&lt;/li&gt;
&lt;li&gt;PyShell&lt;/li&gt;
&lt;li&gt;GameCC&lt;/li&gt;
&lt;li&gt;FindThatScripture&lt;/li&gt;
&lt;/ul&gt;            </content>
        </entry>
            <entry>
            <title type="html">Giving Django admin a favicon</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Apr-06-giving-django-admin-favicon.html"/>
            <updated>2010-04-06T19:24:25Z</updated>
            <published>2010-04-06T19:24:25Z</published>
            <id>/blog/2010-Apr-06-giving-django-admin-favicon.html</id>
            
            <content type="html">
                                            </content>
        </entry>
            <entry>
            <title type="html">One-liner to rule them all: django mingus install script</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Feb-27-one-liner-rule-them-all.html"/>
            <updated>2010-02-27T23:16:15Z</updated>
            <published>2010-02-27T23:16:15Z</published>
            <id>/blog/2010-Feb-27-one-liner-rule-them-all.html</id>
                        <category   scheme="/blog/tags"
                        term="mingus"
                        label="Mingus" />
                        <category   scheme="/blog/tags"
                        term="django"
                        label="Django" />
                        <category   scheme="/blog/tags"
                        term="install"
                        label="Install" />
                        <category   scheme="/blog/tags"
                        term="script"
                        label="Script" />
                        <category   scheme="/blog/tags"
                        term="dependencies"
                        label="Dependencies" />
            
            <content type="html">
                                &lt;p&gt;Ok, so it&amp;#8217;s technically more than one line &amp;#8212; but all the logic/execution is on one line&amp;nbsp;=)&lt;/p&gt;
&lt;p&gt;This is the install script I just whipped up to get django-mingus up and running. It&amp;#8217;s fairly simple, but the script does a good job of telling you what went wrong (if anything happens to go wrong). What I really hate is copy/pasting ~15 lines of commands into bash, only to have the 3rd one fail for some reason, and the remaining 12 still execute, usually to no effect (lots of errors), but to potentially dangerous&amp;nbsp;effect.&lt;/p&gt;
&lt;p&gt;Thus, all the commands are dependant on one another! If one fails, it doesn&amp;#8217;t blindly execute the rest. I thought of doing an only mess of nested if-else blocks, but instead I took advantage of some bash-fu to join them all together with &amp;amp;&amp;amp; (and). Anyway, here&amp;#8217;s the script. Enjoy. &amp;#8212; it also manages all dependencies of&amp;nbsp;mingus&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Django apps&#39; documentation problem</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Feb-26-django-apps-documentation-problem.html"/>
            <updated>2010-02-26T02:07:35Z</updated>
            <published>2010-02-26T02:07:35Z</published>
            <id>/blog/2010-Feb-26-django-apps-documentation-problem.html</id>
                        <category   scheme="/blog/tags"
                        term="django"
                        label="Django" />
                        <category   scheme="/blog/tags"
                        term="docs"
                        label="Docs" />
                        <category   scheme="/blog/tags"
                        term="documentation"
                        label="Documentation" />
                        <category   scheme="/blog/tags"
                        term="admindocs"
                        label="Admindocs" />
            
            <content type="html">
                                &lt;p&gt;So I just spent the last little while going back to the &lt;code&gt;dawn of time &amp;lt;http://code.djangoproject.com/changeset/392&amp;gt;&lt;/code&gt;_ and svn revision 392 of django core&amp;#8212; the current revision is nearly 13 &lt;strong&gt;thousand&lt;/strong&gt;) to find the answer to a surprisingly elusive question: why is there a&amp;nbsp;::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;^templates/(?P&amp;lt;template&amp;gt;.*)/$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pattern in admindocs URLconf, and a corresponding template_detail view? (there&amp;#8217;s no template_list view mind, and no way of ever getting to the template_detail view other than typing a url in&amp;nbsp;directly).&lt;/p&gt;
&lt;p&gt;At first I thought that it might be a recent addition to admindocs, and therefore not fully implemented &amp;#8212; that could explain its effectively disabled status. But no, it&amp;#8217;s a &lt;strong&gt;year dormant&lt;/strong&gt; little bit of&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;contrib.admindocs seems to me to be not very well cared for &amp;#8212; especially in light of its vast importance, imo, to django&amp;#8217;s user experience. I know that when I install a module I don&amp;#8217;t want to dig through all of its code (although I have resorted to that several times), I want its functionality and configurability laid out for me in a nice, friendly manner. In keeping with this, I believe strongly that contrib.admindocs should have the ability to show me general docs &lt;em&gt;of my installed modules&lt;/em&gt;, and not just the component parts. In reality, if I have to look at an app&amp;#8217;s Models to understand &lt;em&gt;what it is the darn thing does&lt;/em&gt;, it&amp;#8217;s already to&amp;nbsp;late.&lt;/p&gt;
&lt;p&gt;As I see it, django suffers from a staggering lack of documentation (mostly with regards to community apps), which I see as a side-effect of a lack of a &amp;#8216;tradition of documentation&amp;#8217;. This is really the biggest barrier to me installing a new app (as we are &lt;em&gt;supposed to&lt;/em&gt;, make and use others&amp;#8217; reusable&amp;nbsp;apps).&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Django application settings</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Feb-25-django-application-settings.html"/>
            <updated>2010-02-25T23:50:55Z</updated>
            <published>2010-02-25T23:50:55Z</published>
            <id>/blog/2010-Feb-25-django-application-settings.html</id>
                        <category   scheme="/blog/tags"
                        term="django"
                        label="Django" />
                        <category   scheme="/blog/tags"
                        term="dbsettings"
                        label="Dbsettings" />
                        <category   scheme="/blog/tags"
                        term="settings"
                        label="Settings" />
                        <category   scheme="/blog/tags"
                        term="application"
                        label="Application" />
            
            <content type="html">
                                &lt;p&gt;One thing that (it looks like) is missing in the django tradition is a generally adopted method for making user-friendly application-specific settings. And this feature is extremely key if we want to appeal to a broader audience; your average person &lt;em&gt;does not&lt;/em&gt; want to have to edit a settings.py file in order to change [most] things. Yes, settings that would require a server restart should go there, but there are a vast number of settings which are &lt;span class=&#34;caps&#34;&gt;UI&lt;/span&gt;/display related, and should be dynamically&amp;nbsp;modifiable.&lt;/p&gt;
&lt;p&gt;Examples from the&amp;nbsp;public:&lt;/p&gt;
&lt;p&gt;http://oebfare.com/blog/2008/nov/07/app-settings/&amp;nbsp;http://thisweekindjango.com/screencasts/episode/6/application-settings/&lt;/p&gt;
&lt;p&gt;I sent an email to the group detailing my feelings on the&amp;nbsp;subject.&lt;/p&gt;
&lt;p&gt;dbsettings:&amp;nbsp;http://stackoverflow.com/questions/1308034/admin-interface-editable-django-app-settings&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Flatpages crazy 404</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Feb-25-flatpages-crazy-404.html"/>
            <updated>2010-02-25T00:52:53Z</updated>
            <published>2010-02-25T00:52:53Z</published>
            <id>/blog/2010-Feb-25-flatpages-crazy-404.html</id>
            
            <content type="html">
                                &lt;p&gt;Wow, they&amp;#8217;re not kidding about &amp;#8220;Make sure to have leading and trailing slashes&amp;#8221;&amp;#8230;Don&amp;#8217;t know what I&amp;#8217;m talking&amp;nbsp;about?&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s the &amp;#8216;help text&amp;#8217; on the &amp;#8220;Create flat page&amp;#8221; form &amp;#8212; and boy, do they mean it. I just spent the last [longer than I care to admit] trying to figure out &lt;em&gt;why&lt;/em&gt; flatpages was giving me a 404! I had installed and configured everything correctly, and, &lt;em&gt;darn it&lt;/em&gt;, flatpages is about the simplest app out there. &lt;em&gt;What is wrong with&amp;nbsp;me?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Well, it turns out I entered &amp;#8220;/about&amp;#8221; as the url for the page &amp;#8212; extremely foolish of me, I know. What really floored me, though, was that the form didn&amp;#8217;t complain, and it gave me a link to &amp;#8220;view this flatpage on site -&amp;gt;&amp;#8221;, which invariably led to a&amp;nbsp;404.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;caps&#34;&gt;IMO&lt;/span&gt; there should definitely be an error thrown if you&amp;#8217;re stupid enough not to include the trailing slash [submitting ticket&amp;nbsp;now].&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;edit:&lt;/strong&gt; sent in a patch, so hopefully this we be dealt&amp;nbsp;with&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Setting up a blog in django</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Feb-25-setting-blog-django.html"/>
            <updated>2010-02-25T00:10:09Z</updated>
            <published>2010-02-25T00:10:09Z</published>
            <id>/blog/2010-Feb-25-setting-blog-django.html</id>
                        <category   scheme="/blog/tags"
                        term="django"
                        label="Django" />
                        <category   scheme="/blog/tags"
                        term="blog"
                        label="Blog" />
                        <category   scheme="/blog/tags"
                        term="drupal"
                        label="Drupal" />
                        <category   scheme="/blog/tags"
                        term="how-to"
                        label="How-To" />
            
            <content type="html">
                                &lt;p&gt;Recently, I decided that my site needed an overhaul. Initially, I only
imagined a theme redesign, but as I examined my site, I realized that drupal
&lt;em&gt;really&lt;/em&gt; wasn&amp;#8217;t doing it for me. Yes, it&amp;#8217;s leaps and bounds ahead of what I&amp;#8217;d
done before. Yes, it&amp;#8217;s amazing, with incredible contributed themes and
modules. But&amp;#8230;it was just insufficient / wrong. For one thing, it&amp;#8217;s written
in &lt;span class=&#34;caps&#34;&gt;PHP&lt;/span&gt;, which &lt;em&gt;really&lt;/em&gt; grates on my consience; I&amp;#8217;ve done php development, and
it is imo just &lt;em&gt;so&lt;/em&gt; inferior as a language, to, well, many other languages.
Python in&amp;nbsp;particular.&lt;/p&gt;
&lt;p&gt;I really love python, and I get the feeling that it loves me back ;) so I
wanted to find a &lt;span class=&#34;caps&#34;&gt;CMS&lt;/span&gt; in python &amp;#8212; because I didn&amp;#8217;t just want a blog; and I
&lt;em&gt;really&lt;/em&gt; didn&amp;#8217;t want a cookie-cutter website; I had a vision for how it
should look and what it should do that went beyond any pure blog (e.g.
wordpress). So I looked around for a &amp;#8220;python &lt;span class=&#34;caps&#34;&gt;CMS&lt;/span&gt;&amp;#8221; and ran into a few that
looked interesting, but none that looked &lt;em&gt;phenomenal&lt;/em&gt;. But then I found&amp;nbsp;Django.&lt;/p&gt;
&lt;p&gt;Of course, at first I was skeptical &amp;#8212; it really didn&amp;#8217;t look like a &lt;span class=&#34;caps&#34;&gt;CMS&lt;/span&gt; (well,
it&amp;#8217;s &lt;em&gt;not&lt;/em&gt; a &lt;span class=&#34;caps&#34;&gt;CMS&lt;/span&gt;) and I wasn&amp;#8217;t sure how well/easily I would be able to write
my website using it. Then I read through the &lt;code&gt;Django Book
&amp;lt;http://djangobook.com&#34;&amp;gt;&lt;/code&gt;_ and was totally sold &amp;#8212; this is &lt;em&gt;python&lt;/em&gt;, this is &lt;em&gt;well
designed&lt;/em&gt; this is, frankly, &lt;strong&gt;awesome&lt;/strong&gt;. I still had some questions, though.
Coming as I did from a drupal background (and WordPress before that) I was
still stuck in the monolithic mindset &amp;#8212; Isn&amp;#8217;t it just plain messy to allow
apps to be anywhere on the python path? Shouldn&amp;#8217;t there be some federated
system for installing and keeping track of&amp;nbsp;modules?&lt;/p&gt;
&lt;p&gt;Then I was searching around on a blog and found a reference to a talk at
DjangoCon 2008: &lt;code&gt;Reusable Apps
&amp;lt;http://www.youtube.com/watch?v=A-S0tqpPga4&#34;&amp;gt;&lt;/code&gt;_, which cleared up almost all
the questions I had about django, and the reasons behind its&amp;nbsp;structure/philosophy.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Songbird Global Hotkeys for Ubuntu Linux</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Feb-20-songbird-global-hotkeys-ubuntu-linux.html"/>
            <updated>2010-02-20T21:00:35Z</updated>
            <published>2010-02-20T21:00:35Z</published>
            <id>/blog/2010-Feb-20-songbird-global-hotkeys-ubuntu-linux.html</id>
            
            <content type="html">
                                &lt;p&gt;One thing that I have really missed in playing with songbird is Global Hotkeys for changing the song, etc. This functionality is available for &lt;code&gt;Windows &amp;lt;http://wiki.songbirdnest.com/Getting_Started_with_Songbird/03_Basic_Controls#Hotkeys_.26_Keyboard_Shortcuts&amp;gt;&lt;/code&gt;&lt;em&gt;, but Linux (and Mac) users still have to wait if we want official support. There is a workaround, though, thanks to GeekShadow&amp;#8217;s addon &lt;code&gt;Command Line Support &amp;lt;http://addons.songbirdnest.com/addons/1381&amp;gt;&lt;/code&gt;&lt;/em&gt;. This allows for all kinds of clever hackery, including global&amp;nbsp;Hotkeys.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This tutorial is for Ubuntu Linux specifically, but might well apply to other linux distros with Gnome, and the principals are certainly globally&amp;nbsp;applicable.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;First, get the &lt;code&gt;Command Line Support &amp;lt;http://addons.songbirdnest.com/addons/1381&amp;gt;&lt;/code&gt;_&amp;nbsp;addon&lt;/p&gt;
&lt;p&gt;.. image::&amp;nbsp;/media/images/clsongbird.png&lt;/p&gt;
&lt;p&gt;Navigate to http://addons.songbirdnest.com/addons/1381 in songbird&amp;#8217;s browser, and you can install it cleanly. Otherwise, you can download the .xpi file, and open it with&amp;nbsp;songbird.&lt;/p&gt;
&lt;p&gt;Now to create the&amp;nbsp;shortcuts&lt;/p&gt;
&lt;p&gt;.. image::&amp;nbsp;/media/images/keyshortcuts.png&lt;/p&gt;
&lt;p&gt;In the &amp;#8220;Keyboard Shortcuts&amp;#8221; dialog, click&amp;nbsp;&amp;#8220;Add&amp;#8221;&lt;/p&gt;
&lt;p&gt;.. image::&amp;nbsp;/media/images/key1.png&lt;/p&gt;
&lt;p&gt;Fill &amp;#8220;Songbird Next&amp;#8221; for the name, and &amp;#8220;songbird -next&amp;#8221; for the&amp;nbsp;command&lt;/p&gt;
&lt;p&gt;.. image::&amp;nbsp;/media/images/key2.png&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the &amp;#8220;songbird -next&amp;#8221; command will only work if the command &amp;#8220;songbird&amp;#8221; works on your command-line. If you have Songbird installed someplace special. use for your command &amp;#8220;/path/to/Songbird/songbird&amp;nbsp;-next&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Finally, enter a key combination to bind to the command. Repeat for -prev and&amp;nbsp;-pause&lt;/p&gt;
&lt;p&gt;.. image::&amp;nbsp;/media/images/key3.png&lt;/p&gt;
&lt;p&gt;Done!&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">automagically install boost library on Ubuntu linux</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Feb-12-automagically-install-boost-library-ubuntu-linux.html"/>
            <updated>2010-02-12T20:09:13Z</updated>
            <published>2010-02-12T20:09:13Z</published>
            <id>/blog/2010-Feb-12-automagically-install-boost-library-ubuntu-linux.html</id>
            
            <content type="html">
                                &lt;p&gt;I wanted to install the &amp;#8220;boost&amp;#8221; library on ubuntu, but the problem is that the
library is segmented into several different packages. Now, I could have gone
through and installed each manually, or I could employ a little bash-fu to get
it done for me. Here&amp;#8217;s the command I&amp;nbsp;used:&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;bash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install `apt-cache search &#39;libboost&#39;|grep &#39;^libboost-&#39;|sed -e&#39;s/ .*//&#39;`

sudo apt-get install `dpkg -l &#34;libboost*1.40-dev&#34;|grep &#34;^un&#34;|sed -e &#39;s/^..  *//&#39; -e &#39;s/ .*//&#39;`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what does this do? the &amp;#8220;sudo apt-get install&amp;#8221; should look familiar to an
ubuntu user, but what&amp;#8217;s the rest, and what in the &lt;em&gt;world&lt;/em&gt; are those weird `
backtick things?  So first, the backticks tell bash &amp;#8220;execute what&amp;#8217;s inside of
this, and insert the output as though I had typed it in myself&amp;#8221;. The command
inside of them {dpkg -l &amp;#8220;libboost&lt;em&gt;1.40-dev&amp;#8221;|grep &amp;#8220;^un&amp;#8221;|sed -e &amp;#8216;s/^.. &lt;/em&gt;//&amp;#8217; -e
&amp;#8216;s/ .*//&amp;#8217;} does the helpful job of listing all currently uninstalled libboost
dev&amp;nbsp;packages.&lt;/p&gt;
&lt;p&gt;To break that up (because it&amp;#8217;s actually three different commands) I&amp;#8217;ll start
with the first: dpkg -l &amp;#8220;libboost&lt;em&gt;1.40-dev&amp;#8221; You can find out more about this
by typing &amp;#8220;man dpkg&amp;#8221; into a terminal, but basically this command lists all the
packages that match the expression &amp;#8220;libboost&lt;/em&gt;1.40-dev&amp;#8221; (the -l means &lt;em&gt;list&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s what the output of that command by itself looks&amp;nbsp;like&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;bash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ummm isn&#39;t working right now...
owell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;fine&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Event Bubbling example</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Dec-28-event-bubbling-example.html"/>
            <updated>2009-12-28T22:55:14Z</updated>
            <published>2009-12-28T22:55:14Z</published>
            <id>/blog/2009-Dec-28-event-bubbling-example.html</id>
            
            <content type="html">
                                &lt;p&gt;Javascript events are handled in a very particular way&amp;#8230;
a way that isn&amp;#8217;t always immediately intuitive. For an excellent description of just how this all works, check out &lt;code&gt;this article &amp;lt;http://www.quirksmode.org/js/events_order.html&amp;gt;&lt;/code&gt;_ over on quirksmode.org. The purpose of this post is to give you a practical knowledge of how this actually works, as well as point out a few&amp;nbsp;quirks.&lt;/p&gt;
&lt;p&gt;break&lt;/p&gt;
&lt;p&gt;To start, here&amp;#8217;s a few nested divs, which each have a &amp;#8216;mouseover&amp;#8217; event 
attached &amp;#8212; when the event is fired, it will insert &amp;#8216;leave x&amp;#8217; into the 
following textbox. Go ahead and try it &amp;#8212; mouse over one of the divs, and see 
the order (and number) of events&amp;nbsp;fired. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OnMouseOver Example&lt;/strong&gt;&amp;nbsp;^^^^^^^^^^^^^^^^^^^^^^^&lt;/p&gt;
&lt;p&gt;a1&lt;/p&gt;
&lt;p&gt;a2&lt;/p&gt;
&lt;p&gt;a3&lt;/p&gt;
&lt;p&gt;a4&lt;/p&gt;
&lt;p&gt;So, what you might notice is that you get a lot more events fired than you 
would expect. Moving your mouse from a2 to a3 results in &amp;#8216;enter a3&amp;#8217;, &amp;#8216;enter 
a2&amp;#8217;, &amp;#8216;enter a1&amp;#8217;. Even more interestingly, moving from a3 to a2 produces &amp;#8216;enter 
a2&amp;#8217;, again, along with &amp;#8216;enter a1&amp;#8217;. So if you attached something meaningful to 
the a1 onmouseover, you would get many more than you expected. An mouseout is 
just as&amp;nbsp;strange. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OnMouseOut Example&lt;/strong&gt;&amp;nbsp;^^^^^^^^^^^^^^^^^^^^^^&lt;/p&gt;
&lt;p&gt;a1&lt;/p&gt;
&lt;p&gt;a2&lt;/p&gt;
&lt;p&gt;a3&lt;/p&gt;
&lt;p&gt;a4&lt;/p&gt;
&lt;p&gt;So going from a2 to a3 means you&amp;#8217;re &lt;em&gt;leaving&lt;/em&gt; a2. and a1. But wait, didn&amp;#8217;t you 
enter them as well? As it turns out, you did both. Thanks to bubbling, things 
get get really complicated, really fast. As a case in point, check out the next 
example: both events combined. Playing around with it should give you a pretty 
good idea of how it all&amp;nbsp;works. &lt;/p&gt;
&lt;p&gt;a1&lt;/p&gt;
&lt;p&gt;a2&lt;/p&gt;
&lt;p&gt;a3&lt;/p&gt;
&lt;p&gt;a4&lt;/p&gt;
&lt;p&gt;To highlight one example, going from a2 to a1 means &amp;#8216;leave a2&amp;#8217;, &amp;#8216;leave a1&amp;#8217;, and 
then &amp;#8216;enter a1&amp;#8217;&amp;nbsp;again.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Skitch style screenshot text in the GIMP</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Dec-17-skitch-style-screenshot-text-gimp.html"/>
            <updated>2009-12-17T14:16:23Z</updated>
            <published>2009-12-17T14:16:23Z</published>
            <id>/blog/2009-Dec-17-skitch-style-screenshot-text-gimp.html</id>
            
            <content type="html">
                                &lt;p&gt;I&amp;#8217;ve always liked the way that Skitch handles text &amp;#8212; it unobtrusively and stylishly stands out in your screenshot, allowing easy annotations. Unfortunately, Skitch isn&amp;#8217;t available for linux, so I&amp;#8217;m having to do with the next best thing &amp;#8212; Shutter, an open source linux screenshotting solution that&amp;#8217;s really slick, and mostly gets the job done. The only thing it&amp;#8217;s lacking is, again, the text &amp;#8212; it will give you text, but the regular kind that too easily gets lost in the background, especially if you&amp;#8217;re &amp;#8216;shooting something busy like a web&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;To add really slick looking text in The &lt;span class=&#34;caps&#34;&gt;GIMP&lt;/span&gt;, first use the text tool to get things rolling. For screenshots, I like to use regular ole&amp;#8217; Sans font as size 18, but choose whatever suits&amp;nbsp;you. &lt;/p&gt;
&lt;p&gt;&amp;lt;-&amp;gt; 4
feather 8
fill black
down right&amp;nbsp;1x1&lt;/p&gt;
&lt;p&gt;&amp;lt;-&amp;gt; 2
feather 3
fill&amp;nbsp;white&lt;/p&gt;
&lt;p&gt;&amp;lt;-&amp;gt; 0
fill&amp;nbsp;orange&lt;/p&gt;
&lt;p&gt;done!&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Songbird won&#39;t start in Karmic - gstreamer error</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Nov-04-songbird-wont-start-karmic-gstreamer-error.html"/>
            <updated>2009-11-04T12:18:36Z</updated>
            <published>2009-11-04T12:18:36Z</published>
            <id>/blog/2009-Nov-04-songbird-wont-start-karmic-gstreamer-error.html</id>
            
            <content type="html">
                                &lt;p&gt;(songbird-bin:2944): GStreamer-&lt;span class=&#34;caps&#34;&gt;WARNING&lt;/span&gt; **: Failed to load plugin &amp;#8216;/usr/lib/gstreamer-0.10/libgstrawparse.so&amp;#8217;: /usr/lib/gstreamer-0.10/libgstrawparse.so: undefined symbol:&amp;nbsp;gst_video_format_new_caps_interlaced&lt;/p&gt;
&lt;p&gt;(songbird-bin:2944): GStreamer-&lt;span class=&#34;caps&#34;&gt;WARNING&lt;/span&gt; **: Failed to load plugin &amp;#8216;/usr/lib/gstreamer-0.10/libgstdeinterlace.so&amp;#8217;: /usr/lib/gstreamer-0.10/libgstdeinterlace.so: undefined symbol:&amp;nbsp;gst_video_format_parse_caps_interlaced&lt;/p&gt;
&lt;p&gt;(songbird-bin:2944): GStreamer-&lt;span class=&#34;caps&#34;&gt;WARNING&lt;/span&gt; **: Failed to load plugin &amp;#8216;/usr/lib/gstreamer-0.10/libgstschro.so&amp;#8217;: /usr/lib/gstreamer-0.10/libgstschro.so: undefined symbol:&amp;nbsp;gst_adapter_masked_scan_uint32&lt;/p&gt;
&lt;p&gt;(songbird-bin:2944): GStreamer-&lt;span class=&#34;caps&#34;&gt;WARNING&lt;/span&gt; **: Failed to load plugin &amp;#8216;/usr/lib/gstreamer-0.10/libgsthdvparse.so&amp;#8217;: /usr/lib/gstreamer-0.10/libgsthdvparse.so: undefined symbol:&amp;nbsp;_gst_debug_dump_mem&lt;/p&gt;
&lt;p&gt;(songbird-bin:2944): GStreamer-&lt;span class=&#34;caps&#34;&gt;WARNING&lt;/span&gt; **: Failed to load plugin &amp;#8216;/usr/lib/gstreamer-0.10/libgstmpegdemux.so&amp;#8217;: /usr/lib/gstreamer-0.10/libgstmpegdemux.so: undefined symbol:&amp;nbsp;_gst_debug_dump_mem&lt;/p&gt;
&lt;p&gt;(songbird-bin:2944): GStreamer-&lt;span class=&#34;caps&#34;&gt;WARNING&lt;/span&gt; **: Failed to load plugin &amp;#8216;/usr/lib/gstreamer-0.10/libgstlibvisual.so&amp;#8217;: /usr/lib/gstreamer-0.10/libgstlibvisual.so: undefined symbol:&amp;nbsp;gst_adapter_prev_timestamp&lt;/p&gt;
&lt;p&gt;(songbird-bin:2944): GStreamer-&lt;span class=&#34;caps&#34;&gt;WARNING&lt;/span&gt; **: Failed to load plugin &amp;#8216;/usr/lib/gstreamer-0.10/libresindvd.so&amp;#8217;: /usr/lib/gstreamer-0.10/libresindvd.so: undefined symbol:&amp;nbsp;gst_navigation_event_parse_command&lt;/p&gt;
&lt;p&gt;(songbird-bin:2944): GStreamer-&lt;span class=&#34;caps&#34;&gt;WARNING&lt;/span&gt; **: Failed to load plugin &amp;#8216;/usr/lib/gstreamer-0.10/libgstdv.so&amp;#8217;: /usr/lib/gstreamer-0.10/libgstdv.so: undefined symbol: gst_tag_list_new_full
^Z
[1]+  Stopped                 ./testing/Songbird/songbird
jared@jared-laptop:~$ cd testing/Songbird/
jared@jared-laptop:~/testing/Songbird$ killall -9 songbird
[1]+  Killed                  ./testing/Songbird/songbird  (wd: ~)
(wd now: ~/testing/Songbird)
jared@jared-laptop:~/testing/Songbird$ killall -9 songbird
songbird: no process found
jared@jared-laptop:~/testing/Songbird$&amp;nbsp;./songbird&lt;/p&gt;
&lt;p&gt;(songbird-bin:2983): GStreamer-&lt;span class=&#34;caps&#34;&gt;WARNING&lt;/span&gt; **: Failed to load plugin &amp;#8216;/usr/lib/gstreamer-0.10/libgstrawparse.so&amp;#8217;: /usr/lib/gstreamer-0.10/libgstrawparse.so: undefined symbol:&amp;nbsp;gst_video_format_new_caps_interlaced&lt;/p&gt;
&lt;p&gt;(songbird-bin:2983): GStreamer-&lt;span class=&#34;caps&#34;&gt;WARNING&lt;/span&gt; **: Failed to load plugin &amp;#8216;/usr/lib/gstreamer-0.10/libgstdeinterlace.so&amp;#8217;: /usr/lib/gstreamer-0.10/libgstdeinterlace.so: undefined symbol:&amp;nbsp;gst_video_format_parse_caps_interlaced&lt;/p&gt;
&lt;p&gt;(songbird-bin:2983): GStreamer-&lt;span class=&#34;caps&#34;&gt;WARNING&lt;/span&gt; **: Failed to load plugin &amp;#8216;/usr/lib/gstreamer-0.10/libgstschro.so&amp;#8217;: /usr/lib/gstreamer-0.10/libgstschro.so: undefined symbol:&amp;nbsp;gst_adapter_masked_scan_uint32&lt;/p&gt;
&lt;p&gt;(songbird-bin:2983): GStreamer-&lt;span class=&#34;caps&#34;&gt;WARNING&lt;/span&gt; **: Failed to load plugin &amp;#8216;/usr/lib/gstreamer-0.10/libgsthdvparse.so&amp;#8217;: /usr/lib/gstreamer-0.10/libgsthdvparse.so: undefined symbol:&amp;nbsp;_gst_debug_dump_mem&lt;/p&gt;
&lt;p&gt;(songbird-bin:2983): GStreamer-&lt;span class=&#34;caps&#34;&gt;WARNING&lt;/span&gt; **: Failed to load plugin &amp;#8216;/usr/lib/gstreamer-0.10/libgstmpegdemux.so&amp;#8217;: /usr/lib/gstreamer-0.10/libgstmpegdemux.so: undefined symbol:&amp;nbsp;_gst_debug_dump_mem&lt;/p&gt;
&lt;p&gt;(songbird-bin:2983): GStreamer-&lt;span class=&#34;caps&#34;&gt;WARNING&lt;/span&gt; **: Failed to load plugin &amp;#8216;/usr/lib/gstreamer-0.10/libgstlibvisual.so&amp;#8217;: /usr/lib/gstreamer-0.10/libgstlibvisual.so: undefined symbol:&amp;nbsp;gst_adapter_prev_timestamp&lt;/p&gt;
&lt;p&gt;(songbird-bin:2983): GStreamer-&lt;span class=&#34;caps&#34;&gt;WARNING&lt;/span&gt; **: Failed to load plugin &amp;#8216;/usr/lib/gstreamer-0.10/libresindvd.so&amp;#8217;: /usr/lib/gstreamer-0.10/libresindvd.so: undefined symbol:&amp;nbsp;gst_navigation_event_parse_command&lt;/p&gt;
&lt;p&gt;(songbird-bin:2983): GStreamer-&lt;span class=&#34;caps&#34;&gt;WARNING&lt;/span&gt; **: Failed to load plugin &amp;#8216;/usr/lib/gstreamer-0.10/libgstdv.so&amp;#8217;: /usr/lib/gstreamer-0.10/libgstdv.so: undefined symbol:&amp;nbsp;gst_tag_list_new_full&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">UNetbootin failed to unmount /cdrom</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Nov-01-unetbootin-failed-unmount-cdrom.html"/>
            <updated>2009-11-01T13:49:56Z</updated>
            <published>2009-11-01T13:49:56Z</published>
            <id>/blog/2009-Nov-01-unetbootin-failed-unmount-cdrom.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image::&amp;nbsp;/media/images/ubuntu-error.png&lt;/p&gt;
&lt;p&gt;I used UNetBootin to install Karmic (Ubuntu 9.10) to my laptop, but I kept running into the error &amp;#8220;Failed to unmount&amp;nbsp;partitions&amp;#8221;&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;bash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The installer needs to commit changes to partition tables, but cannot do so becaue partitions on the following mount points could not be unmounted:

/cdrom

Please close any applications using these mount points

Would you like the installer to try to unmount these partitions again?&#34;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is probably a result of me choosing the &amp;#8220;install from Hard Drive&amp;#8221; option in UNetbootin, and so I was about to give up, when I tried just unmounting ;)
Of course, ubuntu complained a bit, but when I used strong words (flags) with it, it complied. The command I used&amp;nbsp;was&lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo umount -l -r -f /cdrom
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which worked like a charm, and allowed installation to continue normally. &lt;span class=&#34;caps&#34;&gt;NOTE&lt;/span&gt;: you can&amp;#8217;t use this method to install ubuntu to the partition from which you ran unetbootin&amp;#8230;that just doesn&amp;#8217;t&amp;nbsp;work.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">SVG Birds</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Oct-11-svg-birds.html"/>
            <updated>2009-10-11T19:51:50Z</updated>
            <published>2009-10-11T19:51:50Z</published>
            <id>/blog/2009-Oct-11-svg-birds.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image::&amp;nbsp;/media/images/birds2.png&lt;/p&gt;
&lt;p&gt;I needed to create some svg birds for a game I&amp;#8217;m working on (i couldn&amp;#8217;t find any around) and I thought I&amp;#8217;d share them; feel free to use/abuse them in any way you want&amp;nbsp;;)&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Error installing xdebug: phpize not found</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Aug-15-error-installing-xdebug-phpize-not-found.html"/>
            <updated>2009-08-15T17:18:17Z</updated>
            <published>2009-08-15T17:18:17Z</published>
            <id>/blog/2009-Aug-15-error-installing-xdebug-phpize-not-found.html</id>
            
            <content type="html">
                                &lt;p&gt;So I ran &amp;#8220;sudo pecl install xdebug&amp;#8221; like a good linux user, but was stymied when it threw the error &amp;#8220;phpize not found&amp;#8221;, especially when &amp;#8220;sudo apt-get install phpize&amp;#8221; yielded no friuts (darn it, that usually&amp;nbsp;works!)&lt;/p&gt;
&lt;p&gt;The magic package actually happens to be &amp;#8220;php5-dev&amp;#8221;, so a quick &amp;#8220;sudo apt-get install php5-dev&amp;#8221; fixes&amp;nbsp;everything!&lt;/p&gt;
&lt;p&gt;Now wasn&amp;#8217;t that simple&amp;#8230;of course it made me waste a half hour searching, but, never again&amp;nbsp;;)&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">[Drupal] Make user profile URLs readable</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-May-27-drupal-make-user-profile-urls-readable.html"/>
            <updated>2009-05-27T08:07:24Z</updated>
            <published>2009-05-27T08:07:24Z</published>
            <id>/blog/2009-May-27-drupal-make-user-profile-urls-readable.html</id>
            
            <content type="html">
                                &lt;p&gt;Here&amp;#8217;s a tip for making you&amp;#8217;re community site that much more user&amp;nbsp;friendly:&lt;/p&gt;
&lt;p&gt;change&amp;nbsp;this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; *http://example.com/user/5275*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&amp;nbsp;this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; *http://example.com/users/joe-shmo*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much better,&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;To accomplish this, we will make use of the excellent &lt;code&gt;Pathauto &amp;lt;http://drupal.org/project/pathauto&amp;gt;&lt;/code&gt;_ module, which, among other things, allows us to alias user profile&amp;nbsp;urls.&lt;/p&gt;
&lt;p&gt;Once pathauto is installed and enabled, go to &lt;em&gt;admin/build/path/pathauto&lt;/em&gt; (&lt;em&gt;admin/settings/pathauto&lt;/em&gt; in drupal 5), and select&amp;nbsp;**&amp;#8221;&lt;/p&gt;
&lt;p&gt;.. image::&amp;nbsp;file:///tmp/&lt;span class=&#34;caps&#34;&gt;URL&lt;/span&gt;%20aliases%20%7C%20YAAlumni%20Test%20Page.jpg&lt;/p&gt;
&lt;p&gt;Bulk generate aliases for users that are not aliased&amp;#8221;** under the &amp;#8220;user path settings&amp;#8221;&amp;nbsp;dropdown.&lt;/p&gt;
&lt;p&gt;.. image::&amp;nbsp;/media/images/&lt;span class=&#34;caps&#34;&gt;URL&lt;/span&gt;%20aliases%20%7C%20YAAlumni%20Test%20Page-1.jpg&lt;/p&gt;
&lt;p&gt;This will create the aliases for all your current users (future users will be aliased as they are&amp;nbsp;registered).&lt;/p&gt;
&lt;p&gt;Save the configuration, and you&amp;#8217;re all&amp;nbsp;set!&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">All screenshots from drupal theme garden on one page</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-May-15-all-screenshots-drupal-theme-garden-one-page.html"/>
            <updated>2009-05-15T23:02:24Z</updated>
            <published>2009-05-15T23:02:24Z</published>
            <id>/blog/2009-May-15-all-screenshots-drupal-theme-garden-one-page.html</id>
            
            <content type="html">
                                &lt;p&gt;I got annoyed with &lt;code&gt;drupal theme garden &amp;lt;http://themegarden.org/&amp;gt;&lt;/code&gt;&lt;em&gt; so I whipped up &lt;code&gt;this page &amp;lt;/prog/themegarden.cgi&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;.. image::&amp;nbsp;/media/images/drupalthemegarden.png&lt;/p&gt;
&lt;p&gt;this shows all the screenshots from all the (drupal 6) themes on&amp;nbsp;themegarden.org&lt;/p&gt;
&lt;p&gt;&lt;code&gt;check it out here &amp;lt;/prog/themegarden.cgi&amp;gt;&lt;/code&gt;_&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">I have vanquished the beast!</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-May-11-i-have-vanquished-beast.html"/>
            <updated>2009-05-11T21:35:50Z</updated>
            <published>2009-05-11T21:35:50Z</published>
            <id>/blog/2009-May-11-i-have-vanquished-beast.html</id>
            
            <content type="html">
                                &lt;p&gt;procedure&lt;/p&gt;
&lt;p&gt;sudo apt-get install ndiswrapper-common&amp;nbsp;wireless-tools&lt;/p&gt;
&lt;p&gt;dl this zip:&amp;nbsp;http://fedorasolved.org/mobile/fc-wireless/80211g.zip/view&lt;/p&gt;
&lt;p&gt;install both the bcmwl5.inf and bcmwl5a.inf as found&amp;nbsp;here:&lt;/p&gt;
&lt;p&gt;http://web.archive.org/web/20041229121444/http://ndiswrapper.sourceforge.net/phpwiki/index.php/Installation&lt;/p&gt;
&lt;p&gt;ndiswrapper&amp;nbsp;-l&lt;/p&gt;
&lt;p&gt;modprobe&amp;nbsp;ndiswrapper&lt;/p&gt;
&lt;p&gt;dmesg&lt;/p&gt;
&lt;p&gt;install broadcomm&amp;nbsp;firmware:&lt;/p&gt;
&lt;p&gt;http://linuxwireless.org/en/users/Drivers/b43#devicefirmware&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo apt-get install&amp;nbsp;b43-fwcutter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;iwlist wlan0&amp;nbsp;scan&lt;/p&gt;
&lt;p&gt;sudo ifconfig wlan0&amp;nbsp;up&lt;/p&gt;
&lt;p&gt;ifconfig&lt;/p&gt;
&lt;p&gt;iwconfig&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">WA haxxz</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Apr-02-wa-haxxz.html"/>
            <updated>2009-04-02T06:30:22Z</updated>
            <published>2009-04-02T06:30:22Z</published>
            <id>/blog/2009-Apr-02-wa-haxxz.html</id>
            
            <content type="html">
                                &lt;p&gt;C:/Documents and Settings/classroom/Application Data/Microsoft/Internet Explorer/Desktop.http
ok maybe this time?
it will work
C:/Documents and Settings/classroom/Local Settings/Application&amp;nbsp;Data/Microsoft/Wallpaper1.bmp&lt;/p&gt;
&lt;p&gt;just testing stuff out.
now with&amp;nbsp;revisions!&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Songbird Recipe: Playlists</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Feb-02-songbird-recipe-playlists.html"/>
            <updated>2009-02-02T22:24:55Z</updated>
            <published>2009-02-02T22:24:55Z</published>
            <id>/blog/2009-Feb-02-songbird-recipe-playlists.html</id>
            
            <content type="html">
                                &lt;p&gt;Here&amp;#8217;s a quick javascript+&lt;span class=&#34;caps&#34;&gt;XPCOM&lt;/span&gt; recipe on how to get a list of the user&amp;#8217;s 
playlists in a songbird&amp;nbsp;extension. &lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function getUserPlaylists() {
    var sLM = Components.classes[&#34;@songbirdnest.com/Songbird/library/Manager;1&#34;]  
                .getService(Components.interfaces.sbILibraryManager);
    var aLib = sLM.mainLibrary;
    var playlists = [aLib];
    var pnames = [];
    var listener = {
        onEnumerationBegin: function() { },
        onEnumerationEnd: function() { },
        onEnumeratedItem: function(list, item) {
            if (pnames.indexOf(item.name)==-1){ // sometimes we get smart playlists multiple times
                playlists.push(item);
                pnames.push(item.name);
            }
            return Components.interfaces.sbIMediaListEnumerationListener.CONTINUE;
        }
    };
    aLib.enumerateItemsByProperty(&#34;http://songbirdnest.com/data/1.0#isList&#34;, &#34;1&#34;, listener );
    return playlists;
}
function playPlaylist(plist,i){ // i == index of the song you want to play
    var gMM = Components.classes[&#34;@songbirdnest.com/Songbird/Mediacore/Manager;1&#34;]  
                    .getService(Components.interfaces.sbIMediacoreManager);
    gMM.sequencer.playView(plist.createView(),i);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you get your lists of playlists, you can start one playing with 
playPlaylist(plist,index) or check the user-visible names with&amp;nbsp;plist.name. &lt;/p&gt;
&lt;p&gt;For more info on the songbird extension &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;, hit &lt;code&gt;the docs 
&amp;lt;http://developer.songbirdnest.com/add-on-api/docs/trunk/&amp;gt;&lt;/code&gt;&lt;em&gt; or mozilla&amp;#8217;s 
&lt;code&gt;songbird irc channel &amp;lt;irc://irc.mozilla.org/#songbird&amp;gt;&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Install Python 2.6 in Ubuntu</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Jan-20-install-python-26-ubuntu.html"/>
            <updated>2009-01-20T18:20:48Z</updated>
            <published>2009-01-20T18:20:48Z</published>
            <id>/blog/2009-Jan-20-install-python-26-ubuntu.html</id>
            
            <content type="html">
                                &lt;p&gt;At first blush, it would seem that those wanting the latest stable python, 2.6, 
would have to compile it themselves (or so &lt;code&gt;python.org 
&amp;lt;http://www.python.org/download/releases/2.6.1/&amp;gt;&lt;/code&gt;&lt;em&gt; would indicate). Fortunately 
for us, that process, which is at best annoying, and at worst long and 
complicated, is spared us by our friends over at Launchpad, and their 
&lt;code&gt;&#34;Personal Package Archives&#34; 
&amp;lt;https://help.launchpad.net/Packaging/PPA#Installing%20software%20from%20a%20PPA&amp;gt;&lt;/code&gt;&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;In order to install anything from the &lt;span class=&#34;caps&#34;&gt;PPA&lt;/span&gt;, you need to add them to your 
repositories: &amp;#8220;deb http://ppa.launchpad.net/doko/ubuntu/ intrepid&amp;nbsp;main&amp;#8221; &lt;/p&gt;
&lt;p&gt;For those who&amp;#8217;ve forgotten how, or just need a refresher, hit &lt;code&gt;this page 
&amp;lt;https://help.ubuntu.com/community/Repositories/Ubuntu#Adding%20Repositories%20in%20Ubuntu&amp;gt;&lt;/code&gt;_ 
for full&amp;nbsp;instructions. &lt;/p&gt;
&lt;p&gt;Once you&amp;#8217;ve done that, just&amp;nbsp;run &lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update

sudo apt-get install python2.6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and you&amp;#8217;re done! (note that aptitude will inform you that this package is &lt;em&gt;not 
verified&lt;/em&gt; &amp;#8212; because it&amp;#8217;s not in ubuntu&amp;#8217;s own&amp;nbsp;repositories).&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Python + Last.FM</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Jan-20-python-lastfm.html"/>
            <updated>2009-01-20T17:27:48Z</updated>
            <published>2009-01-20T17:27:48Z</published>
            <id>/blog/2009-Jan-20-python-lastfm.html</id>
            
            <content type="html">
                                &lt;p&gt;LastFM provides a great &lt;span class=&#34;caps&#34;&gt;REST&lt;/span&gt; &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;, which exposes almost all of its 
functionality, from getting info about a track to finding events in a specific 
area. Today I will demonstrate how to harness a little portion of that power 
with python, namely, getting a user&amp;#8217;s recent&amp;nbsp;tracks. &lt;/p&gt;
&lt;p&gt;The reason I looked into this, was to build a &amp;#8220;Last 10 Tracks&amp;#8221; Facebook app, 
which is currently in&amp;nbsp;progress. &lt;/p&gt;
&lt;p&gt;If you haven&amp;#8217;t already done so, head over to last.fm and get an &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt; key, so you 
can access the&amp;nbsp;api. &lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Songbird in Kubuntu</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Jan-13-songbird-kubuntu.html"/>
            <updated>2009-01-13T20:20:13Z</updated>
            <published>2009-01-13T20:20:13Z</published>
            <id>/blog/2009-Jan-13-songbird-kubuntu.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image:: http://lifehacker.com/assets/resources/2007/06/Songbird.png
   :width: 272
   :height: 282
   :alt:&amp;nbsp;Songbird&lt;/p&gt;
&lt;p&gt;The amazing thing about Mozilla software is, that its hard to be more open than they are. Yes, they&amp;#8217;re open source, so &amp;#8216;anyone can contribute&amp;#8217;, but in all seriouseness, most of us are too busy/scared/noob to do anything like that. The real amazing bit lies in the Add-ons, which &lt;em&gt;anyone&lt;/em&gt; can make, and if you dont like something, you can just role your own fix for it &amp;#8212; in minutes. Using &lt;em&gt;javasript&lt;/em&gt;. Seriousely, it doesnt get much easier than&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;The newly released version 1.0 of Songbird is no exception: full of 
functionality, and just overflowing with add-ons to do anything you want and 
much more besides. Here&amp;#8217;s a little tutorial on how I set up my Songbird, on 
Kubuntu&amp;nbsp;Ibex. &lt;/p&gt;
&lt;p&gt;http://www.getsongbird.com/ &lt;/p&gt;
&lt;p&gt;First, you need to &lt;code&gt;grab the .deb &amp;lt;http://www.getdeb.net/release/3519/0&amp;gt;&lt;/code&gt;&lt;em&gt; from 
&lt;code&gt;getdeb.net &amp;lt;http://getdeb.net&amp;gt;&lt;/code&gt;&lt;/em&gt; (or you can run an &lt;code&gt;installation script 
&amp;lt;https://help.ubuntu.com/community/Songbird&amp;gt;&lt;/code&gt;_, provided by the Ubuntu&amp;nbsp;community)&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Convert videos with ffmpeg</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Jan-06-convert-videos-ffmpeg.html"/>
            <updated>2009-01-06T14:07:58Z</updated>
            <published>2009-01-06T14:07:58Z</published>
            <id>/blog/2009-Jan-06-convert-videos-ffmpeg.html</id>
            
            <content type="html">
                                &lt;p&gt;.. image:: http://ffmpeg.mplayerhq.hu/ffmpeg-logo.png
   :width: 306
   :height: 84
   :alt: FFmpeg&amp;nbsp;logo&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FFmpeg &amp;lt;http://ffmpeg.mplayerhq.hu/&amp;gt;&lt;/code&gt;_ is a wonderful   tool which every 
aspiring linux guru should get familiar with. The thing it does, just about 
better   than anything else, is handle media files. You can mux them, demux 
them, encode/decode, resize, compress  &amp;#8230;..you name&amp;nbsp;it. &lt;/p&gt;
&lt;p&gt;Unfortunately, all that versatility means that it can be somewhat confusing, 
if, say &lt;em&gt;all you want   to do is convert this one file&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;Well, actually, most of the time, ffmpeg will play nice, and theres this one 
simple command that will   do&amp;nbsp;you: &lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ffmpeg -i &#34;infile.abc&#34; &#34;outfile.cba&#34;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this manner, you can convert wav to mp3, wmv to avi, or flv to&amp;nbsp;mpg. &lt;/p&gt;
&lt;p&gt;The problems start, of course, when ffmpeg starts spitting out errors. This 
happens when the settings   for your infile are incompatible woth the format of 
your outfile&amp;#8230;so the solution is to manually set   those&amp;nbsp;settings. &lt;/p&gt;
&lt;p&gt;if it complains about &amp;#8220;timebase not supported by mpeg 4 standard&amp;#8221;, try adding 
this parameter (before   the outfile&amp;nbsp;param): &lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-r 25
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;this sets the framerate to the ffmpeg&amp;nbsp;default &lt;/p&gt;
&lt;p&gt;Another error I got was &amp;#8220;Sampling rate 11025 is not allowed in&amp;nbsp;mp2&amp;#8221; &lt;/p&gt;
&lt;p&gt;to fix that, just set the sampling rate to the default&amp;nbsp;with &lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-ar 44100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another handy option is the file size limit &amp;#8212; great for compressing a video, 
when you dont want to   mess with bitrates and framerates and the like. The 
file size is specified in bytes,&amp;nbsp;thus &lt;/p&gt;
&lt;p&gt;.. code-block::&amp;nbsp;python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ffmpeg -i &#34;large.mov&#34; -fs 10000000 -s qvga &#34;small.avi&#34;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the &amp;#8220;-s qvga&amp;#8221; parameter resizes the video as well &amp;#8212; down to&amp;nbsp;320x240. &lt;/p&gt;
&lt;p&gt;For extensive technical documentation for ffmpeg, &lt;code&gt;go here 
&amp;lt;http://ffmpeg.mplayerhq.hu/ffmpeg-doc.html&amp;gt;&lt;/code&gt;_.&lt;/p&gt;            </content>
        </entry>
    </feed>