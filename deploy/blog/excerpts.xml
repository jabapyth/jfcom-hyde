<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>
        BASIC blog excerpts feed    </title>
        <link href="/blog/excerpts.xml" rel="self" />
    
        <link href="/"/>
    
        
    <updated>2013-04-29T20:12:07Z</updated>

    <id>/blog/excerpts.xml/</id>

            <entry>
            <title type="html">ProtoClipper - clip web pages for rapid prototyping</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Apr-25-protoclipper-clip-web-pages-rapid-prototyping.html"/>
            <updated>2013-04-25T20:00:38Z</updated>
            <published>2013-04-25T20:00:38Z</published>
            <id>/blog/2013-Apr-25-protoclipper-clip-web-pages-rapid-prototyping.html</id>
            
            <content type="html">
                
                &lt;p&gt;I&amp;#8217;m doing some prototyping of &lt;span class=&#34;caps&#34;&gt;UX&lt;/span&gt; changed for a website, and created a tool to help you create sandboxed, interactive prototypes. Essentially it lets you take a snapshot of a single section of a page and save it as a static &lt;span class=&#34;caps&#34;&gt;HTML&lt;/span&gt; file - including everything that may have been dynamically loaded or changed. Then the in-body javascript is removed, and you&amp;#8217;re free to edit the resulting file and produce your interactive&amp;nbsp;mockup.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">The Internet of Things</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Apr-11-internet-things.html"/>
            <updated>2013-04-11T11:00:00Z</updated>
            <published>2013-04-11T11:00:00Z</published>
            <id>/blog/2013-Apr-11-internet-things.html</id>
            
            <content type="html">
                
                &lt;p&gt;The &amp;#8220;simplify&amp;#8221; trend among productivity specialists calls for a rejection of
much of the complexities of modern lifestyle, opting instead for simplicity
and minimalism. This is by no means a new concept; the ascetic monks from
various religions have embraced such practices for millenia. However, with the
rise of the technological age and the birth of the twenty-first century, such
ideals have become increasingly popular. Why is it, though, that the modern
world with all its conveniences and time-savers would drive so many to reject
these very &amp;#8220;advancements&amp;#8221;? These amenities and convenient technologies are
developed around and often serve to support a culture of consumerism,
materialism, and individualism. While online shopping, social networking, and
email can be incredibly useful and assist in necessary tasks, they can also be
a significant detriment to our productivity and general well-being. Add to
that the many often disturbing negative uses of these new technologies, and
one can readily understand the urge to step back and focus on the&amp;nbsp;essential.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Social Conference</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Apr-09-social-conference.html"/>
            <updated>2013-04-09T21:18:00Z</updated>
            <published>2013-04-09T21:18:00Z</published>
            <id>/blog/2013-Apr-09-social-conference.html</id>
            
            <content type="html">
                
                &lt;p&gt;This past weekend I experimented with using twitter during one of the sessions
of &lt;code&gt;General Conference &amp;lt;http://conference.lds.org/&amp;gt;&lt;/code&gt;__. Frankly, it was
similar to watching conference with several dozen other people who were all
carrying on lively conversations, complete with peanut&amp;nbsp;gallery.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">If I can&#39;t see you</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Apr-04-if-i-cant-see-you.html"/>
            <updated>2013-04-04T00:04:39Z</updated>
            <published>2013-04-04T00:04:39Z</published>
            <id>/blog/2013-Apr-04-if-i-cant-see-you.html</id>
            
            <content type="html">
                
                &lt;p&gt;If you know indisputably that a behavior or product has destroyed lives and
families, would you dare touch it? In a number of cases, online gaming has
done just that. This is only a small percentage, of course, and we can&amp;#8217;t live
our lives in fear of everything that has associated risks. We all enjoy
electricity, for example, though it has tremendous power to kill. But this
begs the question: what benefits are there from online gaming that warrant
even the slight risk of devastation? Call me an idealist, but I believe in a
world where truth is more exciting than fiction, where reality is &lt;em&gt;better&lt;/em&gt;
than virtual reality. Is it too much to hope that everyone could be exerting
their individual effort towards something constructive and inherently
meaningful for mankind, rather than commanding hoards of virtual orcs to blow
up someone else&amp;#8217;s hoards of virtual orcs? And it&amp;#8217;s not just the war games;
cultivating a virtual farm or flinging angry birds seems to accomplish equally
little. I don&amp;#8217;t mean to imply that online gaming is devoid of inherent value.
I&amp;#8217;m sure that players learn some amount of teamwork and problem solving over
the course of a quest. I propose, however, that spending time and effort in
actual reality results in stronger relationships and greater real value
overall. Escaping the problems we face in real life by immersing ourselves in
a virtual life does nothing to solve our problems, and often just intensifies&amp;nbsp;them.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Software Patents</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Apr-02-software-patents.html"/>
            <updated>2013-04-02T21:59:48Z</updated>
            <published>2013-04-02T21:59:48Z</published>
            <id>/blog/2013-Apr-02-software-patents.html</id>
            
            <content type="html">
                
                &lt;p&gt;.. youtube::&amp;nbsp;Hk0E5a1nCjU&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Creative Education</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Mar-28-creative-education.html"/>
            <updated>2013-03-28T11:43:01Z</updated>
            <published>2013-03-28T11:43:01Z</published>
            <id>/blog/2013-Mar-28-creative-education.html</id>
                        <category   scheme="/blog/tags"
                        term="education"
                        label="Education" />
                        <category   scheme="/blog/tags"
                        term="reform"
                        label="Reform" />
            
            <content type="html">
                
                &lt;p&gt;It&amp;#8217;s time to  stop ignoring the need for general education reform. It&amp;#8217;s true,                                                                                                                                                                                               &lt;br /&gt;
there are some of us who happen to be good at the kinds of things that                                                                                                                                                                                                      &lt;br /&gt;
standardized tests are looking for, and who learn to love to learn &lt;em&gt;despite&lt;/em&gt; their                                                                                                                                                                                              &lt;br /&gt;
public education. But for every one who survives public schooling with creativity in tact, there                                                                                                                                                                                              &lt;br /&gt;
are a dozen others who buy in to the game, who either spend their time trying                                                                                                                                                                                               &lt;br /&gt;
to be good at the things that are tested, or sacrifice their creativity and                                                                                                                                                                                                 &lt;br /&gt;
lose all desire to learn because the school system so often incentivises                                                                                                                                                                                                    &lt;br /&gt;
conformity and punishes their&amp;nbsp;creativity.                                                                                                                                                                                                                                     &lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">You know, we all want to change the world</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Mar-26-you-know-we-all-want-change-world.html"/>
            <updated>2013-03-26T11:31:25Z</updated>
            <published>2013-03-26T11:31:25Z</published>
            <id>/blog/2013-Mar-26-you-know-we-all-want-change-world.html</id>
                        <category   scheme="/blog/tags"
                        term="ict4d"
                        label="Ict4D" />
            
            <content type="html">
                
                &lt;p&gt;If you want to change the world, chances are you major in business, law,
political science, or economics. If you don&amp;#8217;t really care about making tons of 
money, then sociology, anthropology, and nonprofit management are
possibilities. In general, though, computer science isn&amp;#8217;t on the top of the
&amp;#8220;change-maker&amp;#8221; list, and yet computer technology is changing the world faster
than anything else.  In many developing nations, the urban and rural poor have
cell phones and satellite dishes before they have shoes and running water. In
the information age, technology has the potential to connect societies and
cultures, and to empower the poor in less-developed nations to speak up and be
heard on a global scale. But who will build the software and design the
hardware that will enable this change? Computer scientists and engineers are
changing the world&amp;nbsp;already.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Communist Software</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Mar-19-communist-software.html"/>
            <updated>2013-03-19T11:30:52Z</updated>
            <published>2013-03-19T11:30:52Z</published>
            <id>/blog/2013-Mar-19-communist-software.html</id>
                        <category   scheme="/blog/tags"
                        term="communism"
                        label="Communism" />
            
            <content type="html">
                
                &lt;p&gt;The world has seen several attempts to implement communism in the political
sphere, which invariably end in corrupt leaders and oppression of the masses.
So what makes open source and free software different? The core open
source values look a lot like communism on the face of it; people contribute
without monetary compensation, and receive without having to pay. Everyone
gives what they can and receives what they need. The key difference here,
though, is that the open source phenomenon has been entirely voluntary, in no
way enforced by a government or entity.  For some reason, intelligent,
hard-working people from around the world have gravitated to this standard of
openness, resulting in an incredible number of free software projects, many of
which are very professional and have been able to help millions of people. The
ease of contributing afforded by the internet and the inherent low resource
cost make software development a domain where the ideal of community
contribution and benefit can actually be&amp;nbsp;realized.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Grandpa&#39;s got an iPad</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Mar-14-grandpas-got-ipad.html"/>
            <updated>2013-03-14T11:49:36Z</updated>
            <published>2013-03-14T11:49:36Z</published>
            <id>/blog/2013-Mar-14-grandpas-got-ipad.html</id>
                        <category   scheme="/blog/tags"
                        term="genealogy"
                        label="Genealogy" />
            
            <content type="html">
                
                &lt;p&gt;In general, age and technological aptitude seem to be negatively correlated.
Toddlers raised on an iPad have no difficulty navigating the various menus and
interfaces now ubiquitous in the digital age, while their grandparents and
great-grandparents are left in the dust. In fact, &amp;#8220;my grandmother&amp;#8221; has become
the archetypal &amp;#8220;most inept computer user I know&amp;#8221;, resulting in claims such as
&amp;#8220;this is so easy even my grandmother could use it&amp;#8221;. Imagine the clash, then,
when a domain dominated by the elderly &amp;#8212; genealogy &amp;#8212; experiences a
technological revolution, as has occurred over the past few decades. The
search for progenitors lends itself naturally to digitization, but it also
requires the main demographic involved to rely heavily on the younger&amp;nbsp;generation.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Software Wars</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Mar-07-software-wars.html"/>
            <updated>2013-03-07T11:19:16Z</updated>
            <published>2013-03-07T11:19:16Z</published>
            <id>/blog/2013-Mar-07-software-wars.html</id>
            
            <content type="html">
                
                &lt;p&gt;The current software patent environment is enough to make me want to hide
under a rock somewhere, alone with my code and safe from predatory companies
and their packs of lawyers. If you&amp;#8217;ve missed it, the news is rife with
examples of companies armed with rediculously broad patents&amp;#8212;covering things
like &amp;#8220;downloading a file&amp;#8221; or &amp;#8220;a webpage with a popup&amp;#8221;&amp;#8212;who pray on small
startups without the funds to cover the court costs.  The internet is littered
with examples of bright minds speaking out against the current software patent
situation, and I haven&amp;#8217;t found one yet touting its benefits, or claiming that
it does in fact encourage innovation or accomplish &lt;em&gt;any&lt;/em&gt; of the goals for
which it was originally created.  But it&amp;#8217;s important to remember that we haven&amp;#8217;t
yet had two decades of the &lt;em&gt;internet&lt;/em&gt;, and the software industry isn&amp;#8217;t even
half a century old.  It&amp;#8217;s more than likely that the situation will become a
lot more sane after another half-century or so; I have faith in humanity that
judges around the country will eventually understand the nature of software,
and this familiarity will remove the opportunity for predatory &amp;#8220;patent
trolling&amp;#8221; and the&amp;nbsp;like.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">The Sleeping Giant</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Feb-22-sleeping-giant.html"/>
            <updated>2013-02-22T00:54:13Z</updated>
            <published>2013-02-22T00:54:13Z</published>
            <id>/blog/2013-Feb-22-sleeping-giant.html</id>
                        <category   scheme="/blog/tags"
                        term="microsoft"
                        label="Microsoft" />
            
            <content type="html">
                
                &lt;p&gt;There was a time when Microsoft was the hottest, fastest kid on the block,
dominating every market it entered. Bill Gates, the magnetic visionary, lead
the company with a philosophy that rejected complacency, always striving for
progress and innovation. That was the Microsoft of the 90s. The most recent
decade saw the software giant become complacent, somehow failing to retain the
air of innovation, drive, and novelty. In mobile devices, the Zune and the
Windows phone were relegated to the back seat while Apple and Google drove the
market. Yet, somehow, Microsoft seems to have accomplished the improbable in
the world of technology: a public image reboot. Young people of today see
Microsoft as cooler than it was two years ago, thanks to a strong emphasis on
design and human connectedness in advertising and&amp;nbsp;marketing.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Security is for the paranoid</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Feb-14-security-paranoid.html"/>
            <updated>2013-02-14T11:33:58Z</updated>
            <published>2013-02-14T11:33:58Z</published>
            <id>/blog/2013-Feb-14-security-paranoid.html</id>
            
            <content type="html">
                
                &lt;p&gt;Through modern media, we are well aware of the prevalence of hackers and
compromised accounts, both on a personal and corporate level. Yet somehow
it&amp;#8217;s still easy to be lulled into security by &lt;span class=&#34;caps&#34;&gt;SSL&lt;/span&gt;, secure routers, and
passwords that Google told me were &amp;#8220;very&amp;nbsp;strong&amp;#8221;.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">What if Computer Science had been invented by Women?</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Feb-07-what-if-computer-science-had-been-invented-women.html"/>
            <updated>2013-02-07T11:36:49Z</updated>
            <published>2013-02-07T11:36:49Z</published>
            <id>/blog/2013-Feb-07-what-if-computer-science-had-been-invented-women.html</id>
            
            <content type="html">
                
                &lt;p&gt;If we want to know why women aren&amp;#8217;t drawn to &lt;span class=&#34;caps&#34;&gt;CS&lt;/span&gt; like they are to other
scientific departments, we have no further to look than the &amp;#8220;typical computer
nerd&amp;#8221;. Since it&amp;#8217;s inception, computer programming has been dominated by
young men whose fascination with computers borders on obsession; early 
startups in the now silicon valley were manned by college kids who ran on
pizza and slept in their cubicles. Why would women want to be a part of that? 
If the culture of computing had &lt;em&gt;begun&lt;/em&gt; with women, it would likely 
be much better structured, cleaner, and less dominated by&amp;nbsp;trial-and-error.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Facebook knows where you live</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Feb-05-facebook-knows-where-you-live.html"/>
            <updated>2013-02-05T11:36:57Z</updated>
            <published>2013-02-05T11:36:57Z</published>
            <id>/blog/2013-Feb-05-facebook-knows-where-you-live.html</id>
                        <category   scheme="/blog/tags"
                        term="facebook"
                        label="Facebook" />
            
            <content type="html">
                
                &lt;p&gt;Get ready for Big Brother: Facebook&amp;#8217;s new app &amp;#8220;innovation&amp;#8221; will track your
movements even when you aren&amp;#8217;t using it. Though this might have a few perks
for users, the real winners are in advertising &amp;#8212; marketers would leap at the
chance to take advantage of that kind of information, to make
ultra-personalized ads based on where you go and what you do. But for the
average user, this could usher in the era forecasted by minority report and
1984, where big brother knows where you are at all times, billboards address
you by name, and abuse of privacy is just too easy to pass up. This begs the
question: is such a future inevitable? Can we imagine technological advance
without such deterioration of privacy? Because if we don&amp;#8217;t come up with
something soon, it will no longer be an&amp;nbsp;option.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">North Korea Penetrated by Crowd Sourcing</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Jan-29-north-korea-penetrated-crowd-sourcing.html"/>
            <updated>2013-01-29T21:29:12Z</updated>
            <published>2013-01-29T21:29:12Z</published>
            <id>/blog/2013-Jan-29-north-korea-penetrated-crowd-sourcing.html</id>
            
            <content type="html">
                
                &lt;p&gt;North Korea, which since the end of the Korean war has been shut off from the
world and especially technology, is finally being opened up, at least
cartographically; google maps will soon be updated with detail about the
streets and cities of the hermit nation, thanks entirely to user contributions.
This instance joins many others in the recent past showing the sometimes
disruptive power of internet collaboration. Even in a country where internet
access is highly restricted, truth and information eventually find their way
out onto the larger&amp;nbsp;scene.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">The Information Age is Killing Original Thought</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Jan-17-information-age-killing-original-thought.html"/>
            <updated>2013-01-17T23:36:08Z</updated>
            <published>2013-01-17T23:36:08Z</published>
            <id>/blog/2013-Jan-17-information-age-killing-original-thought.html</id>
                        <category   scheme="/blog/tags"
                        term="creativity"
                        label="Creativity" />
                        <category   scheme="/blog/tags"
                        term="big data"
                        label="Big Data" />
                        <category   scheme="/blog/tags"
                        term="information age"
                        label="Information Age" />
                        <category   scheme="/blog/tags"
                        term="thought"
                        label="Thought" />
            
            <content type="html">
                
                &lt;p&gt;.. figure:: http://farm4.staticflickr.com/3123/2553692300_acd80eff45_m.jpg
  :figclass:&amp;nbsp;align-right&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Data &lt; Information &lt; Knowledge &lt; Wisdom</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2013-Jan-17-data-information-knowledge-wisdom.html"/>
            <updated>2013-01-17T02:13:30Z</updated>
            <published>2013-01-17T02:13:30Z</published>
            <id>/blog/2013-Jan-17-data-information-knowledge-wisdom.html</id>
                        <category   scheme="/blog/tags"
                        term="knowledge"
                        label="Knowledge" />
                        <category   scheme="/blog/tags"
                        term="learning"
                        label="Learning" />
                        <category   scheme="/blog/tags"
                        term="philosophy"
                        label="Philosophy" />
                        <category   scheme="/blog/tags"
                        term="enlightenment"
                        label="Enlightenment" />
            
            <content type="html">
                
                &lt;p&gt;.. figure:: http://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Jean-Jacques_Rousseau_%28painted_portrait%29.jpg/220px-Jean-Jacques_Rousseau_%28painted_portrait%29.jpg
   :figclass: align-right&amp;nbsp;med-img&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Vanilla Android Music Player</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2012-Aug-11-vanilla-android-music-player.html"/>
            <updated>2012-08-11T14:49:10Z</updated>
            <published>2012-08-11T14:49:10Z</published>
            <id>/blog/2012-Aug-11-vanilla-android-music-player.html</id>
                        <category   scheme="/blog/tags"
                        term="android"
                        label="Android" />
                        <category   scheme="/blog/tags"
                        term="vanilla"
                        label="Vanilla" />
                        <category   scheme="/blog/tags"
                        term="app"
                        label="App" />
                        <category   scheme="/blog/tags"
                        term="open-source"
                        label="Open-Source" />
            
            <content type="html">
                &lt;p&gt;.. image:: http://jaredforsyth.com/media/uploads/screenshots/vanilla/nowplaying_h.png
   :width:&amp;nbsp;40%&lt;/p&gt;
                &lt;p&gt;So I just got myself an &lt;span class=&#34;caps&#34;&gt;LG&lt;/span&gt;-G2x android smartphone [running eaglesblood &lt;span class=&#34;caps&#34;&gt;ICS&lt;/span&gt; :)] and I&amp;#8217;ve been trying a lot of things out. One thing that I really wanted to get right was a music player app. I looked around at the many reviews of the (mostly adware or freemium) popular music apps, thinking to myself &amp;#8220;there&amp;#8217;s gotta be a really good, free, even open-source music player. somewhere&amp;#8221;. well, I stumbled across &amp;#8220;vanilla&amp;#8221; early on, but was scared away by the somewhat primitive and downright clucky looking graphics [see the screenshots on &lt;code&gt;google play &amp;lt;https://play.google.com/store/apps/details?id=org.kreed.vanilla&amp;gt;&lt;/code&gt;&lt;em&gt; or &lt;code&gt;AndroidOpenSourceApplications &amp;lt;http://www.androidopensourceapplications.com/content/vanilla-music-player&amp;gt;&lt;/code&gt;&lt;/em&gt; ]. But, after more searching and finding nothing promising, I decided to give it a&amp;nbsp;spin.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">A Happy Post</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/happy-post.html"/>
            <updated>2011-02-01T10:00:00Z</updated>
            <published>2011-02-01T10:00:00Z</published>
            <id>/blog/happy-post.html</id>
                        <category   scheme="/blog/tags"
                        term="happy"
                        label="Happy" />
                        <category   scheme="/blog/tags"
                        term="thoughts"
                        label="Thoughts" />
            
            <content type="html">
                &lt;p&gt;&lt;img alt=&#34;Airport&#34; src=&#34;/media/images/airport.png&#34; /&gt;&lt;/p&gt;
                &lt;p&gt;Lady Malvern was a hearty, happy, healthy, overpowering sort of dashed female,
not so very tall but making up for it by measuring about six feet from the
&lt;span class=&#34;caps&#34;&gt;O.P.&lt;/span&gt; to the Prompt&amp;nbsp;Side.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">An Angry Post</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/angry-post.html"/>
            <updated>2011-01-01T10:00:00Z</updated>
            <published>2011-01-01T10:00:00Z</published>
            <id>/blog/angry-post.html</id>
                        <category   scheme="/blog/tags"
                        term="angry"
                        label="Angry" />
                        <category   scheme="/blog/tags"
                        term="thoughts"
                        label="Thoughts" />
            
            <content type="html">
                &lt;p&gt;&lt;img alt=&#34;Airport&#34; src=&#34;/media/images/airport.png&#34; /&gt;&lt;/p&gt;
                &lt;p&gt;To complete the character-study of Mr. Worple, he was a man of extremely
uncertain temper, and his general tendency was to think that Corky was a poor
chump and that whatever step he took in any direction on his own account, was
just another proof of his innate idiocy. I should imagine Jeeves feels very
much the same about&amp;nbsp;me.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">A Sad Post</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/sad-post.html"/>
            <updated>2010-12-01T10:00:00Z</updated>
            <published>2010-12-01T10:00:00Z</published>
            <id>/blog/sad-post.html</id>
                        <category   scheme="/blog/tags"
                        term="sad"
                        label="Sad" />
                        <category   scheme="/blog/tags"
                        term="thoughts"
                        label="Thoughts" />
            
            <content type="html">
                &lt;p&gt;&lt;img alt=&#34;A Dark Image&#34; src=&#34;/media/images/dark.png&#34; /&gt;&lt;/p&gt;
                &lt;p&gt;I went and dressed sadly. It will show you pretty well how pipped I was when I
tell you that I near as a toucher put on a white tie with a dinner-jacket. I
sallied out for a bit of food more to pass the time than because I wanted it.
It seemed brutal to be wading into the bill of fare with poor old Bicky headed
for the&amp;nbsp;breadline.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">CodeTalker by example: test!</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-29-codetalker-example-test.html"/>
            <updated>2010-07-29T14:08:10Z</updated>
            <published>2010-07-29T14:08:10Z</published>
            <id>/blog/2010-Jul-29-codetalker-example-test.html</id>
            
            <content type="html">
                
                &lt;p&gt;This is the last in a four-part series, in which I demonstrate how to build a
&lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; parser using&amp;nbsp;CodeTalker_:&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">CodeTalker by example: translate</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-29-codetalker-example-translate.html"/>
            <updated>2010-07-29T11:54:10Z</updated>
            <published>2010-07-29T11:54:10Z</published>
            <id>/blog/2010-Jul-29-codetalker-example-translate.html</id>
            
            <content type="html">
                
                &lt;p&gt;This is the third in a four-part series, in which I demonstrate how to build a
&lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; parser using&amp;nbsp;CodeTalker_:&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">CodeTalker by example: parse</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-28-codetalker-example-parse.html"/>
            <updated>2010-07-28T09:41:59Z</updated>
            <published>2010-07-28T09:41:59Z</published>
            <id>/blog/2010-Jul-28-codetalker-example-parse.html</id>
            
            <content type="html">
                
                &lt;p&gt;This is the second in a four-part series, in which I demonstrate how to build a
&lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; parser using&amp;nbsp;CodeTalker_:&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">CodeTalker by example: tokenize</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-27-codetalker-example-tokenize.html"/>
            <updated>2010-07-27T16:33:48Z</updated>
            <published>2010-07-27T16:33:48Z</published>
            <id>/blog/2010-Jul-27-codetalker-example-tokenize.html</id>
            
            <content type="html">
                
                &lt;p&gt;This is the first in a four-part series, in which I demonstrate how to build a
&lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; parser using&amp;nbsp;CodeTalker_:&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Orphan Alert</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-27-orphan-alert.html"/>
            <updated>2010-07-27T15:36:59Z</updated>
            <published>2010-07-27T15:36:59Z</published>
            <id>/blog/2010-Jul-27-orphan-alert.html</id>
            
            <content type="html">
                
                &lt;p&gt;In last couple of weeks a few of my projects (most notably &lt;code&gt;vim-debug&lt;/code&gt;&lt;em&gt; and CodeTalker&lt;/em&gt;) have really begun to take off and generate some public&amp;nbsp;interest.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">The Only CodeTalker Introduction You&#39;ll Ever Need</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-26-only-codetalker-introduction-youll-ever-need.html"/>
            <updated>2010-07-26T17:35:38Z</updated>
            <published>2010-07-26T17:35:38Z</published>
            <id>/blog/2010-Jul-26-only-codetalker-introduction-youll-ever-need.html</id>
            
            <content type="html">
                
                &lt;p&gt;Or at least that&amp;#8217;s the idea. I tried to design CodeTalker such that you don&amp;#8217;t
need to pore over pages of &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt; docs&amp;#8230; This document + the example contrib parsers
provided should be enough (let me know if they&amp;nbsp;aren&amp;#8217;t).&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Lessons learned; optimizing CodeTalker</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-26-lessons-learned-optimizing-codetalker.html"/>
            <updated>2010-07-26T12:00:00Z</updated>
            <published>2010-07-26T12:00:00Z</published>
            <id>/blog/2010-Jul-26-lessons-learned-optimizing-codetalker.html</id>
            
            <content type="html">
                
                &lt;p&gt;As &lt;code&gt;per request
&amp;lt;http://jaredforsyth.com/blog/2010/jul/21/codetalker-doubles-in-speed/#comment-63681945&amp;gt;&lt;/code&gt;&lt;em&gt;,
I&amp;#8217;ve decided to write down what I&amp;#8217;ve learned from my &lt;code&gt;optimization adventures
&amp;lt;http://jaredforsyth.com/blog/2010/jul/21/codetalker-doubles-in-speed/&amp;gt;&lt;/code&gt;&lt;/em&gt;
with &lt;code&gt;CodeTalker &amp;lt;http://jaredforsyth.com/projects/codetalker/&amp;gt;&lt;/code&gt;_.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">It&#39;s time for a better diff</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-22-its-time-better-diff.html"/>
            <updated>2010-07-22T10:23:24Z</updated>
            <published>2010-07-22T10:23:24Z</published>
            <id>/blog/2010-Jul-22-its-time-better-diff.html</id>
            
            <content type="html">
                
                &lt;p&gt;&lt;code&gt;diff&lt;/code&gt; is one of those programs that&amp;#8217;s just been around &lt;em&gt;forever&lt;/em&gt;, and that hasn&amp;#8217;t changed much b/c it&amp;#8217;s the best it can possibly be.&amp;nbsp;&amp;#8230;right?&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">setup.py test with distutils (+py.test)</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-21-setuppy-test-distutils-pytest.html"/>
            <updated>2010-07-21T12:14:34Z</updated>
            <published>2010-07-21T12:14:34Z</published>
            <id>/blog/2010-Jul-21-setuppy-test-distutils-pytest.html</id>
            
            <content type="html">
                
                &lt;p&gt;One thing that has bothered me about distutils is its lack of a &amp;#8220;test&amp;#8221; command &amp;#8212; it seems strange to me that setuptools has it but distutils does&amp;nbsp;not&amp;#8230;&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">CPython vs PyPy vs Cython </title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-21-cpython-vs-pypy-vs-cython.html"/>
            <updated>2010-07-21T10:23:29Z</updated>
            <published>2010-07-21T10:23:29Z</published>
            <id>/blog/2010-Jul-21-cpython-vs-pypy-vs-cython.html</id>
            
            <content type="html">
                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/images/cy_py_py.png&lt;/p&gt;
                &lt;p&gt;One problem that I needed to solve while making &lt;code&gt;CodeTalker &amp;lt;http://jaredforsyth.com/projects/codetalker/&amp;gt;&lt;/code&gt;_ was fast tokenization &amp;#8212; so I benchmarked several implementations of matching the &lt;span class=&#34;caps&#34;&gt;WHITE&lt;/span&gt; and &lt;span class=&#34;caps&#34;&gt;ID&lt;/span&gt;&amp;nbsp;tokens.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">CodeTalker doubles in speed</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-21-codetalker-doubles-in-speed.html"/>
            <updated>2010-07-21T07:33:30Z</updated>
            <published>2010-07-21T07:33:30Z</published>
            <id>/blog/2010-Jul-21-codetalker-doubles-in-speed.html</id>
            
            <content type="html">
                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/projects/logo_codetalker.png&lt;/p&gt;
                &lt;p&gt;Just when you though codetalker &lt;code&gt;couldn&#39;t get &amp;lt;http://jaredforsyth.com/blog/2010/jul/17/python-css-parsing-benchmarks/&amp;gt;&lt;/code&gt;&lt;em&gt; &lt;code&gt;any faster &amp;lt;http://jaredforsyth.com/blog/2010/jul/17/comparing-parser-generators-python/&amp;gt;&lt;/code&gt;&lt;/em&gt;, I managed to &lt;em&gt;double its speed&lt;/em&gt;.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Python css parsing benchmarks</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-17-python-css-parsing-benchmarks.html"/>
            <updated>2010-07-17T20:24:54Z</updated>
            <published>2010-07-17T20:24:54Z</published>
            <id>/blog/2010-Jul-17-python-css-parsing-benchmarks.html</id>
            
            <content type="html">
                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/battle.png&lt;/p&gt;
                &lt;p&gt;And I put together another graph, profiling the different libraries for parsing &lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; with&amp;nbsp;python.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Announcing: python-css</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-17-announcing-python-css.html"/>
            <updated>2010-07-17T18:37:15Z</updated>
            <published>2010-07-17T18:37:15Z</published>
            <id>/blog/2010-Jul-17-announcing-python-css.html</id>
            
            <content type="html">
                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/projects/logo___.png&lt;/p&gt;
                &lt;p&gt;In the course of &lt;code&gt;rewriting CleverCSS &amp;lt;http://github.com/jabapyth/clevercss2&amp;gt;&lt;/code&gt;&lt;em&gt;, I wanted to write a &lt;code&gt;backwards converter &amp;lt;http://github.com/jabapyth/clevercss2/blob/master/clevercss/backwards.py&amp;gt;&lt;/code&gt;&lt;/em&gt; from css to ccss. I thought it would make the tool &lt;em&gt;much&lt;/em&gt; easier to&amp;nbsp;adopt.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Comparing parser generators in Python</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-17-comparing-parser-generators-python.html"/>
            <updated>2010-07-17T08:42:45Z</updated>
            <published>2010-07-17T08:42:45Z</published>
            <id>/blog/2010-Jul-17-comparing-parser-generators-python.html</id>
            
            <content type="html">
                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/battle.png&lt;/p&gt;
                &lt;p&gt;One of the &lt;code&gt;comments on reddit &amp;lt;http://www.reddit.com/r/Python/comments/cne57/announcing_codetalker/&amp;gt;&lt;/code&gt;&lt;em&gt; when I &lt;code&gt;announced codetalker &amp;lt;http://jaredforsyth.com/blog/2010/jul/8/announcing-codetalker/&amp;gt;&lt;/code&gt;&lt;/em&gt; was &amp;#8220;what&amp;#8217;s wrong with&amp;nbsp;pyparsing?&amp;#8221;&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Easy python dependency graphs</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-16-easy-python-dependency-graphs.html"/>
            <updated>2010-07-16T13:41:53Z</updated>
            <published>2010-07-16T13:41:53Z</published>
            <id>/blog/2010-Jul-16-easy-python-dependency-graphs.html</id>
            
            <content type="html">
                &lt;p&gt;.. image::&amp;nbsp;http://upload.wikimedia.org/wikipedia/commons/thumb/a/a2/Directed.svg/200px-Directed.svg.png&lt;/p&gt;
                &lt;p&gt;I was looking around for ways to get a look at a python dependency graph, and found &lt;code&gt;this site &amp;lt;http://www.tarind.com/depgraph.html&amp;gt;&lt;/code&gt;_ which actually does a pretty good job. The only gripe I have regards the command you must&amp;nbsp;use:&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Installing Vim Debug</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-16-installing-vim-debug.html"/>
            <updated>2010-07-16T13:13:07Z</updated>
            <published>2010-07-16T13:13:07Z</published>
            <id>/blog/2010-Jul-16-installing-vim-debug.html</id>
            
            <content type="html">
                
                &lt;p&gt;I&amp;#8217;ve had a few people ask me for installations for &lt;code&gt;vim-debug &amp;lt;http://jaredforsyth.com/projects/vim-debug/&amp;gt;&lt;/code&gt;_, which I guess is natural&amp;#8230;I&amp;#8217;m just not used to the whole &amp;#8220;package maintainer&amp;#8221; persona yet. Anyway, here it&amp;nbsp;is.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Vim Debug 1.5: Agyrtidae</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-14-vim-debug-15-agyrtidae.html"/>
            <updated>2010-07-14T08:59:12Z</updated>
            <published>2010-07-14T08:59:12Z</published>
            <id>/blog/2010-Jul-14-vim-debug-15-agyrtidae.html</id>
            
            <content type="html">
                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/images/agyrtidae.png&lt;/p&gt;
                &lt;p&gt;&lt;code&gt;Agyrtidae&lt;/code&gt; is the name of a &lt;code&gt;family of Beetles &amp;lt;http://www.zin.ru/animalia/Coleoptera/eng/agyrt_fm.htm&amp;gt;&lt;/code&gt;&lt;em&gt; (found in Russia), and the codename for the &lt;code&gt;1.5 release &amp;lt;http://github.com/jabapyth/vim-debug/tree/1.5&amp;gt;&lt;/code&gt;&lt;/em&gt; of &lt;code&gt;Vim Debug &amp;lt;http://github.com/jabapyth/vim-debug&amp;gt;&lt;/code&gt;_.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Why it would be hard for me to give up git for mercurial</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-13-why-it-would-be-hard-me-give-git-mercurial.html"/>
            <updated>2010-07-13T21:50:54Z</updated>
            <published>2010-07-13T21:50:54Z</published>
            <id>/blog/2010-Jul-13-why-it-would-be-hard-me-give-git-mercurial.html</id>
            
            <content type="html">
                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/images/git-hgm.png&lt;/p&gt;
                &lt;p&gt;I discovered &lt;code&gt;git&lt;/code&gt; fairly recently, actually (near the end of last year), but already it has become an integral player in my arsenal of powertools. That said, I have also become intrigued by &lt;code&gt;mercurial&lt;/code&gt; over the past month or so, but not quite enough to&amp;nbsp;switch.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Integrated python debugging in VIM</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-12-integrated-python-debugging-vim.html"/>
            <updated>2010-07-12T17:19:19Z</updated>
            <published>2010-07-12T17:19:19Z</published>
            <id>/blog/2010-Jul-12-integrated-python-debugging-vim.html</id>
            
            <content type="html">
                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/projects/logo__.png&lt;/p&gt;
                &lt;p&gt;A few days ago, I posted that I was taking over &lt;code&gt;a project &amp;lt;http://jaredforsyth.com/projects/vim-debug/&amp;gt;&lt;/code&gt;_ which provides a debugging environment in &lt;span class=&#34;caps&#34;&gt;VIM&lt;/span&gt;, specifically geared toward &lt;span class=&#34;caps&#34;&gt;PHP&lt;/span&gt;. Soon after a guy w/ the handle Epeli asked (perhaps not very grammatically), &amp;#8220;I can we debug Python like this with&amp;nbsp;Vim?&amp;#8221;&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Python Registrar</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-10-python-registrar.html"/>
            <updated>2010-07-10T15:49:25Z</updated>
            <published>2010-07-10T15:49:25Z</published>
            <id>/blog/2010-Jul-10-python-registrar.html</id>
            
            <content type="html">
                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/projects/logo_.png&lt;/p&gt;
                &lt;p&gt;Here&amp;#8217;s a small library I&amp;#8217;ve been playing around with: registrar. I often find myself writing meta&amp;nbsp;decorators:&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Tabbify your vim</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-09-tabbify-your-vim.html"/>
            <updated>2010-07-09T20:00:00Z</updated>
            <published>2010-07-09T20:00:00Z</published>
            <id>/blog/2010-Jul-09-tabbify-your-vim.html</id>
            
            <content type="html">
                
                &lt;p&gt;I&amp;#8217;ve just [re]discovered Vim&amp;#8217;s tabs. Which are awesome. What isn&amp;#8217;t so awesome is the movement between tabs&amp;#8230; &lt;code&gt;:tabnew&lt;/code&gt; &lt;code&gt;:tabn&lt;/code&gt; &lt;code&gt;:tabp&lt;/code&gt;. Of course, the beauty of vim is customization &amp;#8212; it&amp;#8217;s trivial to make your own&amp;nbsp;keybindings.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Announcing: vim-phpdebug</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-09-announcing-vim-phpdebug.html"/>
            <updated>2010-07-09T09:49:05Z</updated>
            <published>2010-07-09T09:49:05Z</published>
            <id>/blog/2010-Jul-09-announcing-vim-phpdebug.html</id>
            
            <content type="html">
                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/projects/logo.png&lt;/p&gt;
                &lt;p&gt;I&amp;#8217;ve just taken over maintenance of a &lt;code&gt;really sweet plugin &amp;lt;http://jaredforsyth.com/projects/vim-phpdebug/&amp;gt;&lt;/code&gt;&lt;em&gt; for integrated &lt;span class=&#34;caps&#34;&gt;PHP&lt;/span&gt; debugging in &lt;span class=&#34;caps&#34;&gt;VIM&lt;/span&gt; (written in python!). It&amp;#8217;s &lt;code&gt;been dead for 3 years &amp;lt;http://www.vim.org/scripts/script.php?script_id=1929&amp;gt;&lt;/code&gt;&lt;/em&gt;, so I figure the air is&amp;nbsp;clear&amp;#8230;&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">JSON parsing in python</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-08-json-parsing-python.html"/>
            <updated>2010-07-08T12:00:00Z</updated>
            <published>2010-07-08T12:00:00Z</published>
            <id>/blog/2010-Jul-08-json-parsing-python.html</id>
            
            <content type="html">
                
                &lt;p&gt;I&amp;#8217;ve done some benchmarks on &lt;span class=&#34;caps&#34;&gt;JSON&lt;/span&gt; parsing, and I thought I&amp;#8217;d share the&amp;nbsp;results.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Announcing: Codetalker</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jul-08-announcing-codetalker.html"/>
            <updated>2010-07-08T01:38:08Z</updated>
            <published>2010-07-08T01:38:08Z</published>
            <id>/blog/2010-Jul-08-announcing-codetalker.html</id>
            
            <content type="html">
                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/projects/navajo.gif&lt;/p&gt;
                &lt;h1&gt;Introduction&lt;/h1&gt;            </content>
        </entry>
            <entry>
            <title type="html">String concatenation kills babies</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jun-26-string-concatenation-kills-babies.html"/>
            <updated>2010-06-26T18:16:03Z</updated>
            <published>2010-06-26T18:16:03Z</published>
            <id>/blog/2010-Jun-26-string-concatenation-kills-babies.html</id>
            
            <content type="html">
                
                &lt;p&gt;Or at least your performance. I know I&amp;#8217;ve heard a couple of times about the inefficiencies of CPython&amp;#8217;s string concatenation, but now I have real-world&amp;nbsp;experience&amp;#8230;&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Exceptions for failure reporting [performance]</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jun-22-exceptions-for-failure-reporting.html"/>
            <updated>2010-06-22T11:13:57Z</updated>
            <published>2010-06-22T11:13:57Z</published>
            <id>/blog/2010-Jun-22-exceptions-for-failure-reporting.html</id>
            
            <content type="html">
                
                &lt;p&gt;I was wondering how much (if any) of a hit performance would take were I to make excessive use of exceptions, not merely for error reporting, but also for reporting failure (in place of, say, returning None to indicate&amp;nbsp;failure).&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">CleverCSS reloaded</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jun-17-clevercss-reloaded.html"/>
            <updated>2010-06-17T07:32:47Z</updated>
            <published>2010-06-17T07:32:47Z</published>
            <id>/blog/2010-Jun-17-clevercss-reloaded.html</id>
            
            <content type="html">
                &lt;p&gt;.. image::&amp;nbsp;/media/uploads/ccss.png&lt;/p&gt;
                &lt;p&gt;I&amp;#8217;ve been meaning to jump into the wonderful world of &lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; meta-languages, but I was turned off by their propensity to be &lt;code&gt;in &amp;lt;http://sass-lang.com/&amp;gt;&lt;/code&gt;&lt;em&gt; &lt;code&gt;ruby &amp;lt;http://lesscss.org/&amp;gt;&lt;/code&gt;&lt;/em&gt; (into which I don&amp;#8217;t particularly want to jump); then I found &lt;code&gt;CleverCSS &amp;lt;http://sandbox.pocoo.org/clevercss/&amp;gt;&lt;/code&gt;_.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">What does setuptools &#34;test&#34; do?</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jun-16-what-does-setuptools-test-do.html"/>
            <updated>2010-06-16T18:28:44Z</updated>
            <published>2010-06-16T18:28:44Z</published>
            <id>/blog/2010-Jun-16-what-does-setuptools-test-do.html</id>
            
            <content type="html">
                
                &lt;p&gt;I remember reading a post on planet python about package testing, and that many people use &amp;#8220;setup.py test&amp;#8221;. The thing is, I can&amp;#8217;t seem to find anywhere that documents just what &amp;#8220;setup.py test&amp;#8221; does &amp;#8212; it&amp;#8217;s some setuptools&amp;nbsp;magic.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Announcing: Django-RESTive</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Jun-02-announcing-django-restive.html"/>
            <updated>2010-06-02T09:29:59Z</updated>
            <published>2010-06-02T09:29:59Z</published>
            <id>/blog/2010-Jun-02-announcing-django-restive.html</id>
            
            <content type="html">
                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/projects/djanfo-restive.png&lt;/p&gt;
                &lt;p&gt;&lt;strong&gt;res·tive&lt;/strong&gt;: &lt;em&gt;marked by impatience or&amp;nbsp;uneasiness&lt;/em&gt;&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Pyjamas and PJS in depth</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-31-pyjamas-and-pjs-depth.html"/>
            <updated>2010-05-31T18:13:10Z</updated>
            <published>2010-05-31T18:13:10Z</published>
            <id>/blog/2010-May-31-pyjamas-and-pjs-depth.html</id>
            
            <content type="html">
                
                &lt;p&gt;So there hasn&amp;#8217;t been too much going on here for about the past month&amp;nbsp;:)&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Easy zsh auto completion</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-30-easy-zsh-auto-completion.html"/>
            <updated>2010-05-30T00:39:05Z</updated>
            <published>2010-05-30T00:39:05Z</published>
            <id>/blog/2010-May-30-easy-zsh-auto-completion.html</id>
            
            <content type="html">
                &lt;p&gt;.. image::&amp;nbsp;http://jaredforsyth.com/media/uploads/zsh-completion.png&lt;/p&gt;
                &lt;p&gt;It took a surprising amount of looking to figure out how to create a custom zsh completion rule&amp;#8230;so I&amp;#8217;ll share my&amp;nbsp;findings.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">My latest IE annoyance</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-26-my-latest-ie-annoyance.html"/>
            <updated>2010-05-26T13:40:24Z</updated>
            <published>2010-05-26T13:40:24Z</published>
            <id>/blog/2010-May-26-my-latest-ie-annoyance.html</id>
            
            <content type="html">
                
                &lt;p&gt;Wow. I really hate Internet Explorer. There are so many &lt;em&gt;bugs&lt;/em&gt;! It&amp;#8217;s a nightmare to program for, even&amp;nbsp;now!&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Just wasted an hour; thanks, Rhino</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-26-just-wasted-hour-thanks-rhino.html"/>
            <updated>2010-05-26T10:19:35Z</updated>
            <published>2010-05-26T10:19:35Z</published>
            <id>/blog/2010-May-26-just-wasted-hour-thanks-rhino.html</id>
            
            <content type="html">
                
                &lt;p&gt;Was running the tests for PJs, when I suddenly got hit w/ a total meltdown on the Rhino end &amp;#8212; Java exceptions and&amp;nbsp;all. &lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Python Deepsort</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-25-python-deepsort.html"/>
            <updated>2010-05-25T07:38:08Z</updated>
            <published>2010-05-25T07:38:08Z</published>
            <id>/blog/2010-May-25-python-deepsort.html</id>
            
            <content type="html">
                
                &lt;p&gt;There are times when you want a sequence of items sorted, but regular
&lt;code&gt;sort()&lt;/code&gt; doesn&amp;#8217;t cut it; in normal sorting algorithms, it is assumed that if
&lt;code&gt;cmp(a, b) == 0&lt;/code&gt; and &lt;code&gt;cmp(b, c) == 0&lt;/code&gt;, then &lt;code&gt;cmp(a, c) == 0&lt;/code&gt;. I ran into
a problem here when trying to sort classes by inheritance; sort order is not
necessarily&amp;nbsp;commutative.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Python operator magic</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-21-python-operator-magic.html"/>
            <updated>2010-05-21T07:20:45Z</updated>
            <published>2010-05-21T07:20:45Z</published>
            <id>/blog/2010-May-21-python-operator-magic.html</id>
            
            <content type="html">
                
                &lt;p&gt;Take a look at the following boolean&amp;nbsp;expression:&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Javascript type madness</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-20-javascript-type-maddness.html"/>
            <updated>2010-05-20T22:20:09Z</updated>
            <published>2010-05-20T22:20:09Z</published>
            <id>/blog/2010-May-20-javascript-type-maddness.html</id>
            
            <content type="html">
                
                &lt;p&gt;It truly amazes me the extent to which the javascript interpreter &lt;em&gt;inhibits&lt;/em&gt;
productivity. It seems extraordinary that the language could have gotten this
far while still &lt;em&gt;by design&lt;/em&gt; causing no end of headaches for&amp;nbsp;developers.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Manually enable clean urls in drupal</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-14-manually-enable-clean-urls-drupal.html"/>
            <updated>2010-05-14T13:37:17Z</updated>
            <published>2010-05-14T13:37:17Z</published>
            <id>/blog/2010-May-14-manually-enable-clean-urls-drupal.html</id>
            
            <content type="html">
                
                &lt;p&gt;For various reasons I wasn&amp;#8217;t able to use the regular interface for checking for clean urls, and at the time I installed drupal I hadn&amp;#8217;t configured apache correctly, so drupal thought (rightly) that clean urls were not&amp;nbsp;supported.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Birthday release: PJs 0.19</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-06-birthday-release-pjs-019.html"/>
            <updated>2010-05-06T11:30:31Z</updated>
            <published>2010-05-06T11:30:31Z</published>
            <id>/blog/2010-May-06-birthday-release-pjs-019.html</id>
            
            <content type="html">
                &lt;p&gt;.. image:: http://jaredforsyth.com/media/projects/pjs_logo125x125.png
   :align: left
   :class:&amp;nbsp;first&lt;/p&gt;
                &lt;p&gt;So today&amp;#8217;s my birthday, and I thought I&amp;#8217;d celebrate by releasing the first
version of PJs_&amp;#8230;actually, it&amp;#8217;s pretty much a coincidence, but i just got PJs
into a state that I&amp;#8217;m comfortable letting other people hack away at it, and
it&amp;#8217;s my birthday. Why 0.19? Because today, in 1991, I was born. So I am now
19. I think the number-play is&amp;nbsp;interesting.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Disqus comments in Django</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-04-disqus-comments-django.html"/>
            <updated>2010-05-04T21:41:29Z</updated>
            <published>2010-05-04T21:41:29Z</published>
            <id>/blog/2010-May-04-disqus-comments-django.html</id>
            
            <content type="html">
                &lt;p&gt;.. image:: http://www.clickonf5.org/wp-content/uploads/2009/08/disqus.jpg
   :class: first
   :width:&amp;nbsp;190px&lt;/p&gt;
                &lt;p&gt;Recently I finally got around to adding comments to this blog; &lt;code&gt;disqus
&amp;lt;http://disqus.com&amp;gt;&lt;/code&gt;_ made it so easy that I didn&amp;#8217;t really have an excuse to
keep putting it off&amp;nbsp;;)&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Announcing: PJs</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-May-04-announcing-pjs.html"/>
            <updated>2010-05-04T20:38:37Z</updated>
            <published>2010-05-04T20:38:37Z</published>
            <id>/blog/2010-May-04-announcing-pjs.html</id>
            
            <content type="html">
                
                &lt;p&gt;My new project: &lt;code&gt;PJs &amp;lt;http://jaredforsyth.com/projects/pjs/&amp;gt;&lt;/code&gt;_&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Embed youtube videos in RestructuredText</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Apr-30-embed-youtube-videos-restructuredtext.html"/>
            <updated>2010-04-30T06:30:26Z</updated>
            <published>2010-04-30T06:30:26Z</published>
            <id>/blog/2010-Apr-30-embed-youtube-videos-restructuredtext.html</id>
            
            <content type="html">
                
                &lt;p&gt;I write this blog almost exclusively in &lt;code&gt;RestructuredText &amp;lt;http://docutils.sourceforge.net/docs/user/rst/quickstart.html&amp;gt;&lt;/code&gt;&lt;em&gt; and I recently wanted to embed a youtube video on the &lt;code&gt;Baby Tux project page &amp;lt;http://jaredforsyth.com/projects/baby-tux/&amp;gt;&lt;/code&gt;&lt;/em&gt;. Fortunately someone&amp;#8217;s already done the work of making a directive, so you can just save the code &lt;code&gt;here &amp;lt;http://countergram.com/articles/youtube-in-rst/&amp;gt;&lt;/code&gt;_ to &lt;code&gt;youtube_rst.py&lt;/code&gt; and&amp;nbsp;put&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Django to UML</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Apr-29-django-uml.html"/>
            <updated>2010-04-29T16:49:12Z</updated>
            <published>2010-04-29T16:49:12Z</published>
            <id>/blog/2010-Apr-29-django-uml.html</id>
            
            <content type="html">
                
                &lt;p&gt;I was looking around for a django models to &lt;span class=&#34;caps&#34;&gt;UML&lt;/span&gt; converter and took a bit of doing, but I found one nestled in the app &lt;code&gt;django-extensions &amp;lt;http://code.google.com/p/django-command-extensions/&amp;gt;&lt;/code&gt;_. As it took a while, I thought I&amp;#8217;d spare the next guy a&amp;nbsp;search.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">AccessInit: hash collision: 3 for both 1 and 1</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Apr-28-accessinit-hash-collision-3-both-1-and-1.html"/>
            <updated>2010-04-28T11:43:54Z</updated>
            <published>2010-04-28T11:43:54Z</published>
            <id>/blog/2010-Apr-28-accessinit-hash-collision-3-both-1-and-1.html</id>
            
            <content type="html">
                
                &lt;p&gt;I recently ran into a problem, which didn&amp;#8217;t immediately make itself clear (this is one of the troubles that django causes me &amp;#8212; too often the error reporting is just &lt;em&gt;not there&lt;/em&gt;, and forces me to do a good deal of debugging to even determine where the error is&amp;nbsp;occurring).&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Vim tip of the day: copy current file name</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Apr-17-vim-tip-day-copy-current-file-name.html"/>
            <updated>2010-04-17T13:05:07Z</updated>
            <published>2010-04-17T13:05:07Z</published>
            <id>/blog/2010-Apr-17-vim-tip-day-copy-current-file-name.html</id>
            
            <content type="html">
                
                &lt;p&gt;If you want to copy/paste the current filename, the magic register &amp;#8220;%&amp;#8221; is just what you&amp;nbsp;need.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Vim crash recovery</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Apr-09-vim-crash-recovery.html"/>
            <updated>2010-04-09T12:02:01Z</updated>
            <published>2010-04-09T12:02:01Z</published>
            <id>/blog/2010-Apr-09-vim-crash-recovery.html</id>
            
            <content type="html">
                
                &lt;p&gt;Currently the host I use (bluehost) likes to &lt;span class=&#34;caps&#34;&gt;SIGKILL&lt;/span&gt; my processes if they run too long (in an ssh session). This makes perfect sense from their point of view &amp;#8212; it&amp;#8217;s a shared hosting situation, so they don&amp;#8217;t want processes hogging resources &amp;#8212; but it can get pretty annoying, especially as I usually have several buffers open in split&amp;nbsp;windows.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Todo Post and Project</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Apr-08-todo.html"/>
            <updated>2010-04-08T16:19:06Z</updated>
            <published>2010-04-08T16:19:06Z</published>
            <id>/blog/2010-Apr-08-todo.html</id>
            
            <content type="html">
                
                &lt;h2&gt;Blog&amp;nbsp;posts&lt;/h2&gt;            </content>
        </entry>
            <entry>
            <title type="html">Giving Django admin a favicon</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Apr-06-giving-django-admin-favicon.html"/>
            <updated>2010-04-06T19:24:25Z</updated>
            <published>2010-04-06T19:24:25Z</published>
            <id>/blog/2010-Apr-06-giving-django-admin-favicon.html</id>
            
            <content type="html">
                
                &lt;p&gt;I&amp;#8217;m a power-user in the browser, and I usually have a large amount of tabs open; often it is the case that I can only see the favicon (I use chromium, which shrinks the tabs indefinitely). As such, I make use of favicons to distinguish sites, and this works well for me as most sites have jumped on the favicon&amp;nbsp;bus.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">One-liner to rule them all: django mingus install script</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Feb-27-one-liner-rule-them-all.html"/>
            <updated>2010-02-27T23:16:15Z</updated>
            <published>2010-02-27T23:16:15Z</published>
            <id>/blog/2010-Feb-27-one-liner-rule-them-all.html</id>
                        <category   scheme="/blog/tags"
                        term="mingus"
                        label="Mingus" />
                        <category   scheme="/blog/tags"
                        term="django"
                        label="Django" />
                        <category   scheme="/blog/tags"
                        term="install"
                        label="Install" />
                        <category   scheme="/blog/tags"
                        term="script"
                        label="Script" />
                        <category   scheme="/blog/tags"
                        term="dependencies"
                        label="Dependencies" />
            
            <content type="html">
                
                &lt;p&gt;Ok, so it&amp;#8217;s technically more than one line &amp;#8212; but all the logic/execution is on one line&amp;nbsp;=)&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Django apps&#39; documentation problem</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Feb-26-django-apps-documentation-problem.html"/>
            <updated>2010-02-26T02:07:35Z</updated>
            <published>2010-02-26T02:07:35Z</published>
            <id>/blog/2010-Feb-26-django-apps-documentation-problem.html</id>
                        <category   scheme="/blog/tags"
                        term="django"
                        label="Django" />
                        <category   scheme="/blog/tags"
                        term="docs"
                        label="Docs" />
                        <category   scheme="/blog/tags"
                        term="documentation"
                        label="Documentation" />
                        <category   scheme="/blog/tags"
                        term="admindocs"
                        label="Admindocs" />
            
            <content type="html">
                
                &lt;p&gt;So I just spent the last little while going back to the &lt;code&gt;dawn of time &amp;lt;http://code.djangoproject.com/changeset/392&amp;gt;&lt;/code&gt;_ and svn revision 392 of django core&amp;#8212; the current revision is nearly 13 &lt;strong&gt;thousand&lt;/strong&gt;) to find the answer to a surprisingly elusive question: why is there a&amp;nbsp;::&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Django application settings</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Feb-25-django-application-settings.html"/>
            <updated>2010-02-25T23:50:55Z</updated>
            <published>2010-02-25T23:50:55Z</published>
            <id>/blog/2010-Feb-25-django-application-settings.html</id>
                        <category   scheme="/blog/tags"
                        term="django"
                        label="Django" />
                        <category   scheme="/blog/tags"
                        term="dbsettings"
                        label="Dbsettings" />
                        <category   scheme="/blog/tags"
                        term="settings"
                        label="Settings" />
                        <category   scheme="/blog/tags"
                        term="application"
                        label="Application" />
            
            <content type="html">
                
                &lt;p&gt;One thing that (it looks like) is missing in the django tradition is a generally adopted method for making user-friendly application-specific settings. And this feature is extremely key if we want to appeal to a broader audience; your average person &lt;em&gt;does not&lt;/em&gt; want to have to edit a settings.py file in order to change [most] things. Yes, settings that would require a server restart should go there, but there are a vast number of settings which are &lt;span class=&#34;caps&#34;&gt;UI&lt;/span&gt;/display related, and should be dynamically&amp;nbsp;modifiable.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Flatpages crazy 404</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Feb-25-flatpages-crazy-404.html"/>
            <updated>2010-02-25T00:52:53Z</updated>
            <published>2010-02-25T00:52:53Z</published>
            <id>/blog/2010-Feb-25-flatpages-crazy-404.html</id>
            
            <content type="html">
                
                &lt;p&gt;Wow, they&amp;#8217;re not kidding about &amp;#8220;Make sure to have leading and trailing slashes&amp;#8221;&amp;#8230;Don&amp;#8217;t know what I&amp;#8217;m talking&amp;nbsp;about?&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Setting up a blog in django</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Feb-25-setting-blog-django.html"/>
            <updated>2010-02-25T00:10:09Z</updated>
            <published>2010-02-25T00:10:09Z</published>
            <id>/blog/2010-Feb-25-setting-blog-django.html</id>
                        <category   scheme="/blog/tags"
                        term="django"
                        label="Django" />
                        <category   scheme="/blog/tags"
                        term="blog"
                        label="Blog" />
                        <category   scheme="/blog/tags"
                        term="drupal"
                        label="Drupal" />
                        <category   scheme="/blog/tags"
                        term="how-to"
                        label="How-To" />
            
            <content type="html">
                
                &lt;p&gt;Recently, I decided that my site needed an overhaul. Initially, I only
imagined a theme redesign, but as I examined my site, I realized that drupal
&lt;em&gt;really&lt;/em&gt; wasn&amp;#8217;t doing it for me. Yes, it&amp;#8217;s leaps and bounds ahead of what I&amp;#8217;d
done before. Yes, it&amp;#8217;s amazing, with incredible contributed themes and
modules. But&amp;#8230;it was just insufficient / wrong. For one thing, it&amp;#8217;s written
in &lt;span class=&#34;caps&#34;&gt;PHP&lt;/span&gt;, which &lt;em&gt;really&lt;/em&gt; grates on my consience; I&amp;#8217;ve done php development, and
it is imo just &lt;em&gt;so&lt;/em&gt; inferior as a language, to, well, many other languages.
Python in&amp;nbsp;particular.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Songbird Global Hotkeys for Ubuntu Linux</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Feb-20-songbird-global-hotkeys-ubuntu-linux.html"/>
            <updated>2010-02-20T21:00:35Z</updated>
            <published>2010-02-20T21:00:35Z</published>
            <id>/blog/2010-Feb-20-songbird-global-hotkeys-ubuntu-linux.html</id>
            
            <content type="html">
                
                &lt;p&gt;One thing that I have really missed in playing with songbird is Global Hotkeys for changing the song, etc. This functionality is available for &lt;code&gt;Windows &amp;lt;http://wiki.songbirdnest.com/Getting_Started_with_Songbird/03_Basic_Controls#Hotkeys_.26_Keyboard_Shortcuts&amp;gt;&lt;/code&gt;&lt;em&gt;, but Linux (and Mac) users still have to wait if we want official support. There is a workaround, though, thanks to GeekShadow&amp;#8217;s addon &lt;code&gt;Command Line Support &amp;lt;http://addons.songbirdnest.com/addons/1381&amp;gt;&lt;/code&gt;&lt;/em&gt;. This allows for all kinds of clever hackery, including global&amp;nbsp;Hotkeys.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">automagically install boost library on Ubuntu linux</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2010-Feb-12-automagically-install-boost-library-ubuntu-linux.html"/>
            <updated>2010-02-12T20:09:13Z</updated>
            <published>2010-02-12T20:09:13Z</published>
            <id>/blog/2010-Feb-12-automagically-install-boost-library-ubuntu-linux.html</id>
            
            <content type="html">
                
                &lt;p&gt;I wanted to install the &amp;#8220;boost&amp;#8221; library on ubuntu, but the problem is that the
library is segmented into several different packages. Now, I could have gone
through and installed each manually, or I could employ a little bash-fu to get
it done for me. Here&amp;#8217;s the command I&amp;nbsp;used:&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Event Bubbling example</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Dec-28-event-bubbling-example.html"/>
            <updated>2009-12-28T22:55:14Z</updated>
            <published>2009-12-28T22:55:14Z</published>
            <id>/blog/2009-Dec-28-event-bubbling-example.html</id>
            
            <content type="html">
                
                &lt;p&gt;Javascript events are handled in a very particular way&amp;#8230;
a way that isn&amp;#8217;t always immediately intuitive. For an excellent description of just how this all works, check out &lt;code&gt;this article &amp;lt;http://www.quirksmode.org/js/events_order.html&amp;gt;&lt;/code&gt;_ over on quirksmode.org. The purpose of this post is to give you a practical knowledge of how this actually works, as well as point out a few&amp;nbsp;quirks.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Skitch style screenshot text in the GIMP</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Dec-17-skitch-style-screenshot-text-gimp.html"/>
            <updated>2009-12-17T14:16:23Z</updated>
            <published>2009-12-17T14:16:23Z</published>
            <id>/blog/2009-Dec-17-skitch-style-screenshot-text-gimp.html</id>
            
            <content type="html">
                
                &lt;p&gt;I&amp;#8217;ve always liked the way that Skitch handles text &amp;#8212; it unobtrusively and stylishly stands out in your screenshot, allowing easy annotations. Unfortunately, Skitch isn&amp;#8217;t available for linux, so I&amp;#8217;m having to do with the next best thing &amp;#8212; Shutter, an open source linux screenshotting solution that&amp;#8217;s really slick, and mostly gets the job done. The only thing it&amp;#8217;s lacking is, again, the text &amp;#8212; it will give you text, but the regular kind that too easily gets lost in the background, especially if you&amp;#8217;re &amp;#8216;shooting something busy like a web&amp;nbsp;page.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Songbird won&#39;t start in Karmic - gstreamer error</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Nov-04-songbird-wont-start-karmic-gstreamer-error.html"/>
            <updated>2009-11-04T12:18:36Z</updated>
            <published>2009-11-04T12:18:36Z</published>
            <id>/blog/2009-Nov-04-songbird-wont-start-karmic-gstreamer-error.html</id>
            
            <content type="html">
                
                &lt;p&gt;(songbird-bin:2944): GStreamer-&lt;span class=&#34;caps&#34;&gt;WARNING&lt;/span&gt; **: Failed to load plugin &amp;#8216;/usr/lib/gstreamer-0.10/libgstrawparse.so&amp;#8217;: /usr/lib/gstreamer-0.10/libgstrawparse.so: undefined symbol:&amp;nbsp;gst_video_format_new_caps_interlaced&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">UNetbootin failed to unmount /cdrom</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Nov-01-unetbootin-failed-unmount-cdrom.html"/>
            <updated>2009-11-01T13:49:56Z</updated>
            <published>2009-11-01T13:49:56Z</published>
            <id>/blog/2009-Nov-01-unetbootin-failed-unmount-cdrom.html</id>
            
            <content type="html">
                &lt;p&gt;.. image::&amp;nbsp;/media/images/ubuntu-error.png&lt;/p&gt;
                &lt;p&gt;I used UNetBootin to install Karmic (Ubuntu 9.10) to my laptop, but I kept running into the error &amp;#8220;Failed to unmount&amp;nbsp;partitions&amp;#8221;&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">SVG Birds</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Oct-11-svg-birds.html"/>
            <updated>2009-10-11T19:51:50Z</updated>
            <published>2009-10-11T19:51:50Z</published>
            <id>/blog/2009-Oct-11-svg-birds.html</id>
            
            <content type="html">
                &lt;p&gt;.. image::&amp;nbsp;/media/images/birds2.png&lt;/p&gt;
                &lt;p&gt;I needed to create some svg birds for a game I&amp;#8217;m working on (i couldn&amp;#8217;t find any around) and I thought I&amp;#8217;d share them; feel free to use/abuse them in any way you want&amp;nbsp;;)&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Error installing xdebug: phpize not found</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Aug-15-error-installing-xdebug-phpize-not-found.html"/>
            <updated>2009-08-15T17:18:17Z</updated>
            <published>2009-08-15T17:18:17Z</published>
            <id>/blog/2009-Aug-15-error-installing-xdebug-phpize-not-found.html</id>
            
            <content type="html">
                
                &lt;p&gt;So I ran &amp;#8220;sudo pecl install xdebug&amp;#8221; like a good linux user, but was stymied when it threw the error &amp;#8220;phpize not found&amp;#8221;, especially when &amp;#8220;sudo apt-get install phpize&amp;#8221; yielded no friuts (darn it, that usually&amp;nbsp;works!)&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">[Drupal] Make user profile URLs readable</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-May-27-drupal-make-user-profile-urls-readable.html"/>
            <updated>2009-05-27T08:07:24Z</updated>
            <published>2009-05-27T08:07:24Z</published>
            <id>/blog/2009-May-27-drupal-make-user-profile-urls-readable.html</id>
            
            <content type="html">
                
                &lt;p&gt;Here&amp;#8217;s a tip for making you&amp;#8217;re community site that much more user&amp;nbsp;friendly:&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">All screenshots from drupal theme garden on one page</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-May-15-all-screenshots-drupal-theme-garden-one-page.html"/>
            <updated>2009-05-15T23:02:24Z</updated>
            <published>2009-05-15T23:02:24Z</published>
            <id>/blog/2009-May-15-all-screenshots-drupal-theme-garden-one-page.html</id>
            
            <content type="html">
                
                &lt;p&gt;I got annoyed with &lt;code&gt;drupal theme garden &amp;lt;http://themegarden.org/&amp;gt;&lt;/code&gt;&lt;em&gt; so I whipped up &lt;code&gt;this page &amp;lt;/prog/themegarden.cgi&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">I have vanquished the beast!</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-May-11-i-have-vanquished-beast.html"/>
            <updated>2009-05-11T21:35:50Z</updated>
            <published>2009-05-11T21:35:50Z</published>
            <id>/blog/2009-May-11-i-have-vanquished-beast.html</id>
            
            <content type="html">
                
                &lt;p&gt;procedure&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">WA haxxz</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Apr-02-wa-haxxz.html"/>
            <updated>2009-04-02T06:30:22Z</updated>
            <published>2009-04-02T06:30:22Z</published>
            <id>/blog/2009-Apr-02-wa-haxxz.html</id>
            
            <content type="html">
                
                &lt;p&gt;C:/Documents and Settings/classroom/Application Data/Microsoft/Internet Explorer/Desktop.http
ok maybe this time?
it will work
C:/Documents and Settings/classroom/Local Settings/Application&amp;nbsp;Data/Microsoft/Wallpaper1.bmp&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Songbird Recipe: Playlists</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Feb-02-songbird-recipe-playlists.html"/>
            <updated>2009-02-02T22:24:55Z</updated>
            <published>2009-02-02T22:24:55Z</published>
            <id>/blog/2009-Feb-02-songbird-recipe-playlists.html</id>
            
            <content type="html">
                
                &lt;p&gt;Here&amp;#8217;s a quick javascript+&lt;span class=&#34;caps&#34;&gt;XPCOM&lt;/span&gt; recipe on how to get a list of the user&amp;#8217;s 
playlists in a songbird&amp;nbsp;extension. &lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Install Python 2.6 in Ubuntu</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Jan-20-install-python-26-ubuntu.html"/>
            <updated>2009-01-20T18:20:48Z</updated>
            <published>2009-01-20T18:20:48Z</published>
            <id>/blog/2009-Jan-20-install-python-26-ubuntu.html</id>
            
            <content type="html">
                
                &lt;p&gt;At first blush, it would seem that those wanting the latest stable python, 2.6, 
would have to compile it themselves (or so &lt;code&gt;python.org 
&amp;lt;http://www.python.org/download/releases/2.6.1/&amp;gt;&lt;/code&gt;&lt;em&gt; would indicate). Fortunately 
for us, that process, which is at best annoying, and at worst long and 
complicated, is spared us by our friends over at Launchpad, and their 
&lt;code&gt;&#34;Personal Package Archives&#34; 
&amp;lt;https://help.launchpad.net/Packaging/PPA#Installing%20software%20from%20a%20PPA&amp;gt;&lt;/code&gt;&lt;/em&gt;. &lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Python + Last.FM</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Jan-20-python-lastfm.html"/>
            <updated>2009-01-20T17:27:48Z</updated>
            <published>2009-01-20T17:27:48Z</published>
            <id>/blog/2009-Jan-20-python-lastfm.html</id>
            
            <content type="html">
                
                &lt;p&gt;LastFM provides a great &lt;span class=&#34;caps&#34;&gt;REST&lt;/span&gt; &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;, which exposes almost all of its 
functionality, from getting info about a track to finding events in a specific 
area. Today I will demonstrate how to harness a little portion of that power 
with python, namely, getting a user&amp;#8217;s recent&amp;nbsp;tracks. &lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Songbird in Kubuntu</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Jan-13-songbird-kubuntu.html"/>
            <updated>2009-01-13T20:20:13Z</updated>
            <published>2009-01-13T20:20:13Z</published>
            <id>/blog/2009-Jan-13-songbird-kubuntu.html</id>
            
            <content type="html">
                &lt;p&gt;.. image:: http://lifehacker.com/assets/resources/2007/06/Songbird.png
   :width: 272
   :height: 282
   :alt:&amp;nbsp;Songbird&lt;/p&gt;
                &lt;p&gt;The amazing thing about Mozilla software is, that its hard to be more open than they are. Yes, they&amp;#8217;re open source, so &amp;#8216;anyone can contribute&amp;#8217;, but in all seriouseness, most of us are too busy/scared/noob to do anything like that. The real amazing bit lies in the Add-ons, which &lt;em&gt;anyone&lt;/em&gt; can make, and if you dont like something, you can just role your own fix for it &amp;#8212; in minutes. Using &lt;em&gt;javasript&lt;/em&gt;. Seriousely, it doesnt get much easier than&amp;nbsp;that.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Convert videos with ffmpeg</title>
            <author><name>Jared Forsyth</name></author>
            <link href="/blog/2009-Jan-06-convert-videos-ffmpeg.html"/>
            <updated>2009-01-06T14:07:58Z</updated>
            <published>2009-01-06T14:07:58Z</published>
            <id>/blog/2009-Jan-06-convert-videos-ffmpeg.html</id>
            
            <content type="html">
                &lt;p&gt;.. image:: http://ffmpeg.mplayerhq.hu/ffmpeg-logo.png
   :width: 306
   :height: 84
   :alt: FFmpeg&amp;nbsp;logo&lt;/p&gt;
                &lt;p&gt;&lt;code&gt;FFmpeg &amp;lt;http://ffmpeg.mplayerhq.hu/&amp;gt;&lt;/code&gt;_ is a wonderful   tool which every 
aspiring linux guru should get familiar with. The thing it does, just about 
better   than anything else, is handle media files. You can mux them, demux 
them, encode/decode, resize, compress  &amp;#8230;..you name&amp;nbsp;it. &lt;/p&gt;            </content>
        </entry>
    </feed>